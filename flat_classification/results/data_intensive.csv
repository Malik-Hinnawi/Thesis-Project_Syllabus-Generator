Key,Value
1,"reliable, scalable and maintainable applications, thinking about data systems, reliability, hardware faults, software errors, human errors, how important is reliability?, scalability, describing load, describing performance, approaches for coping with load, maintainability, operability: making life easy for operations, simplicity: managing complexity, evolvability: making change easy, summary"
2,"data models and query languages, relational model vs  document model, the birth of nosql, the object-relational mismatch, many-to-one and many-to-many relationships, are document databases repeating history?, relational vs  document databases today, query languages for data, declarative queries on the web, mapreduce querying, graph-like data models, property graphs, the cypher query language, graph queries in sql, triple-stores and sparql, the foundation: datalog, summary"
3,"storage and retrieval, data structures that power your database, hash indexes, sstables and lsm-trees, b-trees, other indexing structures, keeping everything in memory, transaction processing or analytics?, data warehousing, stars and snowflakes: schemas for analytics, column-oriented storage, column compression, sort order in column storage, writing to column-oriented storage, aggregation: data cubes and materialized views, summary"
4,"encoding and evolution, formats for encoding data, language-specific formats, json, xml and binary variants, thrift and protocol buffers, avro, the merits of schemas, modes of data flow, data flow through databases, data flow through services: rest and rpc, message passing data flow, summary"
5,"replication, leaders and followers, synchronous vs  asynchronous replication, setting up new followers, handling node outages, implementation of replication logs, problems with replication lag, reading your own writes, monotonic reads, consistent prefix reads, solutions for replication lag, multi-leader replication, use cases for multi-leader replication, handling write conflicts, multi-leader replication topologies, leaderless replication, writing to the database when a node is down, limitations of quorum consistency, sloppy quorums and hinted handoff, detecting concurrent writes, summary"
6,"partitioning, partitioning and replication, partitioning of key-value data, partitioning by key range, partitioning by hash of key, skewed workloads and relieving hot spots, partitioning and secondary indexes, partitioning secondary indexes by document, partitioning secondary indexes by term, rebalancing partitions, strategies for rebalancing, operations: automatic or manual rebalancing, request routing, parallel query execution, summary"
7,"transactions, the slippery concept of a transaction, the meaning of acid, single-object and multi-object operations, weak isolation levels, read committed, snapshot isolation and repeatable read, preventing lost updates, preventing write skew and phantoms, serializability, actual serial execution, two-phase locking (2pl), serializable snapshot isolation (ssi), summary"
8,"the trouble with distributed systems, faults and partial failures, cloud computing and supercomputing, unreliable networks, network faults in practice, detecting faults, timeouts and unbounded delays, synchronous vs  asynchronous networks, unreliable clocks, monotonic vs  time-of-day clocks, clock synchronization and accuracy, relying on synchronized clocks, process pauses, knowledge, truth and lies, the truth is defined by the majority, byzantine faults, system model and reality, summary"
9,"consistency and consensus, consistency guarantees, linearizability, what makes a system linearizable?, relying on linearizability, implementing linearizable systems, the cost of linearizability, ordering guarantees, ordering and causality, sequence number ordering, total order broadcast, distributed transactions and consensus, atomic commit and two-phase commit (2pc), distributed transactions in practice, fault-tolerant consensus, membership and coordination services, summary"
10," batch processing, batch processing with unix tools, simple log analysis, the unix philosophy, mapreduce and distributed filesystems, mapreduce job execution, reduce-side joins and grouping, map-side joins, the output of batch workflows, comparing mapreduce to distributed databases, beyond mapreduce, materialization of intermediate state, graphs and iterative processing, high-level apis and languages, summary"
11," stream processing, transmitting event streams, messaging systems, partitioned logs, databases and streams, keeping systems in sync, change data capture, event sourcing, state, streams, and immutability, processing streams, uses of stream processing, reasoning about time, stream joins, fault tolerance, summary"
