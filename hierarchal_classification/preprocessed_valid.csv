,Description,cat1,cat2,cat3
0,nan,Cover,,
1, 8FTUNJOTUFS PMMFHF 7 17 7 21 ,Title Page,,
2, 9781119320913 enhanced ePub Subjects LCSH Operating systems Computers Classification LCC QA76 76 O63 ebook LCC QA76 76 O63 S55825 2018 print DDC 005 4 3 dc23 LC record available at https lccn loc gov 2017043464 The inside back cover will contain pr inting identification and country of or igin if omitted from this page In addition if the ISBN on the back c over differs from the ISBN on this page the one on the back cover is correct Enhanced ePub ISBN 978 1 119 32091 3 Printed in the United States of America 10 9 8 7 6 5 4 3 2 1 ,Copyright,,
3, we present a large numberofexamplesthatpertaintothemostpopularandthemostinnovative operating systems including Linux Microsoft Windows Apple mac OS the originalname OSX waschangedin2016tomatchthenamingschemeofother Apple products and Solaris We also include examples of both Android and iOS currently thetwo dominant mobileoperatingsystems The organization of the text reflects our many years of teaching courses on operating systems Considerationwas also givento the feedback provided vii,Preface,,
4,s 116 3 4 Interprocess Communication 123 3 5 IPC in Shared MemorySystems 125 3 6 IPC in Message Passing Systems 1273 7 Examples ofIPC Systems 132 3 8 Communicationin Client ServerSystems 145 3 9 Summary 153 Practice Exercises 154 FurtherReading 156 YYJ,Contents,,
5,ting system is large and complex it must be cre ated piece by piece Each of these pieces should be a well delineated portion of the system with carefully deÔ¨Åned inputs outputs and func tions ,PART ONE OVERVIEW,,
6,JECTIVES Describe the general organization of a computer system and the role of interrupts Describe the components in a modern multiprocessor computer system Illustrate the transition from user mode to kernel mode Discuss how operating systems are used in various computing environ ments Provide examples of free and open source operating systems 3,PART ONE OVERVIEW,Chapter 1 Introduction,
7,ating system is designed mostly for ease of use with some attention paid to performance and security and none paid to resource utilization how various hardware and software resources areshared compilers web browsers development kits etc user application programs operating system computer hardware CPU memory I O devices etc Figure 1 1 Abstract view of the components of a computer system ,PART ONE OVERVIEW,Chapter 1 Introduction,1.1 What Operating Systems Do
8,ating system is designed mostly for ease of use with some attention paid to performance and security and none paid to resource utilization how various hardware and software resources areshared compilers web browsers development kits etc user application programs operating system computer hardware CPU memory I O devices etc Figure 1 1 Abstract view of the components of a computer system ,,,
9,s calculation Those earlycomputersevolvedintogeneral pu rpose multifunctionmainframes and that swhenoperatingsystemswereborn Inthe1960s Moore s Law predicted that the number of transistors on an integrated circuit would double every 18 months and that prediction has held true Computers gained in functionality and shrank in size leading to a vast number of uses and a vast number and variety of operating systems See Appendix Afor more details on the history ofoperating systems How then canwedefinewhatanoperatingsystemis Ingeneral wehave no completelyadequatedefinitionof an operating system Operatingsystems,,,
10,s calculation Those earlycomputersevolvedintogeneral pu rpose multifunctionmainframes and that swhenoperatingsystemswereborn Inthe1960s Moore s Law predicted that the number of transistors on an integrated circuit would double every 18 months and that prediction has held true Computers gained in functionality and shrank in size leading to a vast number of uses and a vast number and variety of operating systems See Appendix Afor more details on the history ofoperating systems How then canwedefinewhatanoperatingsystemis Ingeneral wehave no completelyadequatedefinitionof an operating system Operatingsystems,,,
11, access tothe memory Inthefollowingsubsections wedescribesomebasicsofhowsuchasystem operates focusingonthreekeyaspectsofthesystem Westartwithinterrupts which alert the CPUto events that require attention We then discuss storage structureand I Ostructure USB controllerkeyboard printer mouse monitor disks graphics adapterdisk controller memoryCPU system buson line Figure 1 2 A typical PC computer system ,1.1.2 System View,1.1.3 Defining Operating Systems,1.2 Computer-System Organization
12,re Interruptsareanimportantpartofacomputerarchitecture Eachcomputer design has its own interrupt mechanism but several functions are common Theinterruptmusttransfercontroltotheappropriateinterruptserviceroutine The straightforward method for managing this transfer would be to invoke a generic routine to examine the interrupt information The routine in turn Figure 1 3 Interrupt timeline for a single program doing output ,,,
13,otstrap program w h ic hth enlo a ds the operating system Since RAMisvolatile loses its content when power is turned off or otherwise lost we cannot trust it to hold the bootstrap pro gram Instead for this and some other purposes the computer uses electri callyerasableprogrammableread onlymemory EEPROM and otherformsof firmwar storage that is infrequently written to and is nonvolatile EEPROM,,,
14,much inexpensive nonvolatile storage as possible Caches can be installed to improve performance where a large disparity in access time or transferrateexistsbetweentwo components 1 2 3 I O Structure Alarge portion of operating system code is dedicated to managing I O b o t h because of its importance to the reliability and performance of a system and because of thevaryingnature ofthe devices Recall from the beginning of this section that a general purpose computer systemconsists of multipledevices allof which exchange data viaa common,,,
15,essor Systems Many years ago most computer systems used a single processor containing oneCPUwith a single processing core The coreis the component that exe cutesinstructionsandregistersforstoringdatalocally Theonemain CPUwith its core is capable of executing a general purpose instruction set including instructionsfromprocesses Thesesystemshaveotherspecial purposeproces ,1.2.2 Storage Structure,1.2.3 I/O Structure,1.3 Computer-System Architecture
16,essor Systems Many years ago most computer systems used a single processor containing oneCPUwith a single processing core The coreis the component that exe cutesinstructionsandregistersforstoringdatalocally Theonemain CPUwith its core is capable of executing a general purpose instruction set including instructionsfromprocesses Thesesystemshaveotherspecial purposeproces ,,,
17,aded resulting in inefficiencies These inefficiencies can be avoided if the processors share certain data structures A multiprocessor system of this form will allow processes and resources such asmemory tobeshareddynamicallyamongthevariousprocessorsandcan lower the workload variance among the processors Such a system must be writtencarefully aswe shallseeinChapter5and Chapter6 The definition of multiprocessor has evolved over time and now includes multicore systems inwhichmultiplecomputingcoresresideonasinglechip Multicore systems can be more efficient than multiple chips with single cores because on chip communication is faster than between chip communication ,,,
18,fer a failure of any single component and still continue operation Fault tolerance requires a mechanism to allow the failure to be detected diagnosed and if possible corrected Clustering can be structured asymmetrically or symmetrically In asym metric clustering onemachineisin hot standby mode whiletheotherisrun ningtheapplications Thehot standbyhostmachinedoesnothingbutmonitor the active server If that server fails the hot standby host becomes the active,,,
19,econsiderin thissection For a computer to start running for instance when it is powered up or rebooted it needs to have an initial program to run As noted earlier this initial program or bootstrap program tends to be simple Typically it is stored within the computer hardware in firmware It initializes all aspects of the system from CPUregisters to device controllers to memory contents The bootstrap program must know how to load the operating system and how to,1.3.2 Multiprocessor Systems,1.3.3 Clustered Systems,1.4 Operating-System Operations
20,ically executes for only a short time before it either finishes or needs to perform I O I Omay be interactive that is output goes to a display for the user and input comes from a user keyboard mouse ortouchscreen Sinceinteractive I Otypicallyrunsat peo ple speeds it may take a long time to complete Input for example may be process 1 0max operating system process 2 process 3 process 4 Figure 1 12 Memory layout for a multiprogramming system ,,,
21,rate modesof operation user mode and kernel mode also called supervisor mode system mode o rprivileged mode A bit called the mode bit is added to the hardware of the computer to indicate the current mode kernel 0 or user 1 With the mode bit we can distinguish between a task that is executed on behalf of the operating system and one that is executed on behalf of the user When the computer system is executingonbehalfofauserapplicat ion thesystemisinusermode However when a user application requests a service from the operating system via a system call the system must transition from user to kernel mode to fulfill,,,
22,second or variable for example from 1 millisecond to 1 second A variable timer is generally implemented by a fixed rate clock and a counter The operating system sets the counter Every time the clock ticks the counter isdecremented Whenthecounterreaches0 aninterruptoccurs Forinstance a 10 bit counter with a 1 millisecond clock allows interrupts at intervals from 1 millisecondto 1 024 milliseconds instepsof 1 millisecond Before turning over control to the user the operating system ensures that the timer is set to interrupt If the timer interrupts control transfers automati cally to the operating system which may treat the interrupt as a fatal error or,,,
23,hasize that a program by itself is not a process A program is a passiveentity likethecontentsofafilestoredondisk whereasaprocessisan activeentity A single threaded process has one program counter specifying the next instruction to execute Threads are covered in Chapter 4 The exe cution of such a process must be sequential The CPUexecutes one instruction of the process after another until the process completes Further at any time one instruction at most is executed on behalf of the process Thus although,1.4.2 Dual-Mode and Multimode Operation,1.4.3 Timer,1.5 Resource Management
24,hasize that a program by itself is not a process A program is a passiveentity likethecontentsofafilestoredondisk whereasaprocessisan activeentity A single threaded process has one program counter specifying the next instruction to execute Threads are covered in Chapter 4 The exe cution of such a process must be sequential The CPUexecutes one instruction of the process after another until the process completes Further at any time one instruction at most is executed on behalf of the process Thus although,,,
25,programcan beloadedandexecuted Toimproveboththeutilizationofthe CPUandthespeedofthecomputer s responsetoitsusers general purposecomputersmustkeepseveralprograms inmemory creatinganeedformemorymanagement Manydifferentmemory managementschemesareused Theseschemesreflectvariousapproaches and theeffectivenessofanygivenalgorithmdependsonthesituation Inselectinga memory managementschemeforaspecificsystem wemusttakeintoaccount many factors especially the hardware design of the system Each algorithm requires its own hardware support ,,,
26,ple users have access to files it may be desirable to control which user may access a file and how that user may access it for example read write append The operating system is responsible for the following activities in connec tionwith file management Creatingand deletingfiles Creatingand deletingdirectoriesto organizefiles Supportingprimitivesfor manipulating filesand directories Mapping filesonto mass storage Backing up filesonstable nonvolatile storagemedia,,,
27,y storage and tertiary storage management are discussedinChapter11 1 5 5 Cache Management Caching is an important principle of computer systems Here s how it works Information is normally kept in some storage system such as main memory As it is used it is copied into a faster storage system the cache on a tem porary basis When we need a particular piece of information we first check whetheritisinthecache Ifitis weusetheinformationdirectlyfromthecache ,,,
28,y storage and tertiary storage management are discussedinChapter11 1 5 5 Cache Management Caching is an important principle of computer systems Here s how it works Information is normally kept in some storage system such as main memory As it is used it is copied into a faster storage system the cache on a tem porary basis When we need a particular piece of information we first check whetheritisinthecache Ifitis weusetheinformationdirectlyfromthecache ,,,
29,y managementcomponentthatincludesbuffering caching and spooling Ageneraldevice driverinterface Driversforspecifichardware devices Only the device driver knows the peculiarities of the specific device to which itisassigned We discussed earlier in this chapter how interrupt handlers and device driversareusedintheconstructionofefficient I Osubsystems InChapter12 wediscusshowthe I Osubsysteminterfacestoth eothersystemcomponents manages devices transfersdata and detects I Ocompletion ,,,
30,That user IDis associated with all of the user s processes and threads When an IDneeds to be readable by a user it is translated back to the user name viathe username list In some circumstances we wish to distinguish among sets of users rather thanindividualusers Forexample theownerofafileona UNIXsystemmaybe allowedtoissuealloperationsonthatfile whereasaselectedsetofusersmay beallowedonlytoreadthe file Toaccomplishthis we needtodefineagroup name and the set of users belonging to that group Group functionality can be implemented as a system wide list of group names and group identifier Auser can be in one or more groups depending on operating system design,1.5.5 Cache Management,1.5.6 I/O System Management,1.6 Security and Protection
31,cular CPUarchitecture runs within another operating system also native to that CPU Virtualization first came about on IBMmainframes as a method for multiple users to run tasks concurrently Running multiple vir tual machines allowed and still allows many users to run tasks on a system designedforasingleuser Later inresponsetoproblemswithrunningmultiple Microsoft Windows applications on the Intel x86 CPU VMware created a new virtualization technology in the form of an application that ran on Windows That application ran one or more guestcopies of Windows or other native x86 operating systems each running its own applications See Figure 1 16 ,1.5.6 I/O System Management,1.6 Security and Protection,1.7 Virtualization
32,n of physically separate possibly heteroge neous computer systems that are networked to provide users with access to the various resources that the system maintains Access to a shared resource increases computation speed functiona lity data availability and reliability Someoperatingsystemsgeneralizenetworkaccessasaformoffileaccess with the details of networking contained in the network interface s device driver ,1.6 Security and Protection,1.7 Virtualization,1.8 Distributed Systems
33,ther computers on the network although it is aware of the network and is able to communicate with other networked computers Adistributed operat ingsystemprovidesalessautonomousenvironment Thedifferentcomputers communicate closely enough to providethe illusion that only a single operat ingsystemcontrolsthenetwork Weco vercomputernetworksanddistributed systemsinChapter19 1 9 Kernel Data Structures We turn next to a topic central to operating system implementation the way data are structured in the system In this section we briefly describe several fundamental data structures used extensively in operating systems Readers,1.7 Virtualization,1.8 Distributed Systems,1.9 Kernel Data Structures
34,potentiallytraversingall nelementsintheworstcase Listsaresome timesuseddirectlybykernelalgorithms Frequently though theyareusedfor constructing more powerfuldata structures such as stacks and queues Astackis a sequentially ordered data structure that uses the last in first out LIFO principleforaddingandremovingitems meaningthatthelastitem data null null data data data Figure 1 18 Doubly linked list ,,,
35,This numeric value can then be used as an index into a table typically an array to quickly retrievethe data Whereas searchingforadataitemthroughalistofsize ncanrequireupto O n compar isons using a hash function for retrieving data from a table can be as good as O 1 dependingonimplementationdetails Becauseofthisperformance hash functions areusedextensivelyinoperatingsystems One potential difficulty with hash functions is that two unique inputs can result in the same output value that is they can link to the same table,,,
36,This numeric value can then be used as an index into a table typically an array to quickly retrievethe data Whereas searchingforadataitemthroughalistofsize ncanrequireupto O n compar isons using a hash function for retrieving data from a table can be as good as O 1 dependingonimplementationdetails Becauseofthisperformance hash functions areusedextensivelyinoperatingsystems One potential difficulty with hash functions is that two unique inputs can result in the same output value that is they can link to the same table,,,
37, several resources and the availability of each resource is indicated by the value of a binary digit 0 means that the resourceisavailable while1indicatesth atitisunavailable orviceversa The 01 n valuehash maphash_function key Figure 1 21 Hash map ,,,
38,mputers Today webtechnologiesandincreasing WANbandwidtharestretchingthe boundariesoftraditionalcomputing Companiesestablish portals whichpro vide web accessibility to their internal servers Network computers orthin clients whichareessentiallyterminalsthatunderstandweb basedcomput ing are used in place of traditional workstations where more security or easier maintenance is desired Mobile computers can synchronize with PCs to allow very portable use of company information Mobile devices can also,1.9.3 Hash Functions and Maps,1.9.4 Bitmaps,1.10 Computing Environments
39,mputers Today webtechnologiesandincreasing WANbandwidtharestretchingthe boundariesoftraditionalcomputing Companiesestablish portals whichpro vide web accessibility to their internal servers Network computers orthin clients whichareessentiallyterminalsthatunderstandweb basedcomput ing are used in place of traditional workstations where more security or easier maintenance is desired Mobile computers can synchronize with PCs to allow very portable use of company information Mobile devices can also,,,
40,y that is either unavailable or impractical on a desktop or laptopcomputer Today mobilesystemsareusednot only fore mailand web browsing but also for playing music and video reading digital books taking photos and recordingandeditinghigh definitionvideo Accordingly tremendousgrowth continues in the wide range of applications that run on such devices Many developers are now designing applications that take advantage of the unique features of mobile devices such as global positioning system GPS c h i p s accelerometers andgyroscopes Anembedded GPSchipallowsamobiledevice tousesatellitestodetermineitsprecisel ocationonEarth Thatfunctionalityis,,,
41,er system has the general structure depictedinFigure1 22 Server systems can be broadly categorized as compute servers and file servers The compute server system provides an interface to which a client can send a requestto perform an action for example read data In response the server executes the action and sends the results to the client Aserver server networkclient desktop client laptop client smartphone Figure 1 22 General structure of a client server system ,,,
42,k and the actual exchange of files took place between the peer nodes The Gnutella system used a tech niquesimilartothesecondtype aclientbroadcastfilerequeststoothernodes in the system and nodes that could service the request responded directly to the client Peer to peer networks can be used to exchange copyrighted mate rials music for example anonymously and there are laws governing the distribution of copyrighted material Notably Napster ran into legal trouble for copyright infringement and its services were shut down in 2001 For this reason the future of exchanging filesremainsuncertain ,,,
43,rd processorsor spreadsheets availableviatheInternet Platform as a service PaaS a software stack ready for application use viatheInternet for example adatabase server Infrastructure as a service IaaS servers or storage available over the Internet for example storage available for making backup copies of pro duction data ,,,
44, such as automobile enginesand robotic arms These embedded systems vary considerably Some are general purpose computers running standard operating systems such as Linux with special purpose applications to implement the functionality Others are hardware devices with a special purpose embedded operating system providing just the functionality desired Yet others are hardware devices,,,
45, code available but also is licensed to allow no cost use redistribution and modification Open source software does not necessarily offer such licensing Thus although all free software is open source some open source software is not free GNU Linux is the most famous open source operating system with some distributions free and others open source only http www gnu org distros Microsoft Windows is a well known example of the opposite closed source approach Windows isproprietary software Microsoft owns it restricts its use and carefully protects its source code Apple s mac OSoperating system comprises a hybrid,1.10.5 Cloud Computing,1.10.6 Real-Time Embedded Systems,1.11 Free and Open-Source Operating Systems
46,ce code rather than the source code itself helpedthemtoachievethisgoal aswellasprotectingtheircodeandtheir ideasfromtheircompetitors AlthoughtheHomebrewusergroupsofthe1970s exchanged code during their meetings the operating systems for hobbyist machines such as CPM were proprietary By 1980 proprietary software was the usual case 1 11 2 Free Operating Systems Tocounterthemovetolimitsoftwareuseandredistribution RichardStallman in 1984 started developing a free UNIX compatible operating system called GNU whichisarecursiveacronymfor GNU sNotUnix ToStallman free referstofreedomofuse notprice Thefree softwaremovementdoesnotobject,,,
47,ce code rather than the source code itself helpedthemtoachievethisgoal aswellasprotectingtheircodeandtheir ideasfromtheircompetitors AlthoughtheHomebrewusergroupsofthe1970s exchanged code during their meetings the operating systems for hobbyist machines such as CPM were proprietary By 1980 proprietary software was the usual case 1 11 2 Free Operating Systems Tocounterthemovetolimitsoftwareuseandredistribution RichardStallman in 1984 started developing a free UNIX compatible operating system called GNU whichisarecursiveacronymfor GNU sNotUnix ToStallman free referstofreedomofuse notprice Thefree softwaremovementdoesnotobject,,,
48, applications hardware support user interface and purpose For example Red Hat Enterprise Linux is geared to large commercial use PCLinuxOSis a live CD an operating system that can be booted and run from a CD ROM without being installed on a system s boot disk Avariant of PCLinuxOS called PCLinuxOSSupergamer DVD isa live DVDthatincludes graphics drivers and games A gamer can run it on any compatible system simply by booting from the DVD When the gamer is finished a reboot of the systemresetsitto itsinstalledoperatingsystem You can run Linux on a Windows or other system using the following simple freeapproach ,,,
49,y open source projects this source code is contained in and controlled by a version control system in this case subversion https subversion apache org source code Version control systems allow au s e rt o pull an entire source code tree to his computer and push any changes back into the repository for others to then pull These systems also provide other features including an entire history of each file and a conflict resolution feature in case the same file is changed concurrently Another,,,
50,environmentfor application programstorun Interrupts are a key way in which hardware interacts with the operating system Ahardwaredevicetriggersaninterruptbysendingasignaltothe CPUto alert the CPUthat some event requires attention The interrupt is managed by the interrupthandler Foracomputertodoitsjobofexecutingprograms theprogramsmustbe in main memory which is the only large storage area that the processor can access directly Themainmemoryisusuallyavolatilestoragedevicethatlosesitscontents when poweristurned off or lost ,,,
51,environmentfor application programstorun Interrupts are a key way in which hardware interacts with the operating system Ahardwaredevicetriggersaninterruptbysendingasignaltothe CPUto alert the CPUthat some event requires attention The interrupt is managed by the interrupthandler Foracomputertodoitsjobofexecutingprograms theprogramsmustbe in main memory which is the only large storage area that the processor can access directly Themainmemoryisusuallyavolatilestoragedevicethatlosesitscontents when poweristurned off or lost ,,,
52,environmentfor application programstorun Interrupts are a key way in which hardware interacts with the operating system Ahardwaredevicetriggersaninterruptbysendingasignaltothe CPUto alert the CPUthat some event requires attention The interrupt is managed by the interrupthandler Foracomputertodoitsjobofexecutingprograms theprogramsmustbe in main memory which is the only large storage area that the processor can access directly Themainmemoryisusuallyavolatilestoragedevicethatlosesitscontents when poweristurned off or lost ,1.11.5 Solaris,1.11.6 Open-Source Systems as Learning Tools,1.12 Summary
53,kcould arisewithsuch ascheme 1 8SomeCPUsprovideformorethantwomodesofoperation Whataretwo possibleusesof thesemultiplemodes 1 9Timers could be used to compute the current time Provide a short descriptionof how this could beaccomplished 1 10Givetwo reasonswhy caches areuseful What problemsdotheysolve What problems do they cause If a cache can be made as large as the,1.11.6 Open-Source Systems as Learning Tools,1.12 Summary,Practice Exercises
54, Mauro Solaris Internals SecondEdition PrenticeHall 2007 Russinovich et al 2017 M Russinovich D A Solomon andA Ionescu Win dows Internals Part 1 SeventhEdition MicrosoftPress 2017 Stallings 2017 W Stallings Operating Systems Internals and Design Principles 9th Edition Ninth Edition PrenticeHall 2017 Tanenbaum 2014 A S Tanenbaum Modern Operating Systems P r e n t i c eH a l l 2014 ,1.12 Summary,Practice Exercises,Further Reading
55, Mauro Solaris Internals SecondEdition PrenticeHall 2007 Russinovich et al 2017 M Russinovich D A Solomon andA Ionescu Win dows Internals Part 1 SeventhEdition MicrosoftPress 2017 Stallings 2017 W Stallings Operating Systems Internals and Design Principles 9th Edition Ninth Edition PrenticeHall 2017 Tanenbaum 2014 A S Tanenbaum Modern Operating Systems P r e n t i c eH a l l 2014 ,Practice Exercises,Further Reading,Bibliography
56,ySMPsystems have different levels of caches one level is local to each processing core and another level is shared among all processing cores Why are caching systemsdesignedthisway 1 19Rank the following storagesystemsfrom slowestto fastest a Hard diskdrives b Registers c Opticaldisk d Mainmemory e Nonvolatilememory f Magnetictapes g Cache,Further Reading,Bibliography,Chapter 1 Exercises
57,system performance Design and implement kernel modules for interacting with a Linux kernel 2 1 Operating System Services Anoperating system providesan environment for the executionof programs It makes certain services available to programs and to the users of those pro grams The specific services provided of course differ from one operating 55,Chapter 1 Exercises,Chapter 2 Operating-System Structures,
58,system performance Design and implement kernel modules for interacting with a Linux kernel 2 1 Operating System Services Anoperating system providesan environment for the executionof programs It makes certain services available to programs and to the users of those pro grams The specific services provided of course differ from one operating 55,Chapter 1 Exercises,Chapter 2 Operating-System Structures,2.1 Operating-System Services
59,termines the size o f the command interpreter since each command requiresitsown implementingcode An alternative approach used by UNIX among other operating systems implements most commands through system programs In this case the commandinterpreterdoesnotunderstandthecommandinanyway itmerely uses the command to identify a file to be loaded into memory and executed Thus the UNIXcommand to deletea file rm file txt wouldsearchforafilecalled rm loadthefileintomemory andexecuteitwith theparameter file txt Thelogicassociatedwiththe rmcommandwouldbe,Chapter 2 Operating-System Structures,2.1 Operating-System Services,2.2 User and Operating-System Interface
60,termines the size o f the command interpreter since each command requiresitsown implementingcode An alternative approach used by UNIX among other operating systems implements most commands through system programs In this case the commandinterpreterdoesnotunderstandthecommandinanyway itmerely uses the command to identify a file to be loaded into memory and executed Thus the UNIXcommand to deletea file rm file txt wouldsearchforafilecalled rm loadthefileintomemory andexecuteitwith theparameter file txt Thelogicassociatedwiththe rmcommandwouldbe,,,
61, the years the most significant being the adoption of the Aqua interface that appeared with mac OS Microsoft s first version of Windows Version 1 0 was based on the addition of a GUIinterface to the MS DOS operatingsystem LaterversionsofWin dowshavemadesignificantchangesin theappearanceofthe GUIalongwithseveralenhancementsinitsfunctionality ,,,
62,erface 2 2 4 Choice of Interface The choice of whether to use a command line or GUIinterface is mostly one of personal preference System administrators who manage computers and power users who have deep knowledge of a system frequently use the Figure 2 3 The iPhone touch screen ,,,
63,erface 2 2 4 Choice of Interface The choice of whether to use a command line or GUIinterface is mostly one of personal preference System administrators who manage computers and power users who have deep knowledge of a system frequently use the Figure 2 3 The iPhone touch screen ,,,
64,existing file another systemcall andcreateanewone yetanothersystemcall Anotheroption in aninteractivesystem istoasktheuser viaasequenceofsystemcallstooutput the prompting message and to read the response from the terminal whether to replacethe existingfile orto abort the program When both files are set up we enter a loop that reads from the input file a system call and writes to the output file another system call Each readandwritemustreturnstatusinformationregardingvariouspossibleerror conditions On input the program may find that the end of the file has been,2.2.3 Touch-Screen Interface,2.2.4 Choice of Interface,2.3 System Calls
65,existing file another systemcall andcreateanewone yetanothersystemcall Anotheroption in aninteractivesystem istoasktheuser viaasequenceofsystemcallstooutput the prompting message and to read the response from the terminal whether to replacethe existingfile orto abort the program When both files are set up we enter a loop that reads from the input file a system call and writes to the output file another system call Each readandwritemustreturnstatusinformationregardingvariouspossibleerror conditions On input the program may find that the end of the file has been,,,
66,ngsystem Inthecaseof UNIXandLinuxforprograms writtenintheClanguage thelibraryiscalled libc Notethat unlessspecified thesystem callnamesusedthroughoutthistextaregenericexamples Each operatingsystemhas its ownname for eachsystemcall Behind the scenes the functions that make up an APItypically invoke the actual system calls on behalf of the application programmer For example the Windows function CreateProcess which unsurprisingly isusedtocreate,,,
67,rogrammer in finding and correcting errors or bugs to determine the cause of the problem Under either normal or abnormal circumstances the operating system must transfer control to the invoking command interpreter The command interpreter then reads the next command In an interactive system the command interpreter simply continues with the next command it is assumed that the user will issue an appropriate command to respond to,,,
68,nguages or machine language areneededas well Communications These programs provide the mechanism for creating virtual connections among processes users and computer systems They allow users to send messages to one another s screens to browse web pages tosende mailmessages tologinremotely ortotransferfilesfrom one machine to another Background services All general purpose systems have methods for launching certain system program processes at boot time Some of these processes terminate after completing their tasks while others continue to,2.3.2 Application Programming Interface,2.3.3 Types of System Calls,2.4 System Services
69,ect files or librariesmay be includedaswell suchasthestandardCormathlibrary specifiedwiththeflag lm Aloaderisusedtoloadthebinaryexecutablefileintomemory whereitis eligible to run on a CPUcore An activity associated with linking and loading isrelocation which assigns final addresses to the program parts and adjusts codeanddataintheprogramtomatchthoseaddressessothat forexample the codecan call library functions and access itsvariablesas it executes InFigure 2 11 weseethattoruntheloader allthatisnecessaryistoenterthenameofthe executable file on the command line When a program name is enteredon the,2.3.3 Types of System Calls,2.4 System Services,2.5 Linkers and Loaders
70,ativeapplications and theinterpreterprovidesonlyasubsetofeachoperatingsystem sfeatures possiblylimitingthefeaturesetsof the associatedapplications 2 The application can be written in a language that includes a virtual machine containing the running application The virtual machine is part ofthelanguage sfull RTE OneexampleofthismethodisJava Javahasan RTEthat includesaloader byte code verifier and othercomponents that loadtheJavaapplicationintotheJavavirtualmachine This RTEhasbeen,2.4 System Services,2.5 Linkers and Loaders,2.6 Why Applications Are Operating-System Specific
71,heproblemofdefiningtherequire ments for an operating system The wide range of systems in existence shows thatdifferentrequirementscanresultinalargevarietyofsolutionsfordifferent environments Forexample therequirementsforWindRiverVxWorks areal time operating system for embedded systems must have been substantially differentfromthoseforWindowsServer alargemultiaccessoperatingsystem designedfor enterpriseapplications Specifying and designing an operating system is a highly creative task Although no textbook can tell you how to do it general principles have been,2.5 Linkers and Loaders,2.6 Why Applications Are Operating-System Specific,2.7 Operating-System Design and Implementation
72,heproblemofdefiningtherequire ments for an operating system The wide range of systems in existence shows thatdifferentrequirementscanresultinalargevarietyofsolutionsfordifferent environments Forexample therequirementsforWindRiverVxWorks areal time operating system for embedded systems must have been substantially differentfromthoseforWindowsServer alargemultiaccessoperatingsystem designedfor enterpriseapplications Specifying and designing an operating system is a highly creative task Although no textbook can tell you how to do it general principles have been,,,
73,ons are important for all resource allocation Whenever it is necessarytodecidewhetherornottoallocatearesource apolicydecisionmust be made Whenever the question is howrather than what i ti sam e c h a n i s m that mustbe determined 2 7 3 Implementation Onceanoperatingsystemisdesigned itmustbeimplemented Becauseoper atingsystemsarecollectionsofmany programs writtenbymany peopleover alongperiodoftime itisdifficulttomakegeneralstatementsabouthowthey areimplemented Early operating systems were written in assembly language Now most are written in higher level languages such as C or C with small amounts,,,
74,ons are important for all resource allocation Whenever it is necessarytodecidewhetherornottoallocatearesource apolicydecisionmust be made Whenever the question is howrather than what i ti sam e c h a n i s m that mustbe determined 2 7 3 Implementation Onceanoperatingsystemisdesigned itmustbeimplemented Becauseoper atingsystemsarecollectionsofmany programs writtenbymany peopleover alongperiodoftime itisdifficulttomakegeneralstatementsabouthowthey areimplemented Early operating systems were written in assembly language Now most are written in higher level languages such as C or C with small amounts,,,
75,System Structure A system as large and complex as a modern operating system must be engi neeredcarefullyifitistofunctionpr operlyandbemodifiedeasily Acommon approach is to partition the task into small components or modules rather than have one single system Each of these modules should be a well defined portionofthesystem withcarefullydefinedinterfacesandfunctions Youmay useasimilarapproachwhenyoustructureyourprograms ratherthanplacing allofyourcodeinthe main function youinsteadseparatelogicintoanum berof functions clearlyarticulatepara metersand returnvalues and thencall those functions from main ,2.7.2 Mechanisms and Policies,2.7.3 Implementation,2.8 Operating-System Structure
76,hic in that it runs entirely in kernel mode in a single address space but as we shall see in Section 2 8 4 it does have a modular design that allows thekerneltobe modifiedduring runtime Despite the apparent simplicity of monolithic kernels they are difficult to implement and extend Monolithic kernels do have a distinct performance advantage however there is very little overhead in the system call interface andcommunicationwithinthekernelisfast Therefore despitethedrawbacks,,,
77, A typical operating system layer say layer M consists of data structures and a set of functions that can be invoked by higher level layers Layer M in turn can invokeoperationsonlower levellayers The main advantage of the layered approach is simplicity of construction anddebugging Thelayersareselectedsothateachusesfunctions operations ,,,
78,s of layerdefinitionand interaction 2 8 3 Microkernels We have already seen that the original UNIXsystem had a monolithic struc ture As UNIXexpanded the kernel became large and difficult to manage In the mid 1980s researchers at Carnegie Mellon University developed an operating system called Machthat modularized the kernel using the micro kernelapproach This method structures the operating system by removing,,,
79,l whilemaintainingtheperforma ncebenefitsofamonolithicsystem We cover creating LKMs in Linux in several programming exercises at the end of this chapter 2 8 5 Hybrid Systems In practice very few operating systems adopt a single strictly defined struc ture Instead they combine different structures resulting in hybrid systems that address performance security an d usability issues For example Linux is monolithic because having the operating system in a single address space provides very efficient performance However it also modular so that new functionality can be dynamically added to the kernel Windows is largely,,,
80,l whilemaintainingtheperforma ncebenefitsofamonolithicsystem We cover creating LKMs in Linux in several programming exercises at the end of this chapter 2 8 5 Hybrid Systems In practice very few operating systems adopt a single strictly defined struc ture Instead they combine different structures resulting in hybrid systems that address performance security an d usability issues For example Linux is monolithic because having the operating system in a single address space provides very efficient performance However it also modular so that new functionality can be dynamically added to the kernel Windows is largely,,,
81,rytocontainthedevicedriversforallsupported I Odevices butonly those needed are selected and linked into the operating system Because the systemisnotrecompiled systemgenerationisfaster buttheresultingsystem maybeoverlygeneralandmaynotsupportdifferenthardwareconfigurations Attheotherextreme itispossibletoconstructasystemthatiscompletely modular Here selectionoccursatexecutiontimeratherthanatcompileorlink time System generation involves simply setting the parameters that describe the systemconfiguration ,2.8.4 Modules,2.8.5 Hybrid Systems,2.9 Building and Booting an Operating System
82,rytocontainthedevicedriversforallsupported I Odevices butonly those needed are selected and linked into the operating system Because the systemisnotrecompiled systemgenerationisfaster buttheresultingsystem maybeoverlygeneralandmaynotsupportdifferenthardwareconfigurations Attheotherextreme itispossibletoconstructasystemthatiscompletely modular Here selectionoccursatexecutiontimeratherthanatcompileorlink time System generation involves simply setting the parameters that describe the systemconfiguration ,,,
83,rameters for the system are set in a GRUBconfiguration file which is loadedatstartup GRUBisflexibleandallowschangestobemadeatboottime including modifying kernel parameters and even selecting among different kernelsthatcanbebooted Asanexample thefollowingarekernelparameters from thespecialLinuxfile proc cmdline which is usedat boot time BOOT IMAGE boot vmlinuz 4 4 0 59 generic root UUID 5f2e2232 4e47 4fe8 ae94 45ea749a5c92 BOOT IMAGEis the name of the kernel image to be loaded into memory and rootspecifiesa uniqueidentifierof the rootfilesystem ,,,
84,roblems are considered bugs so debugging can also include performance tuning w h i c h seeks to improve performance by removing processing bottlenecks I nt h i s section we explore debugging process and kernel errors and performance problems Hardwaredebuggingisoutsidethescope ofthis text 2 10 1 Failure Analysis If a process fails most operating systems write the error information to a log filto alert system administrators or users that the problem occurred The operating system can also take a core dump a capture of the memory of the process andstoreitinafileforlateranalysis Memorywasreferredtoasthe,2.9.1 Operating-System Generation,2.9.2 System Boot,2.10 Operating-System Debugging
85,roblems are considered bugs so debugging can also include performance tuning w h i c h seeks to improve performance by removing processing bottlenecks I nt h i s section we explore debugging process and kernel errors and performance problems Hardwaredebuggingisoutsidethescope ofthis text 2 10 1 Failure Analysis If a process fails most operating systems write the error information to a log filto alert system administrators or users that the problem occurred The operating system can also take a core dump a capture of the memory of the process andstoreitinafileforlateranalysis Memorywasreferredtoasthe,,,
86,ms keep track of system activity through a series of counters such as the number of system calls made or the number of operations performed to a network device or disk The following are examples of Linux tools thatuse counters Per Process ps reportsinformation fora singleprocessor selectionofprocesses top reportsreal timestatisticsfor currentprocesses System Wide vmstat reportsmemory usagestatistics netstat reportsstatisticsfornetwork interfaces iostat reports I Ousagefor disks,,,
87,specificevent such as thestepsinvolvedina system callinvocation The following areexamplesof Linuxtools that traceevents Per Process strace traces systemcallsinvokedby a process gdb a source leveldebugger System Wide perf a collection of Linuxperformancetools tcpdump collects network packets,,,
88, providingafront endinterfaceinPython A BCCtooliswritteninPythonand it embeds C code that interfaces with the e BPFinstrumentation which in turn interfaceswiththekernel The BCCtoolalsocompilestheCprogramintoe BPF instructions and inserts it into the kernel using either probes or tracepoints two techniquesthat allowtracing eventsinthe Linuxkernel The specifics of writing custom BCCtools are beyond the scope of this text but the BCCpackage which is installed on the Linux virtual machine we provide provides a number of existing tools that monitor several areas,,,
89,tem implementsthesepoliciesthrough specificmechanisms A monolithic operating system has no structure all functionality is pro vided in a single static binary file that runs in a single address space Although such systems are difficult to modify their primary benefit is efficiency A layered operating system is divided into a number of discrete layers where the bottom layer is the hardware interface and the highest layer is theuserinterface Althoughlayeredsoftwaresystemshavehadsomesuc ,2.10.3 Tracing,2.10.4 BCC,2.11 Summary
90, O Hallaron 2015 provide an overview of computer systems includingtheroleofthelinkerandloader Atlidakisetal 2016 discuss POSIX system calls and how they relate to modern operating systems Levin 2013 coverstheinternalsofbothmac OSandiOS and Levin 2015 describesdetails oftheAndroidsystem Windows10internalsarecoveredin Russinovichetal 2017 BSD UNIX is described in McKusick et al 2015 Love 2010 and,2.10.4 BCC,2.11 Summary,Practice Exercises
91, O Hallaron 2015 provide an overview of computer systems includingtheroleofthelinkerandloader Atlidakisetal 2016 discuss POSIX system calls and how they relate to modern operating systems Levin 2013 coverstheinternalsofbothmac OSandiOS and Levin 2015 describesdetails oftheAndroidsystem Windows10internalsarecoveredin Russinovichetal 2017 BSD UNIX is described in McKusick et al 2015 Love 2010 and,2.11 Summary,Practice Exercises,Further Reading
92, K McKusick G V Neville Neil and R N M Wat son The Design and Implementation of the FreeBSD UNIX Operating System Second Edition Pearson 2015 Russinovich et al 2017 M Russinovich D A Solomon andA Ionescu Win dows Internals Part 1 SeventhEdition MicrosoftPress 2017 Ward 2015 B Ward How LINUX Works What Every Superuser Should Know SecondEdition NoStarchPress 2015 ,Practice Exercises,Further Reading,Bibliography
93,ng system has an assembler incor porated in the kernel To optimize system call performance the kernel assemblesroutineswithinkernelspacetominimizethepaththatthesys temcallmusttakethroughthekernel Thisapproachistheantithesisof the layeredapproach in which the path through the kernel is extended tomakebuildingtheoperatingsystemeasier Discusstheprosandcons of the Synthesis approach to kern el design and system performance optimization EX 3,Further Reading,Bibliography,Chapter 2 Exercises
94,d of interacting with the kernel thus allowing you towriteprogramsthatdirectlyinvokekernelfunctions Itisimportantforyou to keep in mind that you are indeedwriting kernel code that directlyinteracts with the kernel That normally means that any errors in the code could crash the system However since you will be using a virtual machine any failures willatworst only requirerebootingthe system P 1,Bibliography,Chapter 2 Exercises,Programming Problems
95,d of interacting with the kernel thus allowing you towriteprogramsthatdirectlyinvokekernelfunctions Itisimportantforyou to keep in mind that you are indeedwriting kernel code that directlyinteracts with the kernel That normally means that any errors in the code could crash the system However since you will be using a virtual machine any failures willatworst only requirerebootingthe system P 1,Chapter 2 Exercises,Programming Problems,Programming Projects
96, aspects of an operating system is how it schedules threads onto available processing cores Several choices for designing CPU schedulers are available to programmers ,PART TWO PROCESS MANAGEMENT,,
97,ions Describe and contrast interprocess communication using shared memory and message passing Design programs that use pipes and POSIX shared memory to perform interprocess communication Describe client server communication using sockets and remote proce dure calls Design kernel modules that interact with the Linux operating system 105,PART TWO PROCESS MANAGEMENT,Chapter 3 Processes,
98,he value of the program counterand the contents of the processor s registers The memory layout of a process is typicallydividedinto multiplesections and is shown inFigure 3 1 Thesesections include Text section the executablecode Data section global variables text 0max dataheapstack Figure 3 1 Layout of a process in memory ,PART TWO PROCESS MANAGEMENT,Chapter 3 Processes,3.1 Process Concept
99,he value of the program counterand the contents of the processor s registers The memory layout of a process is typicallydividedinto multiplesections and is shown inFigure 3 1 Thesesections include Text section the executablecode Data section global variables text 0max dataheapstack Figure 3 1 Layout of a process in memory ,,,
100,ativemachineinstructions onbehalfofthatcode For example to run the compiled Java program Program class w ew o u l d enter java Program The command javaruns the JVMas an ordinary process which in turns executes the Java program Program in the virtual machine The concept is the sameassimulation exceptthatthecode insteadofbeingwrittenforadifferent instructionset iswritteninthe Javalanguage 3 1 2 Process State Asaprocessexecutes itchanges state Thestateofaprocessisdefinedinpart bythecurrentactivityofthatprocess Aprocessmaybeinoneofthefollowing states ,,,
101, and so on Program counter Thecounterindicatestheaddressofthenextinstruction to be executedfor this process process state process number program counter memory limits list of open filesregisters Figure 3 3 Process control block PCB ,,,
102, needed to support threads Chapter 4 explores threads in detail 3 2 Process Scheduling Theobjectiveofmultiprogrammingistohavesomeprocessrunningatalltimes so as to maximize CPUutilization The objective of time sharing is to switch aCPUcore among processes so frequently that users can interact with each program while it is running To meet these objectives the process scheduler selectsanavailableprocess possiblyfromasetofseveralavailableprocesses for program executionon a core Each CPUcore can run one process at a time ,,,
103, needed to support threads Chapter 4 explores threads in detail 3 2 Process Scheduling Theobjectiveofmultiprogrammingistohavesomeprocessrunningatalltimes so as to maximize CPUutilization The objective of time sharing is to switch aCPUcore among processes so frequently that users can interact with each program while it is running To meet these objectives the process scheduler selectsanavailableprocess possiblyfromasetofseveralavailableprocesses for program executionon a core Each CPUcore can run one process at a time ,3.1.3 Process Control Block,3.1.4 Threads,3.2 Process Scheduling
104,am suchasthatinFigure3 5 Twotypesofqueuesarepresent thereadyqueueand a set of wait queues The circles representthe resources that serve the queues and the arrows indicate the flow of processesin the system Anew process is initially put in the ready queue It waits there until it is selectedforexecution or dispatched Once the processisallocateda CPUcore and isexecuting one ofseveraleventscould occur ,,,
105,mshaveanintermediateform of scheduling known asswapping whose key idea is that sometimes it can be advantageous to remove a process from memory and from active contention for the CPU and thus reduce the degree of multiprogramming Later the process can be reintroducedintomemory anditsexecutioncanbecontinuedwhereitleftoff This scheme is known as swapping because a process can be swapped out ,,,
106,e switching Switchingspeedvariesfrommachinetomachine dependingonthe process P0 process P1 save state into PCB0 save state into PCB1reload state from PCB1 reload state from PCB0operating system idle idleexecuting idleexecuting executinginterrupt or system call interrupt or system call Figure 3 6 Diagram showing context switch from process to process ,,,
107,igned pid 8416 Using the bashcommand line interface thisuserhascreatedtheprocess psaswellasthe vimeditor The sshdprocess is responsible for managing clients that connect to the system by using ssh which isshort for secure shell python pid 2808logind pid 8415systemd pid 1 bash pid 8416 ps pid 9298vim pid 9204sshd pid 3028 sshd pid 3610 tcsh pid 4005 Figure 3 7 A tree of processes on a typical Linux system ,3.2.2 CPU Scheduling,3.2.3 Context Switch,3.3 Operations on Processes
108,igned pid 8416 Using the bashcommand line interface thisuserhascreatedtheprocess psaswellasthe vimeditor The sshdprocess is responsible for managing clients that connect to the system by using ssh which isshort for secure shell python pid 2808logind pid 8415systemd pid 1 bash pid 8416 ps pid 9298vim pid 9204sshd pid 3028 sshd pid 3610 tcsh pid 4005 Figure 3 7 A tree of processes on a typical Linux system ,,,
109,a child to continue ifitsparentterminates Some systems do not allow a child to exist if its parent has terminated In such systems if a process terminates either normally or abnormally then all its children must also be terminated This phenomenon referred to as cascading termination is normallyinitiatedby the operatingsystem Toillustrateprocessexecutionandtermination considerthat inLinuxand UNIXsystems we can terminate a process by using the exit system call providinganexitstatusas aparameter exit with status 1 exit 1 ,,,
110,s we discussedinChapter2 Cooperating processes require an interprocess communication IPC mechanism that will allow them to exchange data that is send data to and receive data from each other There are two fundamental models of interprocess communication shared memory and message passing I nt h e shared memory model a region of memory that is shared by the cooperating processes is established Processes can then exchange information by reading and writing data to the shared region In the message passing model ,3.3.1 Process Creation,3.3.2 Process Termination,3.4 Interprocess Communication
111,ess s memory Sharedmemoryrequiresthattwoormoreprocessesagreetoremove this restriction They can then exchange information by reading and writing datain thesharedareas Theformofthedataandthelocationaredetermined by these processes and are not under the operating system s control The pro cesses are also responsible for ensuring that they are not writing to the same location simultaneously ,3.3.2 Process Termination,3.4 Interprocess Communication,3.5 IPC in Shared-Memory Systems
112,ia a message passing facility item next consumed while true while in out do nothing next consumed buffer out out out 1 BUFFER SIZE consume the item in next consumed Figure 3 13 The consumer process using shared memory ,3.4 Interprocess Communication,3.5 IPC in Shared-Memory Systems,3.6 IPC in Message-Passing Systems
113, name the recipient or sender of the communication In this scheme the send andreceive primitivesaredefinedas send P message Senda message toprocess P receive Q message Receivea message fromprocess Q Acommunication linkin this schemehas the following properties A link is established automatically between every pair of processes that want to communicate The processes need to know only each other s identityto communicate ,,,
114,s andasynchronous Throughoutthistext youwill encountertheconceptsofsynchronousandasynchronousbehaviorinrelation to variousoperating systemalgorithms Blocking send The sending process is blocked until the message is receivedby thereceivingprocessor by themailbox Nonblocking send The sending process sends the message and resumes operation Blocking receive The receiverblocks until amessageisavailable Nonblocking receive The receiver retrieves either a valid message or a null ,,,
115,e is placed in the queue either the message is copied or a pointer to the message is kept and the sender can continue execution without message next consumed while true receive next consumed consume the item in next consumed Figure 3 15 The consumer process using message passing ,,,
116,ate fd 4096 setsthesizeof theobject to 4 096 bytes Finally the mmap functionestablishesamemory mappedfilecontaining theshared memoryobject Italsoreturnsapointertothememory mappedfile that isused for accessing the shared memoryobject The programs shown in Figure 3 16 and Figure 3 17 use the producer consumermodelinimplementingsharedmemory Theproducerestablishesa shared memory object and writes to shared memory and the consumer reads from sharedmemory ,3.6.2 Synchronization,3.6.3 Buffering,3.7 Examples of IPC Systems
117,ate fd 4096 setsthesizeof theobject to 4 096 bytes Finally the mmap functionestablishesamemory mappedfilecontaining theshared memoryobject Italsoreturnsapointertothememory mappedfile that isused for accessing the shared memoryobject The programs shown in Figure 3 16 and Figure 3 17 use the producer consumermodelinimplementingsharedmemory Theproducerestablishesa shared memory object and writes to shared memory and the consumer reads from sharedmemory ,,,
118,ingmessagesthroughtheper threadportassociated with each thread When a task is created two special ports the Task Self port and the Notifyport are also created The kernel has receive rights to the Task Self port which allows a task to send messages to the kernel The kernel can send notification of event occurrences to a task s Notify port to which of course thetaskhas receiverights Themach port allocate function callcreatesanewportandallocates space for its queue of messages It also id entifies the rights for the port Each port right represents a namefor that port and a port can only be accessed via,,,
119,s Serverprocessespublishconnection portobjectsthatarevisibletoallpro cesses Whenaclientwantsservicesfromasubsystem itopensahandletothe server s connection port object and sends a connection request to that port The serverthen createsachannel and returnsahandle tothe client The chan nel consists of a pair of private communication ports one for client server messages the other for server client messages Additionally communication channels support a callback mechani sm that allows the client and server to accept requestswhen theywould normally be expectinga reply ,,,
120,han ALPCprocedurecall Additionally manykernel servicesuse ALPCto communicate with clientprocesses 3 7 4 Pipes Apipeacts as a conduit allowing two processes to communicate Pipes were one of the first IPCmechanisms in early UNIXsystems They typically pro vide one of the simpler ways for processes to communicate with one another althoughtheyalsohavesomelimitations Inimplementinga pipe fourissues mustbe considered ,,,
121,File functions 3 8 Communication in Client Server Systems In Section 3 4 we described how processes can communicate using shared memory and message passing These techniques can be used for communica tioninclient serversystems Section1 10 3 aswell Inthissection weexplore two other strategies for communication in client server systems sockets and,3.7.3 Windows,3.7.4 Pipes,3.8 Communication in Client‚ÄìServer Systems
122, listen to well known ports an SSHserver listens to port 22 an FTPserver listens to port 21 and a web or HTTP server listens to port 80 All ports below 1024 areconsidered well known and areusedtoimplementstandardservices When a client process initiates a request for a connection it is assigned a port by its host computer This port has some arbitrary number greater than 1024 For example if a client on host XwithIPaddress 146 86 5 20 wishes to establish a connection with a web server which is listening on port 80 at,,,
123,etweensystemswithnetworkconnections Itissimilarinmanyrespectstothe IPCmechanismdescribedinSection3 4 anditisusuallybuiltontopofsucha system Here however becauseweared ealingwithanenvironmentinwhich theprocessesareexecutingonseparatesystems wemustuseamessage based communication schemeto provideremoteservice ,,,
124, it changes state There are four general states of a process 1 ready 2 running 3 waiting and 4 terminated Aprocess control block PCB is the kerneldata structurethat representsa processinanoperating system Theroleoftheprocessscheduleristoselectanavailableprocesstorunon aCPU An operating system performs a context switch when it switches from running one processto running another ,3.8.1 Sockets,3.8.2 Remote Procedure Calls,3.9 Summary
125, explain what the output will be at LINE A 3 2Includingthe initialparentprocess howmanyprocessesarecreatedby the programshown in Figure 3 31 3 3Original versions of Apple s mobile i OSoperating system provided no meansofconcurrentprocessing Discussthreemajorcomplicationsthat concurrent processing addsto an operatingsystem 3 4Some computer systems provide multiple register sets Describe what happens when a context switch occurs if the new context is already,3.8.2 Remote Procedure Calls,3.9 Summary,Practice Exercises
126,forAndroiddevelopmentcanbefoundat https developer and roid com guide Bibliography Harold 2005 E R Harold Java Network Programming ThirdEdition O Reilly Associates 2005 Hart 2005 J M Hart Windows System Programming Third Edition Addison Wesley 2005 ,3.9 Summary,Practice Exercises,Further Reading
127,forAndroiddevelopmentcanbefoundat https developer and roid com guide Bibliography Harold 2005 E R Harold Java Network Programming ThirdEdition O Reilly Associates 2005 Hart 2005 J M Hart Windows System Programming Third Edition Addison Wesley 2005 ,Practice Exercises,Further Reading,Bibliography
128, once semantic Describepossibleusesforamechanismthathasneither of theseguarantees 3 16Using the program shown in Figure 3 35 explain what the output will be atlines XandY include stdio h include unistd h int main int i f o r i 0 i 4 i fork return 0 Figure 3 21 How many processes are created EX 4,Further Reading,Bibliography,Chapter 3 Exercises
129, the ending time The difference between the starting and ending timesrepresentstheelapsedtimetoexecutethecommand Theexample outputbelow reportstheamount of timetorun thecommand ls time ls time c time Elapsed time 0 25422 As the parent and child are separate processes they will need to arrange how the starting time will be shared between them You will writetwoversionsofthisprogram eachrepresentingadifferentmethod ofIPC P 8,Bibliography,Chapter 3 Exercises,Programming Problems
130,ve using the UNIX fork exec wait dup2 a n d pipe system calls and can be completed on any Linux UNIX o rm a c OS system I Overview A shell interface gives the user a prompt after which the next command is entered The example below illustrates the prompt osh and the user s next command cat prog c This command displays the file prog con the terminalusing the UNIX catcommand osh cat prog cP 12,Chapter 3 Exercises,Programming Problems,Programming Projects
131,i threaded processes Illustrate different approaches to implicit threading including thread pools fork join and Grand Central Dispatch Describe how the Windows and Linux operating systems represent threads Design multithreaded applications using the Pthreads Java and Windows threading APIs 159,Programming Projects,Chapter 4 Threads & Concurrency,
132, and a third thread for performingspellingand grammarchecking in the background thread multithreaded process single threaded process registers k kstack kfiles data code files data code threadPC registers registers stack stac stacregisters PC PC PC Figure 4 1 Single threaded and multithreaded processes ,Programming Projects,Chapter 4 Threads & Concurrency,4.1 Overview
133, and a third thread for performingspellingand grammarchecking in the background thread multithreaded process single threaded process registers k kstack kfiles data code files data code threadPC registers registers stack stac stacregisters PC PC PC Figure 4 1 Single threaded and multithreaded processes ,,,
134,chip where each core appears as a separate CPU to the operating system Section 1 3 2 We refer to such systems as multicore and multithreaded programming provides a mechanism for more efficient use of these multiple computing cores and improved concurrency Consider an application with four threads On a system with a single computing core concurrencymerelymeansthattheexecutionofthethreadswillbeinterleaved overtime Figure4 3 becausetheprocessingcoreiscapableofexecutingonly one thread at a time On a system with multiple cores however concurrency,,,
135,chip where each core appears as a separate CPU to the operating system Section 1 3 2 We refer to such systems as multicore and multithreaded programming provides a mechanism for more efficient use of these multiple computing cores and improved concurrency Consider an application with four threads On a system with a single computing core concurrencymerelymeansthattheexecutionofthethreadswillbeinterleaved overtime Figure4 3 becausetheprocessingcoreiscapableofexecutingonly one thread at a time On a system with multiple cores however concurrency,4.1.1 Motivation,4.1.2 Benefits,4.2 Multicore Programming
136, While identifying tasks that can run in parallel programmers must also ensure that the tasks perform equal work of equal value In some instances a certain task may not contribute as much value to the overallprocessasothertasks Usingaseparateexecutioncoretorunthat taskmay not be worth the cost core 2core 1 timeT 1T1T1 T2T2T2T3T3 T4T4 Figure 4 4 Parallel execution on a multicore system ,,,
137,eads each performing a unique statistical operation on the array of elements The threads again are operating in parallel on separate computing cores but each is performing a unique operation Fundamentally then data parallelism involves the distribution of data across multiple cores and task parallelism involves the distribution of tasks across multiple cores as shown in Figure 4 5 However data and task paral ,,,
138,nagementisdonebythethreadlibraryinuserspace soitisefficient wediscussthreadlibrariesinSection4 4 However theentire processwillblockifathreadmakesablockingsystemcall Also becauseonly user threads user space kernel threadskernel space Figure 4 7 Many to one model ,4.2.1 Programming Challenges,4.2.2 Types of Parallelism,4.3 Multithreading Models
139,nagementisdonebythethreadlibraryinuserspace soitisefficient wediscussthreadlibrariesinSection4 4 However theentire processwillblockifathreadmakesablockingsystemcall Also becauseonly user threads user space kernel threadskernel space Figure 4 7 Many to one model ,,,
140,The number of kernel threads may be specific to either a particular application or a particular machine an application may be allocated more kernel threads on a system with eight processingcoresthan asystemwith four cores user threads user space kernel threadskernel space Figure 4 9 Many to many model ,,,
141,The number of kernel threads may be specific to either a particular application or a particular machine an application may be allocated more kernel threads on a system with eight processingcoresthan asystemwith four cores user threads user space kernel threadskernel space Figure 4 9 Many to many model ,,,
142,ernel support All code and data structures for the library exist in user space This means that invoking a function in the library results in a local function call in userspaceand not a systemcall The second approach is to implement a kernel level library supported directly by the operating system In this case code and data structures for the library exist in kernel space Invoking a function in the APIfor the library typicallyresultsina systemcallto thekernel ,4.3.2 One-to-One Model,4.3.3 Many-to-Many Model,4.4 Thread Libraries
143,nce each thread hasfinisheditswork itterminatesandjoinswithitsparent Onlyafterallofthe children have joined can the parent resume execution Typically synchronous threading involves significant data sh aring among threads For example the parent thread may combine the results calculated by its various children All ofthe following examplesuse synchronous threading 4 4 1 Pthreads Pthreads referstothe POSIXstandard IEEE1003 1c defining an APIforthread creationandsynchronization Thisisa specification forthreadbehavior notan implementation Operating systemdesignersmayimplementthespecification,,,
144,ngly common A simple method for waiting on several threadsusing the pthread join function istoenclose theoperation within asimple forloop Forexample youcanjoinontenthreadsusingthePthread code shown in Figure4 12 4 4 2 Windows Threads ThetechniqueforcreatingthreadsusingtheWindowsthreadlibraryissimilar to the Pthreads technique in several wa ys We illustrate the Windows thread APIin the C program shown in Figure 4 13 Notice that we must include the windows h headerfile when usingthe Windows API ,,,
145, One approach is to create a new class that is derived from the Threadclass andtooverrideits run method Analternative andmorecommonlyused technique is to define a class that implements the Runnable interface This interface defines a single abstract method with the signature public void run T h ec o d ei nt h e run method of a class that implements Runnable iswhat executesina separatethread Anexampleisshown below class Task implements Runnable public void run System out println I am a thread ,,,
146,ing a largenumber ofthreads 4 5 Implicit Threading With the continued growth of multicore processing applications contain ing hundreds or even thousands of threads are looming on the horizon Designing such applications is not a trivial undertaking programmers must,4.4.2 Windows Threads,4.4.3 Java Threads,4.5 Implicit Threading
147,certainlysuperiortocreating aseparateprocess amultithreadedservernonethelesshaspotentialproblems The first issue concerns the amount of time required to create the thread together with the fact that the thread will be discarded once it has completed its work The second issue is more troublesome If we allow each concurrent request to be serviced in a new thread we have not placed a bound on the numberofthreadsconcurrentlyactiveinthesystem Unlimitedthreadscould exhaust system resources such as CPUtime or memory One solution to this problemis tousea thread pool ,,,
148,inmodelisasynchronousversionofthread pools in which a library determines the actual number of threads to create for example by usingthe heuristicsdescribedinSection4 5 1 4 5 2 1 Fork Join in Java Java introduced a fork join library in Version 1 7 of the APIthat is designed to be used with recursive divide and conquer algorithms such as Quicksort andMergesort Whenimplementingdivid e and conqueralgorithmsusingthis,,,
149,emory environments Open MPidentifies parallel regions as blocks of code thatmayruninparallel Applicationdevelopersinsertcompilerdirectivesinto their code at parallel regions and these directives instruct the Open MPrun ,,,
150,dintofourprimaryquality of service classes QOS CLASS USER INTERACTIVE The user interactive class represents tasks that interact with the user such as the user interface and event handling to ensure a responsive user interface Completing a task belonging to this classshould requireonly a smallamount ofwork QOS CLASS USER INITIATED The user initiated class is similar to the user interactive class in that tasks are associated with a responsive user interface however user initiated tasks may require longer processing,,,
151,and and system capacity GCDis implemented by the libdispatch library which Apple has released under the Apache Commons license Ithas sincebeenportedto the FreeBSDoperatingsystem 4 5 5 Intel Thread Building Blocks Intelthreadingbuildingblocks TBB isatemplatelibrarythatsupportsdesign ing parallel applications in C As this is a library it requires no special compiler or language support Developers specify tasks that can run in par ,,,
152, synchronous signals include illegal memory access and divi sionby0 Ifarunningprogramperformseitheroftheseactions asignalisgen erated Synchronous signals are deliveredto the same process that performed the operation that caused the signal that is the reason they are considered synchronous Whena signalisgeneratedby aneventexternaltoa running process that process receives the signal asynchronous ly Examples of such signals include terminating a process with specific keystrokes such as control C a n d,4.5.4 Grand Central Dispatch,4.5.5 Intel Thread Building Blocks,4.6 Threading Issues
153, synchronous signals include illegal memory access and divi sionby0 Ifarunningprogramperformseitheroftheseactions asignalisgen erated Synchronous signals are deliveredto the same process that performed the operation that caused the signal that is the reason they are considered synchronous Whena signalisgeneratedby aneventexternaltoa running process that process receives the signal asynchronous ly Examples of such signals include terminating a process with specific keystrokes such as control C a n d,,,
154, synchronous signals include illegal memory access and divi sionby0 Ifarunningprogramperformseitheroftheseactions asignalisgen erated Synchronous signals are deliveredto the same process that performed the operation that caused the signal that is the reason they are considered synchronous Whena signalisgeneratedby aneventexternaltoa running process that process receives the signal asynchronous ly Examples of such signals include terminating a process with specific keystrokes such as control C a n d,,,
155,read can performthischeck at a pointat which itcan be canceled safely In Pthreads thread cancellation is initiated using the pthread cancel function Theidentifierofthetargetthreadispassedasaparametertothefunc tion The following code illustratescreating and then canceling a thread pthread t tid create the thread pthread create tid 0 worker NULL cancel the thread pthread cancel tid wait for the thread to terminate pthread join tid NULL ,,,
156,rageattribute ThreadStatic to declare thread local data The gcccompiler provides the storage class keyword threadfor declaring TLSdata For example if we wished to assign a unique identifier for each thread we would declare it as follows static thread int threadID 4 6 5 Scheduler Activations Afinalissuetobeconsideredwithmultithreadedprogramsconcernscommu nication between the kernel and the thread library which may be required,,,
157,rageattribute ThreadStatic to declare thread local data The gcccompiler provides the storage class keyword threadfor declaring TLSdata For example if we wished to assign a unique identifier for each thread we would declare it as follows static thread int threadID 4 6 5 Scheduler Activations Afinalissuetobeconsideredwithmultithreadedprogramsconcernscommu nication between the kernel and the thread library which may be required,,,
158,nd private storage area are known as the contextof thethread Theprimarydata structuresof a threadinclude ETHREAD executivethreadblock KTHREAD kernel thread block TEB thread environmentblock The key components of the ETHREAD include a pointer to the process to which the thread belongs and the address of the routine in which the threadstartscontrol The ETHREAD alsocontainsapointertothecorresponding KTHREAD ,4.6.4 Thread-Local Storage,4.6.5 Scheduler Activations,4.7 Operating-System Examples
159,nd private storage area are known as the contextof thethread Theprimarydata structuresof a threadinclude ETHREAD executivethreadblock KTHREAD kernel thread block TEB thread environmentblock The key components of the ETHREAD include a pointer to the process to which the thread belongs and the address of the routine in which the threadstartscontrol The ETHREAD alsocontainsapointertothecorresponding KTHREAD ,,,
160,ntheparentandchildtasks Someofthese flags are listed in Figure 4 22 For example suppose that clone is passed the flags CLONE FS CLONE VM CLONE SIGHAND a n d CLONE FILES The parent and child tasks will then share the same file system information such as the currentworkingdirectory thesamememoryspace thesamesignalhandlers ,,,
161,nuxcontainertobecreated Containerswillbecovered morefullyinChapter18 4 8 Summary Athread represents a basic unit of CPUutilization and threads belonging to the same process share many of the process resources including code and data Therearefourprimarybenefitstomultithreadedapplications 1 respon siveness 2 resourcesharing 3 economy and 4 scalability Concurrency exists when multiple threads are making progress whereas parallelism exists when multiple threads are making progress simulta ,4.7.1 Windows Threads,4.7.2 Linux Threads,4.8 Summary
162,atingsystems Linuxdoesnotdistinguishbetween processes and threads instead it refers to each as a task The Linux clone system call can be used to create tasks that behave either more likeprocessesor morelikethreads Practice Exercises 4 1Providethreeprogrammingexamplesinwhichmultithreadingprovides betterperformancethan a single threadedsolution 4 2Using Amdahl s Law calculate the speedup gain of an application that hasa60percentparallelcomponentfor a twoprocessingcoresand b four processingcores ,4.7.2 Linux Threads,4.8 Summary,Practice Exercises
163, W Mauerer Professional Linux Kernel Architecture John Wiley and Sons 2008 McDougall and Mauro 2007 R McDougall and J Mauro Solaris Internals SecondEdition PrenticeHall 2007 Russinovich et al 2017 M Russinovich D A Solomon andA Ionescu Win dows Internals Part 1 SeventhEdition MicrosoftPress 2017 Vahalia 1996 U Vahalia Unix Internals The New Frontiers P r e n t i c eH a l l 1996 ,4.8 Summary,Practice Exercises,Further Reading
164, W Mauerer Professional Linux Kernel Architecture John Wiley and Sons 2008 McDougall and Mauro 2007 R McDougall and J Mauro Solaris Internals SecondEdition PrenticeHall 2007 Russinovich et al 2017 M Russinovich D A Solomon andA Ionescu Win dows Internals Part 1 SeventhEdition MicrosoftPress 2017 Vahalia 1996 U Vahalia Unix Internals The New Frontiers P r e n t i c eH a l l 1996 ,Practice Exercises,Further Reading,Bibliography
165,ethreadreadsfromthenetwork and another writestothe network Thefork joinarraysummationapp licationdescribedinSection4 5 2 The GrandCentralDispatchsystem 4 16A system with two dual core processors has four processors available for scheduling A CPU intensive application is running on this system All input is performed at program start up when a single file must beEX 8,Further Reading,Bibliography,Chapter 4 Exercises
166,d version of this algorithm that creates a separate thread to generate a number of random points The thread will count the number of points that occur within the circle and store that result in a global variable When this thre ad has exited the parent thread will calculateandoutputtheestimatedvalueof œÄ Itisworthexperimenting with the number of random points generated As a general rule the greaterthenumber of points the closertheapproximation to œÄ P 23,Bibliography,Chapter 4 Exercises,Programming Problems
167,cation t hat determines whether the solution to aSudokupuzzle isvalid There are several different ways of multithreading this application One suggestedstrategyis tocreatethreadsthat check thefollowing criteria Athread to check that each column contains the digits1 through 9 Athread to check that each row contains the digits1through 9P 25,Chapter 4 Exercises,Programming Problems,Programming Projects
168,ulticore scheduling Describe various real time scheduling algorithms Describe the scheduling algorithms used in the Windows Linux and Solaris operating systems Apply modeling and simulations to evaluate CPUscheduling algorithms Design a program that implements several different CPUscheduling algo rithms 199,Programming Projects,Chapter 5 CPU Scheduling,
169, operating systemdesign CPU burstload store add store read from file store increment index write to file load store add store read from filewait for I O wait for I O wait for I OI O burst I O burst I O burstCPU burst CPU burst Figure 5 1 Alternating sequence of CPU and I O bursts ,Programming Projects,Chapter 5 CPU Scheduling,5.1 Basic Concepts
170, a ready queuecan be implementedas a FIFOqueue a priorityqueue atree or simply anunorderedlinkedlist Conceptually however alltheprocessesintheready queue are lined up waiting for a chance to run on the CPU The records in the queuesaregenerallyprocess control blocks PCBs of theprocesses burst durationfrequency Figure 5 2 Histogram of CPU burst durations ,,,
171, a ready queuecan be implementedas a FIFOqueue a priorityqueue atree or simply anunorderedlinkedlist Conceptually however alltheprocessesintheready queue are lined up waiting for a chance to run on the CPU The records in the queuesaregenerallyprocess control blocks PCBs of theprocesses burst durationfrequency Figure 5 2 Histogram of CPU burst durations ,,,
172,sschemeensuresthatthekernelstructureissimple sincethekernelwillnotpreemptaprocesswhilethekerneldatastructuresare in an inconsistent state Unfortunatel y this kernel execution model is a poor oneforsupportingreal timecomputing wheretasksmustcompleteexecution within a given time frame In Section 5 6 we explore scheduling demands of real time systems A preemptive kernel requires mechanisms such as mutex lockstopreventraceconditionswhenaccessingsharedkerneldatastructures Most modern operating systems are now fully preemptive when running in kernelmode ,,,
173, the dispatch latency and is illustrated in Figure 5 3 An interesting question to consider is how often do context switches occur Onasystem widelevel thenumberofcontextswitchescanbeobtained byusingthe vmstatcommandthatisavailableonLinuxsystems Belowisthe output which has been trimmed fromthe command vmstat 1 3,,,
174,tion We want to keep the CPUas busy as possible Concep tually CPUutilization can range from 0 to 100 percent In a real system it should range from 40 percent for a lightly loaded system to 90 percent for a heavily loaded system CPUutilization can be obtained by using thetopcommand on Linux mac OS a n dUNIXsystems Throughput I ft h e CPUis busy executing processes then work is being done Onemeasureofworkisthenumberofprocessesthatarecompleted,5.1.3 Preemptive and Nonpreemptive Scheduling,5.1.4 Dispatcher,5.2 Scheduling Criteria
175, Our measure of comparison is the average waiting time Moreelaborateevaluationmechanisms arediscussedinSection5 8 5 3 Scheduling Algorithms CPUscheduling deals with the problem of deciding which of the processes in thereadyqueueistobeallocatedthe CPU score Therearemanydifferent CPU scheduling algorithms In this section we describe several of them Although most modern CPUarchitectures have multiple processing cores we describe these scheduling algorithms in the context of only one processing core avail able That is a single CPUthat has a single processing core thus the system is,5.1.4 Dispatcher,5.2 Scheduling Criteria,5.3 Scheduling Algorithms
176, In addition consider the performance of FCFSscheduling in a dynamic situation Assumewehaveone CPU bound processandmany I O bound pro cesses As the processes flow around the system the following scenario may result The CPU bound processwillgetand holdthe CPU Duringthistime all the other processes will finish their I Oand will move into the ready queue waiting for the CPU While the processes wait in the ready queue the I O,,,
177,g Gantt chart P3 P2 P4 P1 24 16 9 03 The waiting time is 3 milliseconds for process P1 16 milliseconds for process P2 9 milliseconds for process P3 and 0 milliseconds for process P4 T h u s t h e average waiting time is 3 16 9 0 4 7 milliseconds By comparison if we were using the FCFSscheduling scheme the average waiting time would be10 25 milliseconds TheSJFschedulingalgorithmisprovably optimal inthatitgivesthemini mumaveragewaitingtimeforagivensetofprocesses Movingashortprocess,,,
178,witchbetweenprocesses Asmall unit of time called a time quantum ortime slice is defined Atime quantum isgenerallyfrom10to100millisecondsinlength Thereadyqueueistreatedas a circular queue The CPUscheduler goes around the ready queue allocating theCPUto eachprocessfor atimeintervalof up to1 timequantum To implement RRscheduling we again treat the ready queue as a FIFO queue of processes New processes are added to the tail of the ready queue ,,,
179,large compared with the context switch time it should not be too large As we pointed out earlier if the time quantum is too large RRscheduling degenerates to an FCFSpolicy A rule of thumb is that 80 percent of the CPUbursts should be shorter than the time quantum 5 3 4 Priority Scheduling TheSJFalgorithmisaspecialcaseofthegeneral priority scheduling algorithm A priority is associated with each process and the CPUis allocated to the,,,
180,t priorityqueue theyareexecutedin round robinorder Inthemostgeneralizedformof thisapproach a priorityis assigned statically to each process and a process remains in the same queue for theduration of itsruntime T0T1T2T3T4 T5T6T7 T8T9T10T11 TxTyTzpriority 2 priority npriority 1priority 0 Figure 5 7 Separate queues for each priority ,,,
181,oved to the tailof queue1 If queue0 isempty the process atthe head of queue1 is givenaquantumof16milliseconds Ifitdoesnotcomplete itispreemptedand is put into queue 2 Processes in queue 2 are run on an FCFSbasis but are run onlywhenqueues0and1areempty Topreventstarvation aprocessthatwaits toolonginalower priorityqueuemaygraduallybemovedtoahigher priority queue quantum 8 quantum 16 FCFS Figure 5 9 Multilevel feedback queues ,,,
182,y to many Section 4 3 3 model s the thread library schedules user level threads to run on an available LWP This scheme is known as process contention scope PCS since competition for the CPUtakes place among threadsbelongingtothesameprocess When wesaythethreadlibrary sched ulesuser threads onto available LWPs we do not mean that the threads are actually running on aCPUas that further requires the operating system to schedule the LWP s kernel thread onto a physical CPUcore To decide which,5.3.5 Multilevel Queue Scheduling,5.3.6 Multilevel Feedback Queue Scheduling,5.4 Thread Scheduling
183,y to many Section 4 3 3 model s the thread library schedules user level threads to run on an available LWP This scheme is known as process contention scope PCS since competition for the CPUtakes place among threadsbelongingtothesameprocess When wesaythethreadlibrary sched ulesuser threads onto available LWPs we do not mean that the threads are actually running on aCPUas that further requires the operating system to schedule the LWP s kernel thread onto a physical CPUcore To decide which,,,
184, contains a pointer to an intvalue that is set to the current value of the contention scope If an error occurs each of these functions returnsa nonzero value In Figure 5 10 we illustrate a Pthread scheduling API T h ep r o gram first determines the existing contention scope and sets it to PTHREAD SCOPE SYSTEM It then creates five separate threads that will run using the SCSscheduling policy Note that on some systems only certain contention scope values are allowed For example Linux and mac OSsystems allow only PTHREAD SCOPE SYSTEM ,,,
185,n Note that this provides two possible strategies for organizing the threadseligibleto bescheduled 1 Allthreadsmaybe inacommon readyqueue 2 Each processor mayhaveits own privatequeueof threads These two strategies are contrasted in Figure 5 11 If we select the first option we have a possible race condition on the shared ready queue and therefore must ensure that two separate processors do not choose to schedule the same thread and that threads are not lost from the queue As discussed in,5.4.1 Contention Scope,5.4.2 Pthread Scheduling,5.5 Multi-Processor Scheduling
186,n Note that this provides two possible strategies for organizing the threadseligibleto bescheduled 1 Allthreadsmaybe inacommon readyqueue 2 Each processor mayhaveits own privatequeueof threads These two strategies are contrasted in Figure 5 11 If we select the first option we have a possible race condition on the shared ready queue and therefore must ensure that two separate processors do not choose to schedule the same thread and that threads are not lost from the queue As discussed in,,,
187,hen a processor accessesmemory itspendsasignificantamountoftimewaitingforthedatato become available This situation known as a memory stall occurs primarily becausemodernprocessorsoperateatmuchfasterspeedsthanmemory How ever a memory stall can also occur because of a cache miss accessing data that are not in cache memory Figure 5 12 illustrates a memory stall In this scenario the processor can spend up to 50 percent of its time waiting for data tobecome available frommemory ,,,
188, push migration and pull migration With push migration a specific task periodically checks the load on each processor and if it finds an imbalance evenly distributes the load by moving or pushing threads from overloaded to idle or less busy processors Pull migration occurs when an idleprocessorpulls a waiting task fromabusyprocessor Pushandpullmigrationneednotbemutuallyexclusive and are in fact often implemented in pa rallel on load balancing systems For,,,
189,finity butitalsoprovidesthe sched setaffinity system call whichsupportshardaffinitybyallowingathreadtospecifythesetof CPUs on which itiseligibleto run The main memory architecture of a system can affect processor affinity issues as well Figure 5 16 illustrates an architecture featuring non uniform memoryaccess NUMA wheretherearetwophysicalprocessorchipseachwith their own CPUand local memory Although a system interconnect allows all CPUsi naNUMAsystem to share one physical address space a CPUhas faster accesstoitslocalmemorythantomemorylocaltoanother CPU Iftheoperating system s CPUscheduler and memory placement algorithms are NUMA aware,,,
190,metric multiprocessing as described in Section 5 5 1 as both systemandusertaskscanrunonanycore Rather theintentionbehind HMPis tobettermanagepowerconsumptionbyassigningtaskstocertaincoresbased upon the specificdemandsof the task ForARMprocessors that support it this type of architecture is known asbig LITTLEwhere higher peformance bigcores are combined with energy efficient LITTLEcores Bigcores consume greater energy and therefore should,,,
191, as when a timer expires or in hardware as when a remote controlled vehicle detects that it is approaching an obstruction When an event occurs the system must respond to and service it as quickly as possible We refer to event latency astheamountoftimethatelapsesfromwhenaneventoccursto whenitisserviced Figure5 17 t1 t0event latencyevent E first occurs real time system responds to E Time Figure 5 17 Event latency ,5.5.4 Processor Affinity,5.5.5 Heterogeneous Multiprocessing,5.6 Real-Time CPU Scheduling
192, as when a timer expires or in hardware as when a remote controlled vehicle detects that it is approaching an obstruction When an event occurs the system must respond to and service it as quickly as possible We refer to event latency astheamountoftimethatelapsesfromwhenaneventoccursto whenitisserviced Figure5 17 t1 t0event latencyevent E first occurs real time system responds to E Time Figure 5 17 Event latency ,,,
193,difa higher priorityprocessbecomesavailableto run Preemptive priority basedschedulingalgorithmsarediscussedindetailin Section 5 3 4 and Section 5 7 presents examples of the soft real time schedul ing features of the Linux Windows and Solaris operating systems Each of these systems assigns real time processe s the highest scheduling priority For,,,
194,ocess is run ning and a higher priority process becomes available to run it will preempt the lower priority process Upon entering the system each periodic task is assigned a priority inversely based on i ts period The shorter the period the higher the priority the longer the period the lower the priority The rationale behind this policy is to assign a higher priority to tasks that require the CPU moreoften Furthermore rate monotonicschedulingassumesthattheprocess ,,,
195,scheduling where priorities are fixed To illustrate EDFscheduling we again schedule the processes shown in Figure5 23 whichfailedtomeetdeadlinerequirementsunderrate monotonic scheduling Recall that P1has values of p1 50 and t1 25 and that P2has values of p2 80 and t2 35 The EDFscheduling of these processes is shown inFigure5 24 Process P1hastheearliestdeadline soitsinitialpriorityishigher than that of process P2 P r o c e s s P2begins running at the end of the CPUburst forP1 However whereas rate monotonic scheduling allows P1to preempt P2,,,
196,rol policy will admit a client requesting a particular number of shares only if sufficient shares are available In our c u r r e n te x a m p l e w eh a v ea l l o c a t e d5 0 15 20 85 shares of the total of 100 shares If a new process Drequested 30 shares the admission controller would deny Dentry intothe system 5 6 6 POSIX Real Time Scheduling ThePOSIXstandard also provides extensions for real time computing POSIX 1b Here wecoversomeofthe POSIX API relatedtoschedulingreal time threads POSIXdefinestwo schedulingclassesfor real timethreads ,,,
197,rol policy will admit a client requesting a particular number of shares only if sufficient shares are available In our c u r r e n te x a m p l e w eh a v ea l l o c a t e d5 0 15 20 85 shares of the total of 100 shares If a new process Drequested 30 shares the admission controller would deny Dentry intothe system 5 6 6 POSIX Real Time Scheduling ThePOSIXstandard also provides extensions for real time computing POSIX 1b Here wecoversomeofthe POSIX API relatedtoschedulingreal time threads POSIXdefinestwo schedulingclassesfor real timethreads ,,,
198, ran a variation of the traditional UNIXscheduling algorithm However as this algorithm was not designed with SMPsystems in mind it did not adequately support systems with multiple processors In addition it resultedinpoorperformanceforsystemswithalargenumberofrunnablepro cesses WithVersion2 5ofthekernel theschedulerwasoverhauledtoinclude a scheduling algorithm known as O 1 that ran in constant time regard less of the number of tasks in the system The O 1 scheduler also provided,5.6.5 Proportional Share Scheduling,5.6.6 POSIX Real-Time Scheduling,5.7 Operating-System Examples
199, ran a variation of the traditional UNIXscheduling algorithm However as this algorithm was not designed with SMPsystems in mind it did not adequately support systems with multiple processors In addition it resultedinpoorperformanceforsystemswithalargenumberofrunnablepro cesses WithVersion2 5ofthekernel theschedulerwasoverhauledtoinclude a scheduling algorithm known as O 1 that ran in constant time regard less of the number of tasks in the system The O 1 scheduler also provided,,,
200,ws APIidentifies the following six priorityclassesto which a processcan belong IDLE PRIORITY CLASS BELOW NORMAL PRIORITY CLASS NORMAL PRIORITY CLASS ABOVE NORMAL PRIORITY CLASS HIGH PRIORITY CLASS REALTIME PRIORITY CLASS Processes are typically members of the NORMAL PRIORITY CLASS Ap r o c e s s belongs to this class unless the parent of the process was a member of the IDLE PRIORITY CLASSor unless another class was specified when the process was created Additionally the priority class of a process can be altered with,,,
201,s to one of sixclasses 1 Time sharing TS 2 Interactive IA 3 Real time RT 4 System SYS 5 Fair share FSS 6 Fixedpriority FP Within each class there are different priorities and different scheduling algo rithms The default scheduling class for a proc ess is time sharing The scheduling policyforthetime sharingclassdynami callyaltersprioritiesandassignstime slices of different lengths using a multilevelfeedback queue By default there is an inverse relationship between prio rities and time slices The higher the,,,
202,we saw in Section 5 3 there are many scheduling algorithms each with its own parameters Asa result selectingan algorithmcan bedifficult The first problem is defining the criteria to be used in selecting an algo rithm As we saw in Section 5 2 criteria are often defined in terms of CPU utilization response time or throughput To select an algorithm we must firstdefinetherelativeimportanceoftheseelements Ourcriteriamayinclude severalmeasures suchas these Maximizing CPUutilization under the constraint that the maximum responsetimeis300 milliseconds,5.7.2 Example: Windows Scheduling,5.7.3 Example: Solaris Scheduling,5.8 Algorithm Evaluation
203,fines the performance of each algorithm for that workload For example assume that we have the workload shown below All five processes arrive at time 0 in the order given with the length ofthe CPUburst giveninmilliseconds ,,,
204,be useful in comparing scheduling algorithms but it also has limitations At the moment the classes of algorithms and distribu tions that can be handled are fairly limited The mathematics of complicated algorithms and distributions can be difficult to work with Thus arrival and servicedistributionsareoftendefinedinmathematicallytractable but unre alistic ways It is also generally necessary to make a number of indepen dentassumptions which may not be accurate As a resultof these difficulties queueingmodelsareoftenonlyapproximationsofrealsystems andtheaccu racy ofthe computedresultsmay bequestionable ,,,
205,ten requiring many hours of computer time A more detailed simulation provides more accurate results but it also actual process executionperformance statistics for FCFSsimulation FCFS performance statistics for SJF performance statistics for RR q 14 trace tapesimulation SJF simulation RR q 14 CPU 10 I O 213 CPU 12 I O 112 CPU 2 I O 147 CPU 173 Figure 5 31 Evaluation of CPU schedulers by simulation ,,,
206,dsdifferentfrom thoseofawebserverorfileserver Someoperatingsystems particularlysev eral versions of UNIX allow the system manager to fine tune the scheduling parameters for a particular system configuration For example Solaris pro vides the dispadmin command to allow the system administrator to modify theparametersof thescheduling classesdescribedinSection5 7 3 Another approach is to use APIs that can modify the priority of a process or thread The Java POSIX and Windows APIs provide such functions The downfall of this approach is that performance tuning a system or application mostoftendoesnotresultinimprovedperformanceinmoregeneralsituations ,,,
207,ppears to be a logicalCPU Load balancing on multicore systems equalizes loads between CPUcores althoughmigratingthreadsbetweencorestobalanceloadsmayinvalidate cache contents and therefore mayincrease memoryaccess times Soft real time scheduling gives priority to real time tasks over non real timetasks Hardreal timeschedulingp rovidestimingguaranteesforreal timetasks Rate monotonic real time schedu ling schedules periodic tasks using a staticprioritypolicywithpreemption ,5.8.3 Simulations,5.8.4 Implementation,5.9 Summary
208,1 0 0 8 P2 0 4 4 P3 1 0 1 a What is the average turnaround time for these processes with the FCFSscheduling algorithm b What is the average turnaround time for these processes with the SJFscheduling algorithm c The SJFalgorithmissupposedtoimproveperformance butnotice thatwechosetorunprocess P1attime0becausewedidnotknow that two shorter processes would arrive soon Compute what the,5.8.4 Implementation,5.9 Summary,Practice Exercises
209,Volume 25 Number2 2005 pages10 20 Russinovich et al 2017 M Russinovich D A Solomon andA Ionescu Win dows Internals Part 1 SeventhEdition MicrosoftPress 2017 Siddha et al 2007 S Siddha V Pallipadi and A Mallick Process Schedul ing Challenges in the Era of Multi Core Processors Intel Technology Journal Volume11 Number4 2007 ,5.9 Summary,Practice Exercises,Further Reading
210,Volume 25 Number2 2005 pages10 20 Russinovich et al 2017 M Russinovich D A Solomon andA Ionescu Win dows Internals Part 1 SeventhEdition MicrosoftPress 2017 Siddha et al 2007 S Siddha V Pallipadi and A Mallick Process Schedul ing Challenges in the Era of Multi Core Processors Intel Technology Journal Volume11 Number4 2007 ,Practice Exercises,Further Reading,Bibliography
211, CPUand usesits entiretime quantum does not block for I O 10 milliseconds is added to its time quantum and its priority level is boosted The time quantum for a process can be increased to a maximum of 100 milliseconds When a processblocksbeforeusingitsentiretimequantum itstimequantumis reducedby5milliseconds butitspriorityremainsthesame Whattype of process CPU bound or I O bound does the regressive round robin schedulerfavor Explain EX 12,Further Reading,Bibliography,Chapter 5 Exercises
212,lgorithms do not have to support higher priority processes preempting processes with lowerpriorities Inaddition tasksdonothavetobeplacedintoaqueueorlist inany particularorder There are a few different strategies for organizing the list of tasks as first presented in Section 5 1 2 One approach is to place all tasks in a single unorderedlist wherethestrategyfortaskselectiondependsontheschedulingP 29,Bibliography,Chapter 5 Exercises,Programming Projects
213,conditions These tools must be used carefully as their incorrect use can result in poor system performance including deadlock ,PART THREE PROCESS SYNCHRONIZATION,,
214,ute instructions of another process Additionally Section 4 2 introduced parallel execution in which two instruction streams representing different processes execute simultaneously on separate processing cores In this chap ter we explain how concurrent or parallel execution can contribute to issues involvingthe integrityof datasharedby severalprocesses 257,PART THREE PROCESS SYNCHRONIZATION,Chapter 6 Synchronization Tools,
215,ute instructions of another process Additionally Section 4 2 introduced parallel execution in which two instruction streams representing different processes execute simultaneously on separate processing cores In this chap ter we explain how concurrent or parallel execution can contribute to issues involvingthe integrityof datasharedby severalprocesses 257,PART THREE PROCESS SYNCHRONIZATION,Chapter 6 Synchronization Tools,6.1 Background
216,ion and some pro cesses wish to enter their critical sec tions then only those processes that are not executing in their remainder s ections can participate in decid ing which will enter its critical section next and this selection cannot be postponed indefinitely while true entry section critical section exit section remainder section Figure 6 1 General structure of a typical process ,Chapter 6 Synchronization Tools,6.1 Background,6.2 The Critical-Section Problem
217,e solution because it providesa good algorithmic description of solving the critical section problem and illus trates some of the complexities involvedin designing software that addresses therequirementsof mutualexclusion progress and boundedwaiting Peterson s solution is restricted to two processes that alternate execution betweentheircriticalsectionsandremaindersections Theprocessesarenum bered P0andP1 Forconvenience whenpresenting Pi weuse Pjtodenotethe other process that is jequals1 i Peterson s solutionrequiresthetwo processestoshare two dataitems int turn boolean flag 2 ,6.1 Background,6.2 The Critical-Section Problem,6.3 Peterson‚Äôs Solution
218,essors 2 Weakly ordered where modifications to memory on one processor may not beimmediatelyvisibletoother processors Memorymodelsvarybyprocessortype sokerneldeveloperscannotmake any assumptions regarding the visibility of modifications to memory on a shared memory multiprocessor To address this issue computer architectures provideinstructionsthatcan forceanychangesinmemorytobepropagatedto allotherprocessors therebyensuringthatmemorymodificationsarevisibleto,6.2 The Critical-Section Problem,6.3 Peterson‚Äôs Solution,6.4 Hardware Support for Synchronization
219,essors 2 Weakly ordered where modifications to memory on one processor may not beimmediatelyvisibletoother processors Memorymodelsvarybyprocessortype sokerneldeveloperscannotmake any assumptions regarding the visibility of modifications to memory on a shared memory multiprocessor To address this issue computer architectures provideinstructionsthatcan forceanychangesinmemorytobepropagatedto allotherprocessors therebyensuringthatmemorymodificationsarevisibleto,,,
220,the critical section problem in a relatively simplemanner Ratherthandiscussingonespecificinstructionforonespecific machine we abstract the main concepts behind these types of instructions by describingthe test and set andcompare and swap instructions boolean test and set boolean target boolean rv target target true return rv Figure 6 5 The definition of the atomic test and set instruction ,,,
221,ion problem One such tool is an atomic variable whichprovidesatomicoperationsonbasicdatatypessuchasintegers andbooleans WeknowfromSection6 1thatincrementingordecrementingan integer value may produce a race condition Atomic variables can be used in to ensure mutual exclusion in situations where there may be a data race on a singlevariablewhile itisbeing updated as whena counter isincremented Most systems that support atomic variables provide special atomic data types as well as functions for accessing and manipulating atomic variables ,,,
222,lock before entering a critical section it releases the lock when it exitsthe critical section The acquire function acquires the lock andthe release functionreleasesthelock asillustratedinFigure6 10 Amutex lock has a boolean variable available whose value indicates if thelockisavailableornot Ifthelockisavailable acallto acquire succeeds andthelockisthenconsideredunavaila ble Aprocessthatattemptstoacquire an unavailable lockis blockeduntil thelock isreleased ,6.4.2 Hardware Instructions,6.4.3 Atomic Variables,6.5 Mutex Locks
223,locks aswementionedearlier aregenerallyconsideredthesimplestof synchronization tools In this section we examine a more robust tool that can behavesimilarlytoamutexlockbutcanalsoprovidemoresophisticatedways for processesto synchronize theiractivities Asemaphore Sis an integer variable that apart from initialization is accessedonlythroughtwostandardatomicoperations wait andsignal Semaphores were introduced by the Dutch computer scientist Edsger Dijk stra and such the wait operationwas originally termed P from the Dutch,6.4.3 Atomic Variables,6.5 Mutex Locks,6.6 Semaphores
224,block untilthe count becomes greaterthan 0 We can also use semaphores to solve various synchronization problems Forexample considertwoconcurrentlyrunningprocesses P1withastatement S1andP2withastatement S2 Supposewerequirethat S2beexecutedonlyafter S1has completed We can implement this scheme readily by letting P1and P2 shareacommonsemaphore synch initializedto0 Inprocess P1 weinsertthe statements S1 signal synch ,,,
225,n integer valueand a list of processes list W h e n a process must wait on a semaphore it is added to the list of processes A signal operation removes one process from the list of waiting processes and awakens that process Now the wait sema ph o r eo pera tio nc a nb edefi n eda s wait semaphore S S value if S value 0 addthis processto S list sleep ,,,
226,ection wait mutex In this situation several processes may be executing in their critical sec tions simultaneously violating the mutual exclusion requirement This errormaybediscoveredonlyifseveralprocessesaresimultaneouslyactive in theircritical sections Note that th is situation may not always be repro ducible Supposethataprogramreplaces signal mutex with wait mutex That is itexecutes wait mutex critical section wait mutex ,6.6.1 Semaphore Usage,6.6.2 Semaphore Implementation,6.7 Monitors
227,les whose values define the state of an monitor monitor name shared variable declarations function P1 function P2 function Pn initialization code Figure 6 11 Pseudocode syntax of a monitor ,,,
228, x count Theoperation x signal can beimplementedas if x count 0 next count signal x sem wait next next count This implementation is applicable to the definitions of monitors given by both Hoare and Brinch Hansen see the bibliographical notes at the end of the chapter In some cases however the generality of the implementation is,,,
229,iderthe ResourceAllocator mon itor shown in Figure 6 14 which controls the allocation of a single resource among competing processes Each process when requesting an allocation of thisresource specifiesthemaximumtimeitplanstousetheresource Themon itor allocates the resource to the process that has the shortest time allocation,,,
230,l P0executes signal S S i n c et h e s e signal operations cannot be executed P0and P1aredeadlocked We say that a set of processes is in a deadlocked state when every process in the set is waiting for an event that can be caused only by another process in the set The events withwhichwearemainlyconcerned herearetheacquisition and release of resources such as mutex locks and semaphores Other types of events may result in deadlocks as we show in more detail in Chapter 8 In,6.7.2 Implementing a Monitor Using Semaphores,6.7.3 Resuming Processes within a Monitor,6.8 Liveness
231,l P0executes signal S S i n c et h e s e signal operations cannot be executed P0and P1aredeadlocked We say that a set of processes is in a deadlocked state when every process in the set is waiting for an event that can be caused only by another process in the set The events withwhichwearemainlyconcerned herearetheacquisition and release of resources such as mutex locks and semaphores Other types of events may result in deadlocks as we show in more detail in Chapter 8 In,,,
232,to use which tool however can be a daunting challenge In this section we present some simple strategies for dete rmining when to use specific synchro nization tools The hardware solutions outlined in Section 6 4 are considered very low levelandaretypicallyusedasthefoundationsforconstructingothersynchro nization tools such as mutex locks However there has been a recent focus on using the CASinstruction to construct lock free algorithms that provide protection from race conditions without requiring the overhead of locking Althoughtheselock freesolutionsare gainingpopularityduetolowoverhead,,,
233,to use which tool however can be a daunting challenge In this section we present some simple strategies for dete rmining when to use specific synchro nization tools The hardware solutions outlined in Section 6 4 are considered very low levelandaretypicallyusedasthefoundationsforconstructingothersynchro nization tools such as mutex locks However there has been a recent focus on using the CASinstruction to construct lock free algorithms that provide protection from race conditions without requiring the overhead of locking Althoughtheselock freesolutionsare gainingpopularityduetolowoverhead,6.8.1 Deadlock,6.8.2 Priority Inversion,6.9 Evaluation
234,Is In the next chapter we examine how various operating systems and APIs availableto developersimplementthesynchronization toolspresentedinthis chapter 6 10 Summary Arace condition occurs when processes have concurrent access to shared data and the final result depends on the particular order in which con current accesses occur Race conditions can result in corrupted values of shareddata Acritical section is a section of code where shared data may be manipu latedandapossibleraceconditionmayoccur Thecritical sectionproblem,6.8.2 Priority Inversion,6.9 Evaluation,6.10 Summary
235,affect the system s clock Explain why this can occur and how such effectscan beminimized 6 2What is the meaning of the term busy waiting What other kinds of waiting arethereinan operatingsystem Can busy waiting be avoided altogether Explainyour answer 6 3Explainwhyspinlocksarenotappropriateforsingle processorsystems yetareoftenusedinmultiprocessorsystems 6 4Show that if the wait andsignal semaphore operations are not executedatomically thenmutualexclusionmay beviolated ,6.9 Evaluation,6.10 Summary,Practice Exercises
236,ven theNetherlands 1965 Herlihy and Shavit 2012 M Herlihy and N Shavit The Art of Multiprocessor Programming Revised First Edition MorganK aufmannPublishers Inc 2012 Hoare 1974 C A R Hoare Monitors An Operating System Structuring Concept Communications of the ACM Volume 17 Number 10 1974 pages 549 557 Mckenney 2010 P E Mckenney Memory Barriers a Hardware View for Software Hackers 2010 ,6.10 Summary,Practice Exercises,Further Reading
237,ven theNetherlands 1965 Herlihy and Shavit 2012 M Herlihy and N Shavit The Art of Multiprocessor Programming Revised First Edition MorganK aufmannPublishers Inc 2012 Hoare 1974 C A R Hoare Monitors An Operating System Structuring Concept Communications of the ACM Volume 17 Number 10 1974 pages 549 557 Mckenney 2010 P E Mckenney Memory Barriers a Hardware View for Software Hackers 2010 ,Practice Exercises,Further Reading,Bibliography
238, top else ERROR pop if is empty top return stack top else ERROR is empty if top 0 return true else return false Figure 6 16 Array based stack for Exercise 6 12 EX 17,Further Reading,Bibliography,Chapter 6 Exercises
239,s to return a number of resources it calls the increase count function increase available resources by count int increase count int count available resources count return 0 The preceding program segment produces a race condition Do the fol lowing a Identifythedatainvolvedintherace condition P 32,Bibliography,Chapter 6 Exercises,Programming Problems
240,ssic Problems of Synchronization Inthissection wepresentanumberofsynchronizationproblemsasexamples of a large class of concurrency control problems These problems are used for testingnearlyeverynewlyproposedsynchronizationscheme Inoursolutions to the problems we use semaphores for synchronization since that is the 289,Programming Problems,Chapter 7 Synchronization Examples,
241,ssic Problems of Synchronization Inthissection wepresentanumberofsynchronizationproblemsasexamples of a large class of concurrency control problems These problems are used for testingnearlyeverynewlyproposedsynchronizationscheme Inoursolutions to the problems we use semaphores for synchronization since that is the 289,Programming Problems,Chapter 7 Synchronization Examples,7.1 Classic Problems of Synchronization
242,e producer producing full buffers for the consumer or as the consumer producing empty buffersfor the producer 7 1 2 The Readers Writers Problem Suppose that a database is to be shared among several concurrent processes Some of these processes may want only to read the database whereas others may want to update that is read and write the database We distinguish,,,
243,e producer producing full buffers for the consumer or as the consumer producing empty buffersfor the producer 7 1 2 The Readers Writers Problem Suppose that a database is to be shared among several concurrent processes Some of these processes may want only to read the database whereas others may want to update that is read and write the database We distinguish,,,
244,inishedeating sheputsdownbothchopsticksandstartsthinkingagain The dining philosophers problem isconsideredaclassicsynchronization problem neither because of its practical importance nor because computer scientists dislike philosophers but because it is an example of a large class of concurrency control problems It is a simple representation of the need RICE Figure 7 5 The situation of the dining philosophers ,,,
245,ccur As we alreadynoted however it is possible for a philosopher to starve to death We do not present asolutionto thisproblembut ratherleaveitasan exercisefor you 7 2 Synchronization within the Kernel We next describe the synchronization mechanisms provided by the Windows and Linux operating systems These two operating systems provide good examplesof differentapproachesto synchronizing the kernel and as you will,7.1.2 The Readers‚ÄìWriters Problem,7.1.3 The Dining-Philosophers Problem,7.2 Synchronization within the Kernel
246,ultiprocessor system Windows protects access to global resources using spinlocks although th e kernel uses spinlocks only to protect shortcodesegments Furthermore forreasonsofefficiency thekernelensures that a threadwillneverbe preemptedwhile holding aspinlock ,,,
247,ckinginthekernel On SMPmachines thefun damental locking mechanism is a spinl ock and the kernel is designed so that the spinlock is held only for short durations On single processor machines such as embedded systems with only a single processing core spinlocks are inappropriate for use and are replaced by enabling and disabling kernel pre emption Thatis onsystemswithasingleprocessingcore ratherthanholding aspinlock thekerneldisableskernelpreemption andratherthanreleasingthe spinlock it enableskernelpreemption This issummarizedbelow ,,,
248,ks represent the fundamental synchronization technique used with Pthreads A mutex lock is used to protect critical sections of code that is a thread acquires the lock before entering a critical section and releases it upon exiting the critical section Pthreads uses the pthread mutex tdata type for mutex locks A mutex is created with the pthread mutex init function The first parameter is a pointer to the mutex By passing NULLas a second parameter we initialize the mutex to its default attributes This is illustrated below ,7.2.1 Synchronization in Windows,7.2.2 Synchronization in Linux,7.3 POSIX Synchronization
249,ks represent the fundamental synchronization technique used with Pthreads A mutex lock is used to protect critical sections of code that is a thread acquires the lock before entering a critical section and releases it upon exiting the critical section Pthreads uses the pthread mutex tdata type for mutex locks A mutex is created with the pthread mutex init function The first parameter is a pointer to the mutex By passing NULLas a second parameter we initialize the mutex to its default attributes This is illustrated below ,,,
250,hisinstance wearenamingthesemaphore SEM The O CREATflagindicates thatthesemaphorewillbecreatedifitdoesnotalreadyexist Additionally the semaphore has read and write access for other processes via the parameter 0666 and isinitializedto 1 The advantage of named semaphores is that multiple unrelated processes can easily use a common semaphore as a synchronization mechanism by,,,
251,ead cond wait passing the mutex lock and the condition variable as parameters Calling pthread cond wait releases themutexlock therebyallowinganotherthreadtoaccesstheshareddataand possibly update its value so that the condition clause evaluates to true To protect against program errors it is im portant to place the conditional clause within a loop sothat the condition is recheckedafterbeingsignaled ,,,
252,an object instance of BoundedBuffer If the lock is already owned by another thread thethreadcallingthe synchronized methodblocksandisplacedinthe entry setfor the object s lock The entry set represents the set of threads waiting for the lock to become available If the lock is available when a synchronized methodiscalled thecallingthreadbec omestheowneroftheobject slockand can enter the method The lock is released when the thread exits the method If the entry set for the lock is not empty when the lock is released the JVM,7.3.2 POSIX Semaphores,7.3.3 POSIX Condition Variables,7.4 Synchronization in Java
253,an object instance of BoundedBuffer If the lock is already owned by another thread thethreadcallingthe synchronized methodblocksandisplacedinthe entry setfor the object s lock The entry set represents the set of threads waiting for the lock to become available If the lock is available when a synchronized methodiscalled thecallingthreadbec omestheowneroftheobject slockand can enter the method The lock is released when the thread exits the method If the entry set for the lock is not empty when the lock is released the JVM,,,
254,psthesimplestlockingmechanismavailableinthe APIisthe Reentrant Lock In many ways a ReentrantLock acts like the synchronized statement describedinSection7 4 1 a ReentrantLock isownedbyasinglethreadandis used to provide mutually exclusive access to a shared resource However the ReentrantLock providesseveraladditionalfeatures suchassettinga fairness parameter whichfavorsgrantingthelock tothelongest waitingthread Recall,,,
255,tallows multipleconcurrent readersbutonly one writer 7 4 3 Semaphores The Java APIalso provides a counting semaphore as described in Section 6 6 The constructor for the semaphore appearsas Semaphore int value where valuespecifies the initial value of the semaphore a negative value is allowed The acquire method throws an InterruptedException if the acquiring thread is interrupted The following example illustrates using a semaphore formutual exclusion ,,,
256, Condition variables remedy this by allowing aspecific thread to be notified We illustrate with the following example Suppose we have five threads numbered 0 through 4 and a shared variable turnindicating which thread s turn it is When a thread wishes to do work it calls the doWork method in Figure 7 13 passing its thread number Only the thread whose value of threadNumber matchesthevalueof turncanproceed otherthreadsmustwait theirturn ,,,
257,hanisms such as mutex locks and semaphores involves many potential problems including deadlock Additionally as the number of threads increases traditional locking doesn t scaleaswell becausethelevelofcontentionamongthreadsforlockownership becomesveryhigh As an alternative to traditional locking methods new features that take advantageoftransactionalmemorycanbeaddedtoaprogramminglanguage Inourexample supposewe addthe construct atomic S which ensuresthat,7.4.3 Semaphores,7.4.4 Condition Variables,7.5 Alternative Approaches
258,hanisms such as mutex locks and semaphores involves many potential problems including deadlock Additionally as the number of threads increases traditional locking doesn t scaleaswell becausethelevelofcontentionamongthreadsforlockownership becomesveryhigh As an alternative to traditional locking methods new features that take advantageoftransactionalmemorycanbeaddedtoaprogramminglanguage Inourexample supposewe addthe construct atomic S which ensuresthat,,,
259,ormed byanumberofthreadsequaltothenumberofprocessingcoresinthesystem TheadvantageofOpen MP and similartools isthatthreadcreationand man agement are handled by the Open MPlibrary and are not the responsibility of applicationdevelopers Along with its pragma omp parallel compiler directive Open MPpro videsthecompilerdirective pragma omp critical whichspecifiesthecode regionfollowingthedirectiveasacriticalsectioninwhichonlyonethreadmay be active at a time In this way Open MPprovides support for ensuring that threadsdonot generate race conditions ,,,
260,e asvariablesmay beassigneddifferentvaluesovertime With the current emphasis on concurrent and parallel programming for multicore systems there has been greater focus on functional programming languages which follow a programming paradigm much different from that offeredby imperativelanguages The fundamental differencebetweenimper ative and functional languages is that functional languages do not maintain state That is once a variable has been defined and assigned a value its value,,,
261,allanguages Functionallan guages are particularly intriguing as they offer a different programming paradigmfromprocedurallanguages Unlikeprocedurallanguages func tionallanguagesdonotmaintainstateandthereforearegenerallyimmune fromrace conditions and criticalsections Practice Exercises 7 1Explain why Windows and Linux implement multiple locking mech anisms Describe the circumstances under which they use spinlocks mutexlocks semaphores andconditionvariables Ineachcase explain why the mechanism isneeded ,7.5.2 OpenMP,7.5.3 Functional Programming Languages,7.6 Summary
262,allanguages Functionallan guages are particularly intriguing as they offer a different programming paradigmfromprocedurallanguages Unlikeprocedurallanguages func tionallanguagesdonotmaintainstateandthereforearegenerallyimmune fromrace conditions and criticalsections Practice Exercises 7 1Explain why Windows and Linux implement multiple locking mech anisms Describe the circumstances under which they use spinlocks mutexlocks semaphores andconditionvariables Ineachcase explain why the mechanism isneeded ,7.5.3 Functional Programming Languages,7.6 Summary,Practice Exercises
263, C Breshears The Art of Concurrency O Reilly Associates 2009 Goetz et al 2006 B Goetz T Peirls J Bloch J Bowbeer D Holmes and D Lea JavaConcurrencyinPractice Addison Wesley 2006 Hart 2005 J M Hart WindowsSystemProgramming Third Edition Addison Wesley 2005 Love 2010 R Love Linux Kernel Development Third Edition Developer s Library 2010 ,7.6 Summary,Practice Exercises,Further Reading
264, C Breshears The Art of Concurrency O Reilly Associates 2009 Goetz et al 2006 B Goetz T Peirls J Bloch J Bowbeer D Holmes and D Lea JavaConcurrencyinPractice Addison Wesley 2006 Hart 2005 J M Hart WindowsSystemProgramming Third Edition Addison Wesley 2005 Love 2010 R Love Linux Kernel Development Third Edition Developer s Library 2010 ,Practice Exercises,Further Reading,Bibliography
265,n a Java ReentrantLock is not placed in the try clause for exception handling yet the call to the unlock method is placed in a finally clause 7 13 Explain the difference between software and hardware transactional memory EX 26,Further Reading,Bibliography,Chapter 7 Exercises
266,edglobal variable by using mutexlocks 7 18Exercise 4 25 asked you to design a program using Open MPthat esti matedœÄusingtheMonteCarlotechnique Examineyoursolutiontothat program looking for any possible race conditions If you identify a race condition protectagainst itusing the strategyoutlinedinSection7 5 2 7 19Abarrierisatoolforsynchronizingtheactivityofanumberofthreads When a thread reaches a barrier point it cannot proceed until all otherChapter 7 Synchronization Examples P 34,Bibliography,Chapter 7 Exercises,Programming Problems
267,t involves creating and managing a thread pool and it may be completed using either Pthreds and POSIXsynchronization or Java Below we providethe detailsrelevanttoeachspecifictechnology I POSIX ThePOSIXversion of this project will involve creating a number of threads using the Pthreads APIas well as using POSIXmutex locks and semaphores forsynchronization P 35,Chapter 7 Exercises,Programming Problems,Programming Projects
268, when mutex locks are used Define the four necessary conditions that characterize deadlock Identify a deadlock situation in a resource allocation graph Evaluate the four different approaches for preventing deadlocks Apply the banker s algorithm for deadlock avoidance Apply the deadlock detection algorithm Evaluate approaches for recovering from deadlock 317,Programming Projects,Chapter 8 Deadlocks,
269,may be system calls as explained in Chapter 2 Examples are the request andrelease of a device open and close of a file and allocate and free memory system calls Similarly as we saw in Chapter 6 request and release can be accomplished through the wait and signal operations on semaphores and through acquire andrelease ofamutexlock Foreachuseofakernel managed resourcebyathread theoperatingsystemcheckstomakesurethatthethread has requested and has been allocated the resource A system table records whether each resource is free or allocated For each resource that is allocated ,Programming Projects,Chapter 8 Deadlocks,8.1 System Model
270,s thread oneand thread two are created and both these threads have access to both mutex locks thread oneandthread two r u ni nt h ef u n c t i o n s do work one and do work two respectively as shown inFigure 8 1 In this example thread oneattempts to acquire the mutex locks in the order 1 first mutex 2 second mutex At the same time thread two attempts to acquire the mutex locks in the order 1 second mutex 2 first mutex Deadlock is possible if thread oneacquires first mutex while thread twoacquires second mutex ,Chapter 8 Deadlocks,8.1 System Model,8.2 Deadlock in Multithreaded Applications
271,that can be caused only by another threadintheset livelockoccurswhenathreadcontinuouslyattemptsanaction that fails Livelock is similar to what sometimes happens when two people attempt to pass in a hallway One moves to his right the other to her left still obstructing each other s progress Then he moves to his left and she moves,,,
272,t be preempted that is a resource can bereleasedonlyvoluntarilybythethreadholdingit afterthatthreadhas completeditstask 4 Circular wait Aset T0 T1 Tn ofwaitingthreadsmustexistsuchthat T0is waiting for a resource held by T1 T1is waiting for a resource held byT2 Tn 1iswaitingforaresourceheldby Tn and Tniswaitingfora resource held by T0 We emphasize that all four conditions must hold for a deadlock to occur The circular wait condition implies the hold and wait condition so the four,8.2 Deadlock in Multithreaded Applications,8.2.1 Livelock,8.3 Deadlock Characterization
273,t be preempted that is a resource can bereleasedonlyvoluntarilybythethreadholdingit afterthatthreadhas completeditstask 4 Circular wait Aset T0 T1 Tn ofwaitingthreadsmustexistsuchthat T0is waiting for a resource held by T1 T1is waiting for a resource held byT2 Tn 1iswaitingforaresourceheldby Tn and Tniswaitingfora resource held by T0 We emphasize that all four conditions must hold for a deadlock to occur The circular wait condition implies the hold and wait condition so the four,,,
274,type Rj ar e q u e s te d g ei s inserted in the resource allocation gr aph When this request can be fulfilled therequestedgeis instantaneously transformedtoanassignmentedge When thethreadnolongerneedsaccesstotheresource itreleasestheresource Asa result theassignment edgeisdeleted The resource allocation graph shown in Figure 8 4 depicts the following situation The sets T R andE T T1 T2 T3 R R1 R2 R3 R4 ,,,
275,hould wait To decide whether the current request can be satisfied or must be delayed the systemmustconsidertheresourcescurrentlyavailable theresourcescurrently allocated to each thread and the future requests and releases of each thread Wediscuss theseschemes inSection8 6 If a system does not employ either a deadlock prevention or a deadlock avoidancealgorithm thenadeadlocksituationmayarise Inthisenvironment the system can provide an algorithm that examines the state of the system to determinewhetheradeadlockhas occurredandanalgorithmtorecoverfrom,8.3.1 Necessary Conditions,8.3.2 Resource-Allocation Graph,8.4 Methods for Handling Deadlocks
276,wait for a sharable resource In general however we cannot prevent deadlocks by denying the mutual exclusion condition because some resources are intrinsically nonsharable For example a mutex lock cannot be simultaneouslysharedby severalthreads 8 5 2 Hold and Wait Toensurethatthehold and waitconditionneveroccursinthesystem wemust guarantee that whenever a thread requests a resource it does not hold any other resources One protocol that we can use requires each thread to request and be allocated all its resources before it begins execution This is of course ,8.3.2 Resource-Allocation Graph,8.4 Methods for Handling Deadlocks,8.5 Deadlock Prevention
277,wait for a sharable resource In general however we cannot prevent deadlocks by denying the mutual exclusion condition because some resources are intrinsically nonsharable For example a mutex lock cannot be simultaneouslysharedby severalthreads 8 5 2 Hold and Wait Toensurethatthehold and waitconditionneveroccursinthesystem wemust guarantee that whenever a thread requests a resource it does not hold any other resources One protocol that we can use requires each thread to request and be allocated all its resources before it begins execution This is of course ,,,
278,wait for a sharable resource In general however we cannot prevent deadlocks by denying the mutual exclusion condition because some resources are intrinsically nonsharable For example a mutex lock cannot be simultaneouslysharedby severalthreads 8 5 2 Hold and Wait Toensurethatthehold and waitconditionneveroccursinthesystem wemust guarantee that whenever a thread requests a resource it does not hold any other resources One protocol that we can use requires each thread to request and be allocated all its resources before it begins execution This is of course ,,,
279,s presented thus far for deadlock prevention are generally impractical in most situations However the fourth and final condition for deadlocks the circular wait condition presents an opportunity for a practical solution by invalidating one of the necessary conditions One way to ensure that this condition never holds is to impose a total ordering of all resource types and to require that each thread requests resources in an increasing orderof enumeration To illustrate we let R R1 R2 Rm be the set of resource types We assign to each resource type a unique integer number which allows us to,,,
280,s presented thus far for deadlock prevention are generally impractical in most situations However the fourth and final condition for deadlocks the circular wait condition presents an opportunity for a practical solution by invalidating one of the necessary conditions One way to ensure that this condition never holds is to impose a total ordering of all resource types and to require that each thread requests resources in an increasing orderof enumeration To illustrate we let R R1 R2 Rm be the set of resource types We assign to each resource type a unique integer number which allows us to,,,
281,hm that ensures that the system will never en ter a deadlocked state Adeadlock avoidance algorithm dynamically examines the resource allocation state to ensure that a circular wait condition can never exist The resource allocation stateis defined by the number of available and allocated resources and the maximum demands of the threads In the following sections we explore two deadlock avoidancealgorithms ,8.5.3 No Preemption,8.5.4 Circular Wait,8.6 Deadlock Avoidance
282,to its maximum in some order and still avoid a deadlock More formally a system is in a safe state only if there exists a safe sequence As e q u e n c eo ft h r e a d s T1 T2 Tn i sas a f es e q u e n c ef o rt h ec u r r e n ta l l o c a t i o ns t a t ei f f o re a c h Ti the resource requests that Tican stillmake can be satisfiedbythe currently availableresourcesplustheresourcesheldbyall Tj with j i Inthissituation if the resources that Tineeds are not immediately available then Tican wait until all Tjhave finished When they have finished Tic a no b t a i na l lo fi t s,,,
283,ll have to wait for its requests to be satisfied To illustrate this algorithm we consider the resource allocation graph of Figure 8 9 Suppose that T2requests R2 A l t h o u g h R2is currently free we cannotallocateitto T2 sincethisactionwillcreateacycleinthegraph Figure 8 10 Acycle as mentioned indicates that the system is in an unsafe state If T1requests R2 a n d T2requests R1 then a deadlockwilloccur 8 6 3 Banker s Algorithm The resource allocation graph algorithm is not applicable to a resource allocation system with multiple instances of each resource type The,,,
284,ll have to wait for its requests to be satisfied To illustrate this algorithm we consider the resource allocation graph of Figure 8 9 Suppose that T2requests R2 A l t h o u g h R2is currently free we cannotallocateitto T2 sincethisactionwillcreateacycleinthegraph Figure 8 10 Acycle as mentioned indicates that the system is in an unsafe state If T1requests R2 a n d T2requests R1 then a deadlockwilloccur 8 6 3 Banker s Algorithm The resource allocation graph algorithm is not applicable to a resource allocation system with multiple instances of each resource type The,,,
285,esources have only a single instance then we can define a deadlock detectionalgorithmthatusesavariantoftheresource allocationgraph called await for graph We obtain this graph from the resource allocation graph by removingthe resourcenodes andcollapsing theappropriateedges Moreprecisely anedgefrom TitoTjinawait forgraphimpliesthatthread Tiis waiting for thread Tjto release a resource that Tineeds An edge Ti Tj,8.6.2 Resource-Allocation-Graph Algorithm,8.6.3 Banker‚Äôs Algorithm,8.7 Deadlock Detection
286,esources have only a single instance then we can define a deadlock detectionalgorithmthatusesavariantoftheresource allocationgraph called await for graph We obtain this graph from the resource allocation graph by removingthe resourcenodes andcollapsing theappropriateedges Moreprecisely anedgefrom TitoTjinawait forgraphimpliesthatthread Tiis waiting for thread Tjto release a resource that Tineeds An edge Ti Tj,,,
287,stem with multiple instances of each resource type We turn now to a deadlock detectionalgorithmthatisapplicabletosuchasystem Thealgorithmemploys several time varying data structures that are similar to those used in the banker s algorithm Section8 6 3 Available Avectoroflength mindicatesthenumberofavailableresources of each type ,,,
288,ilableresourcesisnotsufficient to fulfill the requests of the other threads Thus a deadlock exists consisting of threads T1 T2 T3 a n d T4 8 7 3 Detection Algorithm Usage Whenshouldweinvokethedetectionalgorithm Theanswerdependsontwo factors 1 How oftenis adeadlocklikelyto occur 2 How manythreadswillbe affectedby deadlockwhen ithappens ,,,
289,rcent Adeadlockeventuallycripplessystemthroughputandcauses CPUutilization to drop If the detection algorithm is invoked at arbitrary points in time the resourcegraphmaycontainmanycycles Inthiscase wegenerallycannottell which of the many deadlockedthreads caused the deadlock 8 8 Recovery from Deadlock When a detection algorithm determines that a deadlock exists several alter nativesareavailable One possibility isto inform the operatorthat a deadlock hasoccurredandtolettheoperatordealwiththedeadlockmanually Another possibility is to let the system recoverfrom the deadlock automatically There,8.7.2 Several Instances of a Resource Type,8.7.3 Detection-Algorithm Usage,8.8 Recovery from Deadlock
290,sources the process has used for exam ple whether the resourcesaresimpleto preempt 4 How many moreresourcesthe processneedsinorderto complete 5 How many processeswillneedto beterminated 8 8 2 Resource Preemption To eliminate deadlocks using resource preemption we successively preempt someresourcesfromprocessesandgivetheseresourcestootherprocessesuntil thedeadlockcycle isbroken Ifpreemptionisrequiredtodealwithdeadlocks thenthreeissuesneedto be addressed ,,,
291,sources the process has used for exam ple whether the resourcesaresimpleto preempt 4 How many moreresourcesthe processneedsinorderto complete 5 How many processeswillneedto beterminated 8 8 2 Resource Preemption To eliminate deadlocks using resource preemption we successively preempt someresourcesfromprocessesandgivetheseresourcestootherprocessesuntil thedeadlockcycle isbroken Ifpreemptionisrequiredtodealwithdeadlocks thenthreeissuesneedto be addressed ,,,
292,only practicalapproach Deadlock can be avoided by using the banker s algorithm which does not grant resourcesif doingsowould leadthe systemintoan unsafe state where deadlockwould bepossible Adeadlock detectionalgorithmcanevaluateprocessesandresourcesona running systemto determineif a setof processesisina deadlockedstate Ifdeadlockdoesoccur asystemcanattempttorecoverfromthedeadlock by either aborting one of the processes in the circular wait or preempting resourcesthat havebeenassignedto a deadlockedprocess ,8.8.1 Process and Thread Termination,8.8.2 Resource Preemption,8.9 Summary
293,about twice per month and the operator must terminate and rerun abouttenjobsperdeadlock Eachjobisworthabouttwodollars in CPU time andthejobsterminatedtend tobeabouthalfdonewhentheyare aborted A systems programmer has estimated that a deadlock avoidance algorithm likethe banker s algorithm could be installedin the system with an increase of about 10 percent in the average execution time per,8.8.2 Resource Preemption,8.9 Summary,Practice Exercises
294,www kernel org doc Documentation locking lockdep design txt Bibliography Dijkstra 1965 E W Dijkstra Cooperating Sequential Processes Technical report TechnologicalUniversity E indhoven theNetherlands 1965 ,8.9 Summary,Practice Exercises,Further Reading
295,www kernel org doc Documentation locking lockdep design txt Bibliography Dijkstra 1965 E W Dijkstra Cooperating Sequential Processes Technical report TechnologicalUniversity E indhoven theNetherlands 1965 ,Practice Exercises,Further Reading,Bibliography
296,However we also point out that deadlock is possible in this situation if two threads simultaneously invoke the transaction function Fix the transac tion function topreventdeadlocks Figure 8 11 Traffic deadlock for Exercise 8 12 EX 27,Further Reading,Bibliography,Chapter 8 Exercises
297,ilable amount of each resource int available NUMBER OF RESOURCES the maximum demand of each customer int maximum NUMBER OF CUSTOMERS NUMBER OF RESOURCES the amount currently allocated to each customer int allocation NUMBER OF CUSTOMERS NUMBER OF RESOURCES the remaining need of each customer int need NUMBER OF CUSTOMERS NUMBER OF RESOURCES P 45,Bibliography,Chapter 8 Exercises,Programming Problems
298,ilable amount of each resource int available NUMBER OF RESOURCES the maximum demand of each customer int maximum NUMBER OF CUSTOMERS NUMBER OF RESOURCES the amount currently allocated to each customer int allocation NUMBER OF CUSTOMERS NUMBER OF RESOURCES the remaining need of each customer int need NUMBER OF CUSTOMERS NUMBER OF RESOURCES P 45,Chapter 8 Exercises,Programming Problems,Programming Projects
299,pends on many factors especially on the system s hardware design Most algorithms require some form of hardware support ,PART FOUR MEMORY MANAGEMENT,,
300,d inverted page tables Describe address translation for IA 32 x86 64 and ARMv8 architectures 9 1 Background As we saw in Chapter 1 memory is central to the operation of a modern computersystem Memoryconsistsofalargearrayofbytes eachwithitsown address The CPUfetches instructions from memory according to the value of 349,PART FOUR MEMORY MANAGEMENT,Chapter 9 Main Memory,
301,d inverted page tables Describe address translation for IA 32 x86 64 and ARMv8 architectures 9 1 Background As we saw in Chapter 1 memory is central to the operation of a modern computersystem Memoryconsistsofalargearrayofbytes eachwithitsown address The CPUfetches instructions from memory according to the value of 349,PART FOUR MEMORY MANAGEMENT,Chapter 9 Main Memory,9.1 Background
302,oanother hardware thread Not only are we concerned with the relative speed of accessing physi cal memory but we also must ensure correct operation For proper system operation we must protect the operating system from access by user pro cesses aswellasprotectuserprocessesf romoneanother Thisprotectionmust be provided by the hardware because the operating system doesn t usually intervene between the CPUand its memory accesses because of the resulting performancepenalty Hardwareimplementsthisproductioninseveraldiffer ent ways as we show throughout the chapter Here we outline one possible implementation ,,,
303, addresses can be done atany stepalong the way Compile time Ifyouknowatcompiletimewheretheprocesswillresidein memory then absolute code can be generated For example if you know that a user process will reside starting at location R then the generated compiler code will start at that location and extend up from there If at some later time the starting location changes then it will be necessary to recompilethis code ,,,
304, discussing appropriatehardwaresupport 9 1 3 Logical Versus Physical Address Space Anaddressgeneratedbythe CPUiscommonlyreferredtoasa logical address whereas an address seen by the memory unit that is the one loaded into,,,
305,e advantage of such a method Operating systems may help the programmer however by providinglibrary routinestoimplementdynamicloading 9 1 5 Dynamic Linking and Shared Libraries Dynamically linked libraries DLLs aresystemlibrariesthatarelinkedtouser programswhentheprogramsarerun referbacktoFigure9 3 Someoperating systems support only static linking in which system libraries are treated,,,
306,e advantage of such a method Operating systems may help the programmer however by providinglibrary routinestoimplementdynamicloading 9 1 5 Dynamic Linking and Shared Libraries Dynamically linked libraries DLLs aresystemlibrariesthatarelinkedtouser programswhentheprogramsarerun referbacktoFigure9 3 Someoperating systems support only static linking in which system libraries are treated,,,
307,emory must accommodate both the operating system and the various user processes We therefore need to allocate main memory in the mostefficientwaypossible Thissectionexplainsoneearlymethod contiguous memoryallocation The memory is usually divided into two partitions one for the operating system and one for the user processes We can place the operating system in either low memory addresses or high memory addresses This decision dependsonmanyfactors suchasthelocationoftheinterruptvector However many operating systems including Lin ux and Windows place the operating systemin high memory and thereforewediscussonly that situation ,9.1.4 Dynamic Loading,9.1.5 Dynamic Linking and Shared Libraries,9.2 Contiguous Memory Allocation
308,vice drivers If a device driver is not currently in use it makes little sense to keep it in memory instead it can be loaded into memory only when it is needed Likewise when the device driver is no longer needed it can be removedand itsmemoryallocatedfor otherneeds CPU memorylogical address trap addressing errornoyesphysical addressrelocation register limit register Figure 9 6 Hardware support for relocation and limit registers ,,,
309,ntholes aremergedtoform one largerhole This procedure is a particular instance of the general dynamic storage allocation problem which concerns how to satisfy a request of size nfrom a listoffreeholes Therearemanysolutionstothisproblem The first fit best fi and worst fi strategies are the ones most commonly used to select a free hole from thesetof availableholes OS process 5 process 8 process 2OS process 2OS process 5 process 9 process 9 process 2OS process 5 process 2low memoryhigh memory Figure 9 7 Variable partition ,,,
310,h a hole of 18 464 bytes Suppose that the next process requests 18 462 bytes If we allocate exactly the requested block we are left with a hole of 2 bytes The overhead to keep track of this hole will be substantially larger than the hole itself The general approach to avoiding this problem is to break the physical memory into fixed sized blocks and allocate memory in units bas ed on block size With this approach the memory allocated to a process may be slightly larger than the requested memory Thedifferencebetweenthesetwonumbersis internal fragmentation unused memorythat isinternalto a partition ,,,
311,ource afilesystemor thebackingstore Thebackingstoreisdividedintofixed sizedblocksthatare thesamesizeasthememoryframesorclustersofmultipleframes Thisrather simple idea has great functionality and wide ramifications For example the logical address space is now totally separate from the physical address space soaprocesscanhavealogical64 bitaddressspaceeventhoughthesystemhas lessthan264bytes ofphysical memory Every address generated by the CPUis divided into two parts a page number p a n da page offset d pdpage number page offset,9.2.2 Memory Allocation,9.2.3 Fragmentation,9.3 Paging
312,ource afilesystemor thebackingstore Thebackingstoreisdividedintofixed sizedblocksthatare thesamesizeasthememoryframesorclustersofmultipleframes Thisrather simple idea has great functionality and wide ramifications For example the logical address space is now totally separate from the physical address space soaprocesscanhavealogical64 bitaddressspaceeventhoughthesystemhas lessthan264bytes ofphysical memory Every address generated by the CPUis divided into two parts a page number p a n da page offset d pdpage number page offset,,,
313,emporary CPUs however supportmuchlargerpagetables forexample 220entries Forthesemachines the use of fast registers to implement the page table is not feasible Rather the page table is kept in main memory and a page table base register PTBR pointstothepagetable Changingpagetablesrequireschangingonlythisone register substantially reducingcontext switch time 9 3 2 1 Translation Look Aside Buffer Although storing the page table in main memory can yield faster context switches it may also result in slower memory access times Suppose we want to access location i We must first index into the page table using the value in,,,
314,ess space and is thus a legal or valid page When the bitissetto invalid thepageisnotintheprocess slogicaladdressspace Illegal addresses are trapped by use of the valid invalid bit The operating system setsthisbit for eachpagetoallow or disallowaccess tothe page Suppose for example that in a system with a 14 bit address space 0 to 16383 we have a program that should use only addresses 0 to 10468 Given ap a g es i z eo f2 KB we have the situation shown in Figure 9 13 Addresses in pages 0 1 2 3 4 and 5 are mapped normally through the page table Any attempt to generate an address in pages 6 or 7 however will find that the,,,
315,vantageofpagingisthepossibilityof sharingcommoncode aconsidera tionthat is particularly important in an environment with multipleprocesses Consider the standard C library which provides a portion of the system call interface for many versions of UNIXand Linux On a typical Linux system mostuserprocessesrequirethestandardClibrary libc Oneoptionistohave,,,
316, Because address translation works from the outer page table inward this scheme is also known as a forward mapped pagetable Forasystemwitha64 bitlogicaladdressspace atwo levelpagingscheme is no longer appropriate To illustrate th is point let s suppose that the page size in such a system is 4 KB 212 In this case the page table consists of up to 252entries If we use a two level paging scheme then the inner page tables canconvenientlybeonepagelong orcontain2104 byteentries Theaddresses looklikethis ,9.3.3 Protection,9.3.4 Shared Pages,9.4 Structure of the Page Table
317, Because address translation works from the outer page table inward this scheme is also known as a forward mapped pagetable Forasystemwitha64 bitlogicaladdressspace atwo levelpagingscheme is no longer appropriate To illustrate th is point let s suppose that the page size in such a system is 4 KB 212 In this case the page table consists of up to 252entries If we use a two level paging scheme then the inner page tables canconvenientlybeonepagelong orcontain2104 byteentries Theaddresses looklikethis ,,,
318,f there is no match subsequent entri es in the linked list are searched for a matching virtualpage number This scheme is shown inFigure 9 17 hash tableqslogical addressphysical address physical memorypd rd prhash function Figure 9 17 Hashed page table ,,,
319,emory Figure 9 18 shows the operation of an inverted page table Compare it with Figure 9 8 which depicts a standard page table in operation Inverted page tables often require that an address space identifier Section 9 3 2 be stored in each entry of the page table since the table usually contains several page tableCPUlogical addressphysical addressphysical memory ipid p pidsearch pd id Figure 9 18 Inverted page table ,,,
320,afinalexampleamodern64 bit CPUandoperatingsystemthatare tightly integrated to provide low overhead virtual memory Solarisrunning on the SPARCCPUis a fully 64 bit operating system and as such has to solve the problem of virtual memory without using up all of its physical memory by keeping multiple levels of page tables Its approach is a bit complex but solves the problem efficiently using hashed page tables There are two hash tables one for the kernel and one for all user processes Each maps memory addresses from virtual to physical memory Each hash table entry represents a contiguous area of mapped virtual memory which is more efficient than,,,
321, Figure 9 19 Swapping makes it possible for the total physical addressspace of all processesto exceedthe realphysical memory of the system thus increasing the degree of multiprogramming in a system operating system swap out swap in user space main memorybacking storeprocess P2process P11 2 Figure 9 19 Standard swapping of two processes using a disk as a backing store ,9.4.3 Inverted Page Tables,9.4.4 Oracle SPARC Solaris,9.5 Swapping
322,th virtualmemory 9 5 3 Swapping on Mobile Systems Most operating systems for PCs and servers support swapping pages In con trast mobile systems typically do not s upport swapping in any form Mobile devices generally use flash memory rather than more spacious hard disks for nonvolatile storage The resulting space constraint is one reason why mobile operating systemdesignersavoidswappi ng Otherreasonsincludethelimited number of writes that flash memory can tolerate before it becomes unreliable and the poor throughput between main memory and flash memory in these devices ,,,
323,th virtualmemory 9 5 3 Swapping on Mobile Systems Most operating systems for PCs and servers support swapping pages In con trast mobile systems typically do not s upport swapping in any form Mobile devices generally use flash memory rather than more spacious hard disks for nonvolatile storage The resulting space constraint is one reason why mobile operating systemdesignersavoidswappi ng Otherreasonsincludethelimited number of writes that flash memory can tolerate before it becomes unreliable and the poor throughput between main memory and flash memory in these devices ,,,
324,th virtualmemory 9 5 3 Swapping on Mobile Systems Most operating systems for PCs and servers support swapping pages In con trast mobile systems typically do not s upport swapping in any form Mobile devices generally use flash memory rather than more spacious hard disks for nonvolatile storage The resulting space constraint is one reason why mobile operating systemdesignersavoidswappi ng Otherreasonsincludethelimited number of writes that flash memory can tolerate before it becomes unreliable and the poor throughput between main memory and flash memory in these devices ,,,
325,sists of up to 8 Ksegments that are shared among all the processes Information aboutthefirstpartitioniskeptinthe local descriptor table LDT information about the second partition is kept in the global descriptor table GDT Each entryinthe LDTandGDTconsistsofan8 bytesegmentdescriptorwithdetailed information about a particular segment including the base location and limit ofthat segment CPUlogical address segmentation unitlinear address paging unitphysical address physical memory Figure 9 21 Logical to physical address translation in IA 32 ,9.5.2 Swapping with Paging,9.5.3 Swapping on Mobile Systems,9.6 Example: Intel 32- and 64-bit Architectures
326,sists of up to 8 Ksegments that are shared among all the processes Information aboutthefirstpartitioniskeptinthe local descriptor table LDT information about the second partition is kept in the global descriptor table GDT Each entryinthe LDTandGDTconsistsofan8 bytesegmentdescriptorwithdetailed information about a particular segment including the base location and limit ofthat segment CPUlogical address segmentation unitlinear address paging unitphysical address physical memory Figure 9 21 Logical to physical address translation in IA 32 ,,,
327,rtual address with support for page sizes of 4 KB 2MB o r1GBusing four levels ofpaginghierarchy TherepresentationofthelinearaddressappearsinFigure 9 25 Becausethisaddressingschemecanuse PAE virtualaddressesare48bits insizebut support52 bit physical addresses 4 096 terabytes unusedpage map level 4page directory pointer tablepage directorypage table offset 63 63 47 48 39 38 30 29 21 20 12 11 0 Figure 9 25 x86 64 linear address ,,,
328,etwithina4 KBpage However noticethatthetableentriesforlevel1and 64 BIT COMPUTING Historyhastaughtusthateventhoughmemorycapacities CPUspeeds and similar computer capabilities seem large enough to satisfy demand for the foreseeable future the growth of technology ultimately absorbs available capacities andwefindourselvesinneedofadditionalmemoryorprocessing power oftensoonerthanwethink What mightthefutureoftechnologybring thatwould make a64 bit address space seemtoosmall ,9.6.1 IA-32 Architecture,9.6.2 x86-64,9.7 Example: ARMv8 Architecture
329,dsthesmallestlegalphysical memoryaddress and thelimitspecifiesthesizeof therange level 0 index level 0 table TTBR registerlevel 1 tablelevel 2 tablelevel 3 tablelevel 1 indexlevel 2 indexlevel 3 indexoffset 4 KB page 1 GB region2 MB region Figure 9 27 A R Mf o u r l e v e lh i e r a r c h i c a lp a g i n g ,9.6.2 x86-64,9.7 Example: ARMv8 Architecture,9.8 Summary
330, address space larger than 4 GB The x86 64 and ARMv9 architectures are 64 bit architecturesthat usehierarchical paging Practice Exercises 9 1Nametwo differencesbetweenlogicaland physical addresses 9 2Why arepagesizesalwayspowers of 2 9 3Considera systemin which a program can be separatedinto two parts codeanddata The CPUknowswhetheritwantsaninstruction instruc tionfetch ordata datafetchorstore Therefore twobase limitregister pairsareprovided oneforinstructionsandonefordata Theinstruction,9.7 Example: ARMv8 Architecture,9.8 Summary,Practice Exercises
331,b and T Mudge UniprocessorVirtual Mem oryWithoutTLBs IEEE Transactions on Computers Volume50 Number5 2001 Kilburn et al 1961 T Kilburn D J Howarth R B Payne andF H Sumner TheManchesterUniversity Atlas OperatingSystem PartI InternalOrganiza tion Computer Journal Volume4 Number3 1961 pages 222 225 ,9.8 Summary,Practice Exercises,Further Reading
332,b and T Mudge UniprocessorVirtual Mem oryWithoutTLBs IEEE Transactions on Computers Volume50 Number5 2001 Kilburn et al 1961 T Kilburn D J Howarth R B Payne andF H Sumner TheManchesterUniversity Atlas OperatingSystem PartI InternalOrganiza tion Computer Journal Volume4 Number3 1961 pages 222 225 ,Practice Exercises,Further Reading,Bibliography
333,ASIDs areusedin TLBs 9 20Program binaries in many systems are typically structured as follows Codeisstoredstartingwithasmall fixedvirtualaddress suchas0 The codesegmentisfollowedbythedatasegment whichisusedforstoring the program variables When the program starts executing the stack is allocated at the other end of the virtual address space and is allowed to grow towardlower virtualaddresses What is the significance of this structure for the following schemes EX 32,Further Reading,Bibliography,Chapter 9 Exercises
334,llocator 1048576 Once yourprogramhasstarted itwillpresenttheuserwiththefollowing prompt allocator It will then respond to the following commands RQ request RL release C compact STAT status report and X exit Arequestfor 40 000 byteswill appearas follows allocator RQ P0 40000 WP 48,Bibliography,Chapter 9 Exercises,Programming Problems
335,llocator 1048576 Once yourprogramhasstarted itwillpresenttheuserwiththefollowing prompt allocator It will then respond to the following commands RQ request RL release C compact STAT status report and X exit Arequestfor 40 000 byteswill appearas follows allocator RQ P0 40000 WP 48,Chapter 9 Exercises,Programming Problems,Programming Projects
336,xplain how it is related to program locality Describe how Linux Windows 10 and Solaris manage virtual memory Design a virtual memory manager simulation in the C programming lan guage 10 1 Background The memory management algorithms outlined in Chapter 9 are necessary because of one basic requirement the instructions being executed must be in 389,Programming Projects,Chapter 10 Virtual Memory,
337,xplain how it is related to program locality Describe how Linux Windows 10 and Solaris manage virtual memory Design a virtual memory manager simulation in the C programming lan guage 10 1 Background The memory management algorithms outlined in Chapter 9 are necessary because of one basic requirement the instructions being executed must be in 389,Programming Projects,Chapter 10 Virtual Memory,10.1 Background
338,memory later in this chapter First though we discuss implementing virtual memory through demand paging 10 2 Demand Paging Considerhowanexecutableprogrammightbeloadedfromsecondarystorage into memory One option is to load the entire program in physical memory at program execution time However a problem with this approach is that,Chapter 10 Virtual Memory,10.1 Background,10.2 Demand Paging
339,invalidbitschemedescribedinSection9 3 3canbeusedforthispurpose This B D DEF H logical memoryvalid invalid bitframe page table104 6 2 3 4 59 6 710 2 3 4 5 6 7iv v i i v i i physical memorybacking storeA AB C C FGHF10 2 3 4 5 6 7 98 10 11 12 13 14 15A C E G Figure 10 4 Page table when some pages are not in main memory ,,,
340,e fault means only that an additionalpagemustbe brought into memoryand theprocessrestarted 10 2 2 Free Frame List When a page fault occurs the operating system must bring the desired page from secondary storage into main memory To resolve page faults most oper ating systems maintain a free frame list a pool of free frames for satisfying suchrequests Figure10 6 Freeframesmustalsobeallocatedwhenthestack or heap segments from a process expand Operating systems typically allo head 79 7 126 75 15 Figure 10 6 List of free frames ,,,
341,thepageto a freeframe 6 While waiting allocate the CPUcore to some other process 7 Receivean interruptfrom the storage I Osubsystem I Ocompleted 8 Save the registers and process state for the other process if step 6 is executed 9 Determinethat theinterruptwas from thesecondary storagedevice 10 Correct the page table and other tables to show that the desired page is now in memory 11 Wait for the CPUcore to be allocated to thisprocessagain ,,,
342,ay be unnecessary Instead we can use a technique known as copy on write w h i c h works by allowing the parent and child processes initially to share the same pages These shared pages are marked as copy on write pages meaning that if either process writes to a shared page a copy of the shared page is created Copy on writeisillustratedinFigures10 7and10 8 which showthe contents ofthe physical memorybeforeandafterprocess1 modifiespageC For example assume that the child process attempts to modify a page containing portions of the stack with the pages set to be copy on write The operatingsystemwillobtainaframefromthefree framelistandcreateacopy,10.2.2 Free-Frame List,10.2.3 Performance of Demand Paging,10.3 Copy-on-Write
343,ad use standard swapping and swap out a process freeing all its frames and reducing the level of multiprogram ming However as discussed in Section 9 5 standard swapping is no longer used by most operating systems due to the overhead of copying entire pro cesses between memory and swap space Most operating systems now com bineswappingpageswith page replacement atechniquewedescribeindetail inthe remainderof thissection 10 4 1 Basic Page Replacement Pagereplacementtakesthefollowingapproach Ifnoframeisfree wefindone that is not currently being used and free it We can free a frame by writing its,10.2.3 Performance of Demand Paging,10.3 Copy-on-Write,10.4 Page Replacement
344,ad use standard swapping and swap out a process freeing all its frames and reducing the level of multiprogram ming However as discussed in Section 9 5 standard swapping is no longer used by most operating systems due to the overhead of copying entire pro cesses between memory and swap space Most operating systems now com bineswappingpageswith page replacement atechniquewedescribeindetail inthe remainderof thissection 10 4 1 Basic Page Replacement Pagereplacementtakesthefollowingapproach Ifnoframeisfree wefindone that is not currently being used and free it We can free a frame by writing its,,,
345,el Of course addingphysical memoryincreasesthenumber of frames We next illustrate several page replacement algorithms In doing so we use the reference string 7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1 for a memorywiththreeframes 10 4 2 FIFO Page Replacement The simplest page replacement algorithm is a first in first out FIFO a l g o rithm A FIFOreplacementalgorithmassociateswitheachpagethetimewhen thatpagewasbroughtintomemory Whenapagemustbereplaced theoldest pageischosen Noticethatitisnotstrictlynecessarytorecordthetimewhena,,,
346,t algorithm guarantees the lowest possible page f a u l tr a t ef o rafi x edn u m b ero ff r a m es Forexample onoursamplereferencestring theoptimalpage replacement algorithmwouldyieldninepagefaults asshowninFigure10 14 Thefirstthree references cause faults that fill the three empty frames The reference to page 2 replaces page 7 because page 7 will not be used until reference 18 whereas,,,
347,epage faultrateforthe LRUalgorithmon Sisthe same asthe page faultrate forthe LRUalgorithmon SR The result of applying LRUreplacementto our example reference string is shown in Figure 10 15 The LRUalgorithm produces twelve faults Notice that the first five faults are the same as those for optimal replacement When the reference to page 4 occurs however LRUreplacement sees that of the three frames in memory page 2 was used least recently Thus the LRUalgorithm replacespage2 notknowingthatpage2isabouttobeused Whenitthenfaults,,,
348, approximate LRUreplacement 10 4 5 1 Additional Reference Bits Algorithm Wecangainadditionalorderinginformationbyrecordingthereferencebitsat regularintervals Wecankeepan8 bitbyteforeachpageinatableinmemory At regular intervals say every 100 milliseconds a timer interrupt transfers control to the operating system The operating system shifts the reference bit foreachpageintothehigh orderbitofits8 bitbyte shiftingtheotherbitsright,,,
349,e following two schemes The least frequently used LFU page replacementalgorithmrequiresthat thepagewiththesmallestcountbereplaced Thereasonforthisselectionis thatanactivelyusedpageshouldhavealargereferencecount Aproblem arises however when a page is used heavily during the initial phase of,,,
350,he operating system provided no buffer ing at all A typical example is a database which provides its own memory management and I Obuffering Applications likethis understand their mem oryuseandstorageusebetterthandoesanoperatingsystemthatisimplement ing algorithms for general purpose use Furthermore if the operating system isbuffering I Oandtheapplicationisdoingsoaswell thentwicethememory isbeing usedfora setof I O Inanotherexample datawarehousesfrequentlyperformmassivesequen tial storage reads followed by computations and writes The LRUalgorithm,,,
351,he operating system provided no buffer ing at all A typical example is a database which provides its own memory management and I Obuffering Applications likethis understand their mem oryuseandstorageusebetterthandoesanoperatingsystemthatisimplement ing algorithms for general purpose use Furthermore if the operating system isbuffering I Oandtheapplicationisdoingsoaswell thentwicethememory isbeing usedfora setof I O Inanotherexample datawarehousesfrequentlyperformmassivesequen tial storage reads followed by computations and writes The LRUalgorithm,,,
352,tal number of available frames unlessthereispagesharing Wemustalsoallocateatleastaminimum number offrames Here welook morecloselyat thelatterrequirement One reason for allocating at least a minimum number of frames involves performance Obviously as the number of frames allocated to each process decreases the page fault rate increases slowing process execution In addi tion remember that when a page fault occurs before an executing instruction is complete the instruction must be restarted Consequently we must have enough frames to hold all the different pages that any single instruction can reference ,10.4.7 Page-Buffering Algorithms,10.4.8 Applications and Page Replacement,10.5 Allocation of Frames
353,tal number of available frames unlessthereispagesharing Wemustalsoallocateatleastaminimum number offrames Here welook morecloselyat thelatterrequirement One reason for allocating at least a minimum number of frames involves performance Obviously as the number of frames allocated to each process decreases the page fault rate increases slowing process execution In addi tion remember that when a page fault occurs before an executing instruction is complete the instruction must be restarted Consequently we must have enough frames to hold all the different pages that any single instruction can reference ,,,
354,ss according to its size Let the size of thevirtualmemoryfor process pibesi and define S si Then if the total number of available frames is m we allocate aiframes to process pi w h er e aiisapproximately ai si S m Of course we must adjust each aito be an integer that is greater than the minimum number of frames required by the instruction set with a sum not exceeding m With proportional allocation we would split 62 frames between two pro cesses one of 10 pages and one of 127 pages by allocating 4 frames and 57 frames respectively since,,,
355,behavior of other processes Therefore the same processmayperformquitedifferently forexample taking0 5secondsforone execution and 4 3 seconds for the next execution because of totally external circumstances Such is not the case with alocal replacementalgorithm Under local replacement the set of pages in memory for a process is affected by the paging behavior of only that process Local replacement might hinder a pro cess however by not making availabletoit other lessusedpagesof memory Thus global replacement generally results in greater system throughput It is thereforethemorecommonly usedmethod ,,,
356,rconnect and as youmightexpect a CPUcan accessitslocalmemoryfasterthan memorylocal to another CPU NUMAsystems are without exception slower than systems in whichallaccessestomainmemoryaretreatedequally However asdescribed in Section 1 3 2 NUMAsystems can accommodate more CPUs and therefore achievegreaterlevelsofthroughput andparallelism CPU0memory0 CPU2CPU3CPU1memory1 memory2memory3interconnect Figure 10 19 NUMA multiprocessing architecture ,,,
357,nthe workingset Theprocesswillquicklypag e fault Atthispoint itmustreplace somepage However sinceallitspagesareinactiveuse itmustreplaceapage thatwillbeneededagainrightaway Con sequently itquicklyfaultsagain and again and again replacingpagesthat itmustbring back inimmediately This high paging activity is called thrashing A process is thrashing if it isspendingmoretimepagingthan executing Asyoumightexpect thrashing resultsinsevereperformanceproblems 10 6 1 Cause of Thrashing Considerthefollowingscenario whichisbasedontheactualbehaviorofearly pagingsystems Theoperatingsystemmonitors CPUutilization If CPUutiliza ,10.5.3 Global versus Local Allocation,10.5.4 Non-Uniform Memory Access,10.6 Thrashing
358,nthe workingset Theprocesswillquicklypag e fault Atthispoint itmustreplace somepage However sinceallitspagesareinactiveuse itmustreplaceapage thatwillbeneededagainrightaway Con sequently itquicklyfaultsagain and again and again replacingpagesthat itmustbring back inimmediately This high paging activity is called thrashing A process is thrashing if it isspendingmoretimepagingthan executing Asyoumightexpect thrashing resultsinsevereperformanceproblems 10 6 1 Cause of Thrashing Considerthefollowingscenario whichisbasedontheactualbehaviorofearly pagingsystems Theoperatingsystemmonitors CPUutilization If CPUutiliza ,,,
359,emory references then the working set at time t1is 1 2 5 6 7 B yt i m e t2 the working sethas changed to 3 4 The accuracy of the working set depends on the selection of Œî I fŒîis too small itwillnotencompasstheentirelocality if Œîistoolarge itmayoverlap several localities In the extreme if Œîis infinite the working set is the set of pagestouched duringtheprocessexecution The most important property of the working set then is its size If we compute the working set size WSSi for each process in the system we can thenconsiderthat,,,
360,at the process needs more frames Conversely if the page fault rate is too low then the process may have too many frames We can establishupperandlowerboundsonthede siredpage faultrate Figure10 23 If the actual page fault rate exceeds the upper limit we allocate the process number of framesincrease number of frames upper bound lower bound decrease number of framespage fault rate Figure 10 23 Page fault frequency ,,,
361, 15 3 and 35 are compressed and stored in frame 7 which is then stored in the list of compressed frames The frames 15 3 and 35 can now be moved to the free framelist Ifoneofthethreecompressedframesislaterreferenced apage fault occurs and the compressed frame is decompressed restoring the three pages15 3 and 35 in memory head 7 head 33 5 26 152 92 1 27free frame list modified frame list16 Figure 10 24 Free frame list before compression ,,,
362, 15 3 and 35 are compressed and stored in frame 7 which is then stored in the list of compressed frames The frames 15 3 and 35 can now be moved to the free framelist Ifoneofthethreecompressedframesislaterreferenced apage fault occurs and the compressed frame is decompressed restoring the three pages15 3 and 35 in memory head 7 head 33 5 26 152 92 1 27free frame list modified frame list16 Figure 10 24 Free frame list before compression ,10.6.3 Page-Fault Frequency,10.6.4 Current Practice,10.7 Memory Compression
363,ocating Kernel Memory When a process running in user mode requests additional memory pages are allocated from the list of free page frames maintained by the kernel This list is typically populated using a page replacement algorithm such as those dis cussedinSection10 4andmostlikelycontainsfreepagesscatteredthroughout physical memory as explained earlier Remember too that if a user process requests a single byte of memory internal fragmentation will result as the processwillbe grantedanentirepageframe ,10.6.4 Current Practice,10.7 Memory Compression,10.8 Allocating Kernel Memory
364,rawbacktothebuddysystemisthatroundinguptothenext highest power of 2 is very likely to cause fragmentation within allocated seg ments Forexample a33 KBrequestcanonlybesatisfiedwitha64 KBsegment Infact wecannot guaranteethatlessthan 50percentoftheallocatedunitwill be wasted due to internal fragmentation In the following section we explore amemoryallocation schemewhereno space islostdueto fragmentation 10 8 2 Slab Allocation Asecondstrategyforallocatingkernelmemoryisknownas slab allocation A slabis made up of one or more physically contiguous pages A cacheconsists,,,
365,rawbacktothebuddysystemisthatroundinguptothenext highest power of 2 is very likely to cause fragmentation within allocated seg ments Forexample a33 KBrequestcanonlybesatisfiedwitha64 KBsegment Infact wecannot guaranteethatlessthan 50percentoftheallocatedunitwill be wasted due to internal fragmentation In the following section we explore amemoryallocation schemewhereno space islostdueto fragmentation 10 8 2 Slab Allocation Asecondstrategyforallocatingkernelmemoryisknownas slab allocation A slabis made up of one or more physically contiguous pages A cacheconsists,,,
366, well be the case that many of the pages brought back into memoryby prepagingwillnot be used Assume that spages are prepaged and a fraction Œ±of these spages is actually used 0 Œ± 1 The question is whether the cost of the s Œ±saved page faults is greater or less than the cost of prepaging s 1 Œ± unnecessary pages If Œ±isclose to0 prepagingloses if Œ±isclose to 1 prepagingwins Note also that prepaging an executable program may be difficult as it may be unclear exactly what pages should be brought in Prepaging a file maybemorepredictable sincefilesareoftenaccessedsequentially TheLinux,10.8.1 Buddy System,10.8.2 Slab Allocation,10.9 Other Considerations
367, well be the case that many of the pages brought back into memoryby prepagingwillnot be used Assume that spages are prepaged and a fraction Œ±of these spages is actually used 0 Œ± 1 The question is whether the cost of the s Œ±saved page faults is greater or less than the cost of prepaging s 1 Œ± unnecessary pages If Œ±isclose to0 prepagingloses if Œ±isclose to 1 prepagingwins Note also that prepaging an executable program may be difficult as it may be unclear exactly what pages should be brought in Prepaging a file maybemorepredictable sincefilesareoftenaccessedsequentially TheLinux,,,
368,age size allows each page to match program locality more accurately For example consider a process 200 KBin size of which only half 100 KB is actually used in an execution If we have only one large page we must bring in the entire page a total of 200 KBtransferred and allocated If instead we had pages of only 1 byte then we could bring in onlythe100 KBthatareactuallyused resultinginonly100 KBtransferredand allocated With a smaller page size then we have better resolution allowing us to isolate only the memory that is actually needed With a larger page size we must allocate and transfer not only what is needed but also anything else,,,
369,thatdonotrequiresuchalarge pagesize Alternatively mostarchitecturesprovidesupportformorethanone pagesize andanoperatingsystemcanbeconfiguredtotakeadvantageofthis support Forexample thedefaultpagesizeonLinuxsystemsis4 KB however Linuxalsoprovides huge pages afeaturethatdesignatesa regionofphysical memorywherelargerpages forexample 2 MB m a yb eu s ed Recall from Section 9 7 that the ARMv8 architecture provides support for pagesandregionsofdifferentsizes Additionally each TLBentryinthe ARMv8 contains a contiguous bit If this bit is set for a particular TLBentry that entry mapscontiguous adjacent blocksofmemory Threepossiblearrangementsof,,,
370,lhandling in thekerneland adelayin thepage lookupprocessing 10 9 5 Program Structure Demand paging is designed to be transparent to the user program In many cases theuseriscompletelyunawareofthepagednatureofmemory Inother cases however systemperformancecanbeimprovediftheuser orcompiler has an awarenessof the underlyingdemandpaging Let s look at a contrived but informative example Assume that pages are 128 words in size Consider a C program whose function is to initialize to 0 each elementof a128 by 128 array The following codeistypical ,,,
371,lhandling in thekerneland adelayin thepage lookupprocessing 10 9 5 Program Structure Demand paging is designed to be transparent to the user program In many cases theuseriscompletelyunawareofthepagednatureofmemory Inother cases however systemperformancecanbeimprovediftheuser orcompiler has an awarenessof the underlyingdemandpaging Let s look at a contrived but informative example Assume that pages are 128 words in size Consider a C program whose function is to initialize to 0 each elementof a128 by 128 array The following codeistypical ,,,
372,k the variable sizedload segm ents into the fixed sizedpages so that interpagereferencesareminimized Suchanapproachisparticularlyusefulfor la r gepa gesiz es 10 9 6 I O Interlock and Page Locking Whendemandpagingisused wesometimesneedtoallowsomeofthepages tobe lockedinmemory Onesuchsituationoccurswhen I Oisdonetoorfrom user virtual memory I Ois often implemented by a separate I Oprocessor Forexample acontrollerfora USBstoragedeviceisgenerallygiventhenumber,,,
373,nSection10 8 2 wediscussedhowLinuxmanageskernelmemoryusingslab allocation We now cover how Linux manages virtual memory Linux uses demandpaging allocatingpagesfromalistoffreeframes Inaddition ituses aglobalpage replacementpolicysimilartothe LRU approximationclockalgo rithm described in Section 10 4 5 2 To manage memory Linux maintains two typesofpagelists an active listandan inactive list The active list contains the pages that are considered in use while the inactive listcon tains pages that have not recently been referenced and are eligible to be reclaimed ,10.9.5 Program Structure,10.9.6 I/O Interlock and Page Locking,10.10 Operating-System Examples
374,nSection10 8 2 wediscussedhowLinuxmanageskernelmemoryusingslab allocation We now cover how Linux manages virtual memory Linux uses demandpaging allocatingpagesfromalistoffreeframes Inaddition ituses aglobalpage replacementpolicysimilartothe LRU approximationclockalgo rithm described in Section 10 4 5 2 To manage memory Linux maintains two typesofpagelists an active listandan inactive list The active list contains the pages that are considered in use while the inactive listcon tains pages that have not recently been referenced and are eligible to be reclaimed ,,,
375,B althoughitcanbeextendedto3 GB 32 bitsystemssupport 4GBof physical memory On 64 bit systems Windows 10 has a 128 TBvir tual address space and supports up to 24 TBof physical memory Versions of WindowsServersupportupto128 TBofphysicalmemory Windows10imple mentsmostofthememory managementfeaturesdescribedthusfar including shared libraries demand paging copy on write paging and memory com pression ,,,
376,move pages from a process already below its working set minimum Windows performs working set trimmingonbothuser modeand systemprocesses 10 10 3 Solaris In Solaris when a thread incurs a page fault the kernel assigns a page to the faulting thread from the list of fre e pages it maintains Therefore it is imperative that the kernel keep a sufficient amount of free memory available Associatedwiththislistoffreepagesisaparameter lotsfree thatrepre sents a threshold to begin paging The lotsfree parameter is typically set to 1 64thesizeofthephysicalmemory Fourtimespersecond thekernelchecks whether the amount of free memory is less than lotsfree If the number of,,,
377,ms are impractical to implement and most systems instead use LRU approximationalgorithms Globalpage replacementalgorithms selectapagefromanyprocessinthe system for replacement while local page replacement algorithms select a pagefromthe faultingprocess Thrashingoccurswhenasystemspends moretimepagingthanexecuting A locality represents a set of pages that are actively used together As a processexecutes itmovesfromlocalityto locality Aworkingsetisbased on localityandisdefinedasthesetofpagescurrentlyinusebya process ,10.10.2 Windows,10.10.3 Solaris,10.11 Summary
378, an additional 1 microsecond to access a page other than the current one Pages have 1 000 words and the paging device is a drum that rotates at 3 000 revolutions per minute and trans fers 1 million words per second The following statisticalmeasurementswereobtained fromthe system Onepercentofallinstructionsexecutedaccessedapageotherthan the currentpage Oftheinstructionsthataccessedanotherpage 80percentaccessed a pagealreadyinmemory ,10.10.3 Solaris,10.11 Summary,Practice Exercises
379,5 Denning 1968 P J Denning TheWorkingSetModelforProgramBehavior Communications of the ACM Volume11 Number5 1968 pages323 333 Love 2010 R Love Linux Kernel Development Third Edition Developer s Library 2010 Mauerer 2008 W Mauerer Professional Linux Kernel Architecture John Wiley and Sons 2008 McDougall and Mauro 2007 R McDougall and J Mauro Solaris Internals SecondEdition PrenticeHall 2007 ,10.11 Summary,Practice Exercises,Further Reading
380,5 Denning 1968 P J Denning TheWorkingSetModelforProgramBehavior Communications of the ACM Volume11 Number5 1968 pages323 333 Love 2010 R Love Linux Kernel Development Third Edition Developer s Library 2010 Mauerer 2008 W Mauerer Professional Linux Kernel Architecture John Wiley and Sons 2008 McDougall and Mauro 2007 R McDougall and J Mauro Solaris Internals SecondEdition PrenticeHall 2007 ,Practice Exercises,Further Reading,Bibliography
381,e options system designers could choose from to handlethis situation 10 18The following is a page table for a system with 12 bit virtual and physical addresses and 256 byte pages Free page frames are to be allocated in the order 9 F D Adash for a page frame indicates that t h epa g eisn o tinm em o r y EX 35,Further Reading,Bibliography,Chapter 10 Exercises
382,l address These 16 bits are divided into 1 an 8 bit page number and 2 an 8 bit page offset Hence theaddressesarestructuredasshown as offset 0 7 8 15 16 31page number Otherspecifics include the following 28entriesinthe pagetable Pagesizeof 28bytes 16 entriesinthe TLB Fra m esiz eo f28bytes 256 frames Physical memoryof 65 536 bytes 256 frames 256 byteframe size P 51,Bibliography,Chapter 10 Exercises,Programming Problems
383,l address These 16 bits are divided into 1 an 8 bit page number and 2 an 8 bit page offset Hence theaddressesarestructuredasshown as offset 0 7 8 15 16 31page number Otherspecifics include the following 28entriesinthe pagetable Pagesizeof 28bytes 16 entriesinthe TLB Fra m esiz eo f28bytes 256 frames Physical memoryof 65 536 bytes 256 frames 256 byteframe size P 51,Chapter 10 Exercises,Programming Problems,Programming Projects
384,n operating system s I O subsystem is to provide the simplest interface possible to the rest of the system Because devices are a perfo rmance bottleneck another key is to optimize I Ofor maximum concurrency ,PART FIVE STORAGE MANAGEMENT,,
385,storage devices Evaluate I Oscheduling algorithms Discuss operating system services provided for mass storage including RAID 11 1 Overview of Mass Storage Structure The bulk of secondary storage for modern computers is provided by hard disk drives HDDs a n d nonvolatile memory NVM devices In this section 449,PART FIVE STORAGE MANAGEMENT,Chapter 11 Mass-Storage Structure,
386,storage devices Evaluate I Oscheduling algorithms Discuss operating system services provided for mass storage including RAID 11 1 Overview of Mass Storage Structure The bulk of secondary storage for modern computers is provided by hard disk drives HDDs a n d nonvolatile memory NVM devices In this section 449,PART FIVE STORAGE MANAGEMENT,Chapter 11 Mass-Storage Structure,11.1 Overview of Mass-Storage Structure
387,0 RPM Some drives power down when not in use and spin up upon receiving an I Orequest Rotation speed relates to transfer rates The transfer rate is the rate at which data flow between the driveandthecomputer Anotherperformanceaspect the positioning time or random access time consistsoftwoparts thetimenecessarytomovethedisk armtothedesiredcylinder calledthe seek time andthetimenecessaryforthe,,,
388,hem smaller faster and more energy efficient Because NVMdevices can be much faster than hard disk drives standard bus interfaces can cause a major limit on throughput Some NVMdevices are designed to connect directly to the system bus PCIe for example This technology is changing other tradition al aspects of computer design as well Figure 11 3 A 3 5 inch SSD circuit board ,,,
389,ary storage but are created by device drivers that carve out a section of the system s DRAMand present it to the rest of the system as it if were a storage device These drives can be used as raw block devices butmorecommonly filesystemsarecreatedonthemforstandardfile operations Computers already have buffering and caching so what is the purpose of yetanotheruseof DRAMfortemporarydatastorage Afterall DRAMisvolatile anddataona RAMdrivedoesnotsurviveasystemcrash shutdown orpower down Caches and buffers are allocated by the programmer or operating sys tem whereas RAMdrives allow the user as well as the programmer to place,,,
390,anges Second the numberofsectorspertrackisnotaconstantonsomedrives Third diskman ufacturers manage LBAto physical address mapping internally so in current drives there is little relationship between LBAand physical sectors In spite of these physical address vagaries algorithms that deal with HDDst e n dt o assumethatlogicaladdressesarerelati velyrelatedtophysicaladdresses That is ascending logicaladdressesten dto meanascendingphysical address Let s look more closely at the second reason On media that use constant linear velocity CLV thedensityofbitspertrackisuniform Thefartheratrack is from the center of the disk the greater its length so the more sectors it can,,,
391,anges Second the numberofsectorspertrackisnotaconstantonsomedrives Third diskman ufacturers manage LBAto physical address mapping internally so in current drives there is little relationship between LBAand physical sectors In spite of these physical address vagaries algorithms that deal with HDDst e n dt o assumethatlogicaladdressesarerelati velyrelatedtophysicaladdresses That is ascending logicaladdressesten dto meanascendingphysical address Let s look more closely at the second reason On media that use constant linear velocity CLV thedensityofbitspertrackisuniform Thefartheratrack is from the center of the disk the greater its length so the more sectors it can,,,
392, isthetotalnumber of bytes transferred divided by the total time between the first request for serviceandthecompletionofthelasttransfer Wecanimproveboththeaccess timeand the bandwidth by managing the orderin which storage I Orequests areserviced Whenever a process needs I Oto or from the drive it issues a system call tothe operatingsystem Therequestspecifiesseveralpiecesof information Whether this operationisinput oroutput The openfile handleindicating thefileto operateon What thememoryaddressfor thetransferis The amount of datato transfer,11.1.4 Secondary Storage Connection Methods,11.1.5 Address Mapping,11.2 HDD Scheduling
393,therend servicingrequestsasitreacheseachcylinder untilitgets to theother endof the disk Atthe otherend the directionof head movement is reversed and servicing continues The head continuously scans back and forth across the disk The SCANalgorithm is sometimes called the elevator algorithm since the disk arm behaves just like an elevator in a building first servicing all the requests going up and then reversing to service requests the other way Let sreturntoourexampletoillustrate Beforeapplying SCANtoschedule the requestson cylinders98 183 37 122 14 124 65 and 67 we needto know,,,
394,therend servicingrequestsasitreacheseachcylinder untilitgets to theother endof the disk Atthe otherend the directionof head movement is reversed and servicing continues The head continuously scans back and forth across the disk The SCANalgorithm is sometimes called the elevator algorithm since the disk arm behaves just like an elevator in a building first servicing all the requests going up and then reversing to service requests the other way Let sreturntoourexampletoillustrate Beforeapplying SCANtoschedule the requestson cylinders98 183 37 122 14 124 65 and 67 we needto know,,,
395, because they are less likely to cause a starvation problem There can still bestarvationthough whichdroveLinuxtocreatethe deadline scheduler This scheduler maintains separate read and write queues and gives reads priority because processes are more likely to block on read than write The queues are 01 4 37536567 98122124 183 199queue 98 183 37 122 14 124 65 67 head starts at 53 Figure 11 8 C SCAN disk scheduling ,,,
396, because they are less likely to cause a starvation problem There can still bestarvationthough whichdroveLinuxtocreatethe deadline scheduler This scheduler maintains separate read and write queues and gives reads priority because processes are more likely to block on read than write The queues are 01 4 37536567 98122124 183 199queue 98 183 37 122 14 124 65 67 head starts at 53 Figure 11 8 C SCAN disk scheduling ,,,
397, reading and writing of data to the media are emphasized In those cases for reads performance for the two types of devices can range from equivalent to an order of magnitude advantagefor NVMdevices Writingto NVMisslowerthanreading decreasing the advantage Furthermore while write performance for HDDsi sc o n s i s t e n t throughout the life of the device write performance for NVMdevices varies dependingonhowfullthedeviceis recalltheneedforgarbagecollectionand over provisioning and how worn it is An NVMdevice near its end of life due to many erase cycles generally has much worse performance than a new device ,11.2.3 C-SCAN Scheduling,11.2.4 Selection of a Disk-Scheduling Algorithm,11.3 NVM Scheduling
398,ra bit of memoryto storethe parity Parity is one form of checksums which use modular arithmetic to compute store and compare values on fixed length words Another error detection method common in networking is a cyclic redundancy check CRCs which uses a hash function to detect multiple bit errors see http www mathpages com home kmath458 kmath458 htm Anerror correction code ECC not only detects the problem but also corrects it The correction is done by using algorithms and extra amounts of storage Thecodes varybasedonhow much extrastoragetheyneedand how manyerrorstheycancorrect Forexample disksdrivesuseper sector ECCand,11.2.4 Selection of a Disk-Scheduling Algorithm,11.3 NVM Scheduling,11.4 Error Detection and Correction
399,tingsystemscan handleonly one specific sectorsize Before it can use a drive to hold files the operating system still needs to recorditsown datastructuresonthedevice Itdoessointhreesteps The first step is to partition the device into one or more groups of blocks or pages The operating system can treat each partition as though it were a separatedevice Forinstance onepartitioncanholdafilesystemcontaining a copy of the operating system s executable code another the swap space and another a file system containing the user files Some operating systems and filesystemsperformthepartitioningaut omaticallywhenanentiredeviceisto,11.3 NVM Scheduling,11.4 Error Detection and Correction,11.5 Storage Device Management
400,tingsystemscan handleonly one specific sectorsize Before it can use a drive to hold files the operating system still needs to recorditsown datastructuresonthedevice Itdoessointhreesteps The first step is to partition the device into one or more groups of blocks or pages The operating system can treat each partition as though it were a separatedevice Forinstance onepartitioncanholdafilesystemcontaining a copy of the operating system s executable code another the swap space and another a file system containing the user files Some operating systems and filesystemsperformthepartitioningaut omaticallywhenanentiredeviceisto,,,
401,re operating system from a non fixed location on the deviceand to startthe operatingsystemrunning Let sconsider as anexamplethe boot processinWindows First note that Windows allows a drive to be divided into partitions and one partition identified as the boot partition contains the operating system and device drivers The Windows system places its boot code in the first logical block on the hard disk or first page of the NVMdevice which it terms the master boot,,,
402, con troller maintains a list of bad blocks on the disk The list is initialized during thelow levelformattingatthefactoryandisupdatedoverthelifeofthedisk Low level formatting also sets aside spare sectors not visible to the operating system Thecontrollercanbetoldtoreplaceeachbadsectorlogicallywithone of thesparesectors Thisscheme isknown as sector sparing orforwarding Atypicalbad sectortransaction mightbe as follows Theoperatingsystemtriestoreadlogicalblock 87 ,,,
403,cetofreeavailablememory In practice very few modern operating systems implement swapping in this fashion Rather systems now combine swapping with virtual memory tech niques Chapter 10 and swap pages not necessarily entire processes In fact some systems now use the terms swapping and paging interchangeably reflecting the merging of these two concepts Swap space management is another low level task of the operating sys tem Virtual memory uses secondary storage space as an extension of main memory Since drive access is much slower than memory access using swap,11.5.2 Boot Block,11.5.3 Bad Blocks,11.6 Swap-Space Management
404,her than for storage efficiency because swap space is accessed much more frequentlythanfilesystems whenitisused recallthatswapspaceisusedfor swapping and paging Internal fragmentation may increase but this trade off is acceptable because the life of data in the swap space generally is much shorter than that of files in the file system Since swap space is reinitialized at boot time any fragmentation is short lived The raw partition approach creates a fixed amount of swap space during disk partitioning Adding more swap space requires either repartitioning the device which involves moving,,,
405,her than for storage efficiency because swap space is accessed much more frequentlythanfilesystems whenitisused recallthatswapspaceisusedfor swapping and paging Internal fragmentation may increase but this trade off is acceptable because the life of data in the swap space generally is much shorter than that of files in the file system Since swap space is reinitialized at boot time any fragmentation is short lived The raw partition approach creates a fixed amount of swap space during disk partitioning Adding more swap space requires either repartitioning the device which involves moving,,,
406,corresponding page slot is available Values greater than 0 indicate that the page slot is occupied by a swapped page The value of the counter indicates the number of mappings to the swapped page For example a value of 3 indicates that the swapped page is mapped to three differentprocesses whichcanoccuriftheswappedpageisstoringaregionof memorysharedbythreeprocesses ThedatastructuresforswappingonLinux systemsareshown inFigure11 11 11 7 Storage Attachment Computers access secondary storage in three ways via host attached storage network attachedstorage and cloudstorage ,,,
407,corresponding page slot is available Values greater than 0 indicate that the page slot is occupied by a swapped page The value of the counter indicates the number of mappings to the swapped page For example a value of 3 indicates that the swapped page is mapped to three differentprocesses whichcanoccuriftheswappedpageisstoringaregionof memorysharedbythreeprocesses ThedatastructuresforswappingonLinux systemsareshown inFigure11 11 11 7 Storage Attachment Computers access secondary storage in three ways via host attached storage network attachedstorage and cloudstorage ,11.6.2 Swap-Space Location,11.6.3 Swap-Space Management: An Example,11.7 Storage Attachment
408,lls RPCs are carried via TCPorUDPover anIPnetwork usuallythesamelocal areanetwork LAN thatcarriesalldata traffictotheclients Thenetwork attachedstorageunitisusuallyimplemented as a storage arraywith software thatimplementsthe RPCinterface CIFSandNFSprovidevariouslockingfeatures allowingthesharingoffiles betweenhostsaccessinga NASwiththoseprotocols Forexample auserlogged intomultiple NASclientscanaccessherhomedirectoryfromallofthoseclients simultaneously ,,,
409,lls RPCs are carried via TCPorUDPover anIPnetwork usuallythesamelocal areanetwork LAN thatcarriesalldata traffictotheclients Thenetwork attachedstorageunitisusuallyimplemented as a storage arraywith software thatimplementsthe RPCinterface CIFSandNFSprovidevariouslockingfeatures allowingthesharingoffiles betweenhostsaccessinga NASwiththoseprotocols Forexample auserlogged intomultiple NASclientscanaccessherhomedirectoryfromallofthoseclients simultaneously ,,,
410,at APIs are used instead of existing protocols is the latency and failure scenarios of a WAN NASprotocols were designed for use in LANs whichhavelowerlatencythan WANsandaremuchlesslikelytoloseconnectiv ity between the storage user and the storage device If a LANconnection fails a system using NFSorCIFSmight hang until it recovers With cloud storage failures like that are more likely so an application simply pauses access until connectivityisrestored ,,,
411,nclude network protocols user interfaces RAIDprotection snapshots repli cation compression deduplication and encryption Some of those functions arediscussedinChapter14 Somestoragearraysinclude SSDs Anarraymaycontain only SSDs result ing in maximum performance but smaller capacity or may include a mix of SSDsa n dHDDs with the array software or the administrator selecting the best medium for a given use or using the SSDs as a cache and HDDsa sb u l k storage ,11.7.2 Network-Attached Storage,11.7.3 Cloud Storage,11.7.4 Storage-Area Networks and Storage Arrays
412, 1 Improvement of Reliability via Redundancy Let sfirstconsiderthereliabilityofa RAIDofHDDs Thechancethatsomedisk out of a set of Ndisks will fail is much greater than the chance that a specific single disk will fail Suppose that the mean time between failures MTBF o f a single disk is 100 000 hours Then the MTBFof some disk in an array of 100,11.7.3 Cloud Storage,11.7.4 Storage-Area Networks and Storage Arrays,11.8 RAID Structure
413, 1 Improvement of Reliability via Redundancy Let sfirstconsiderthereliabilityofa RAIDofHDDs Thechancethatsomedisk out of a set of Ndisks will fail is much greater than the chance that a specific single disk will fail Suppose that the mean time between failures MTBF o f a single disk is 100 000 hours Then the MTBFof some disk in an array of 100,,,
414,edundancy at lower cost by using disk striping combined with parity bits which we describe shortly ha ve been proposed These schemes have different cost performance trade offs and are classified according to levels called RAID levels We describe only the most common levels here Figure 11 15 shows them pictorially in the figure Pindicates error correcting bits and Cindicates a second copy of the data In all cases depicted in the figure four drives worth of data are stored and the extra drives are used to storeredundantinformation forfailurerecovery ,,,
415,edundancy at lower cost by using disk striping combined with parity bits which we describe shortly ha ve been proposed These schemes have different cost performance trade offs and are classified according to levels called RAID levels We describe only the most common levels here Figure 11 15 shows them pictorially in the figure Pindicates error correcting bits and Cindicates a second copy of the data In all cases depicted in the figure four drives worth of data are stored and the extra drives are used to storeredundantinformation forfailurerecovery ,,,
416,velused Rebuildingiseasiest forRAIDlevel 1 since data can be copied from another drive For the other levels we need to access all the other drives in the array to rebuild data in a faileddrive Rebuildtimescanbehoursfor RAIDlevel5rebuildsoflargedrive sets RAIDlevel 0 is used in high performance applications where data loss is not critical For example in scientific computing where a data set is loaded and explored RAIDlevel 0 works well because any drive failures would just require a repair and reloading of the data from its source RAIDlevel 1 is popular for applications that requir e high reliability with fast recovery RAID,,,
417,adduetoparitybits islower butthechancethataseconddri vewillfailbeforethefirstfaileddrive isrepairedisgreater and that willresultindata loss 11 8 5 Extensions Theconceptsof RAIDhavebeengeneralizedtootherstoragedevices including arraysoftapes andeventothebroadcastofdataoverwirelesssystems When appliedto arrays of tapes RAIDstructures are able to recoverdata evenif one ofthetapesinanarrayisdamaged Whenappliedtobroadcastofdata ablock ofdataissplitintoshortunitsandisbroadcastalongwithaparityunit Ifone oftheunitsisnotreceivedforanyreason itcanbereconstructedfromtheother,,,
418,inode has a check sum for the inode Any problem in the inode is detected when the directory is accessed This checksumming takes places throughout all ZFSstructures providing a much higher level of consistency error detection and error cor metadata block 1 address 1 checksum MB2 checksumaddress 2 metadata block 2 address checksum D1 checksum D2 data 1 data 2address Figure 11 17 ZFS checksums all metadata and data ,,,
419,ndfilesystems and Figure 11 18 b shows the ZFSmodel 11 8 7 Object Storage General purposecomputerstypicallyusefilesystemstostorecontentforusers Another approach to data storage is to start with a storage pool and place objects in that pool This approach differs from file systems in that there is no way to navigate the pool and find those objects Thus rather than being user oriented object storage is computer oriented designed to be used by programs Atypicalsequenceis 1 Createan object within thestoragepool and receivean object ID 2 Accessthe objectwhen neededviathe object ID 3 Deletethe object viatheobject ID ,,,
420,pare An efficient swap space is a key to good performance in some systems Somesystemsdedicatearawpartitiontoswapspace andothersuseafile withinthefilesysteminstead Stillothersystemsallowtheuserorsystem administratorto makethedecision byprovidingboth options Because of the amount of storage required on large systems and because storage devices fail in various ways secondary storage devices are fre quently made redundant via RAIDalgorithms These algorithms allow morethanonedrivetobeusedforagivenoperationandallowcontinued,11.8.6 Problems with RAID,11.8.7 Object Storage,11.9 Summary
421,s an access latency of 60 nanoseconds and a streaming transfer rate of 80 megabytes per second the hard disk has an access latency of 15 mil lisecondsandastreamingtransferrateof5megabytespersecond and atapedrivehasanaccesslatencyof60secondsandastreamingtransfer rateof 2 megabytespersecond a Random access causes the effective transfer rate of a device to decrease because no data are transferred during the access time For the disk described what is the effective transfer rate if an,11.8.7 Object Storage,11.9 Summary,Practice Exercises
422,thms Fordetailssee https access redhat com site docume ntation en US Red Hat Enterprise Linux 7 html Performance Tuning Guide in dex html Learn more about the default Linux bootstrap loader at https www gnu org software grub manual grub html Arelativelynewfilesystem BTRFS isdetailedin https btrfs wiki kernel or g index php Btrfs design Forthehistoryofobjectstoressee http www theregister co uk 2016 07 15 the history boys cas and object storage map ,11.9 Summary,Practice Exercises,Further Reading
423,nals Part 1 SeventhEdition MicrosoftPress 2017 Services 2012 E E Services Information Storage and Management Storing Managing and Protecting Digital Information in Classic Virtualized and Cloud Envi ronments Wiley 2012 ,Practice Exercises,Further Reading,Bibliography
424,k time is proportional to the squareroot ofthe seekdistance b Write an equation for the seek time as a function of the seek distance Thisequationshouldbeoftheform t x y L where t isthetimeinmillisecondsand Listheseekdistanceincylinders c Calculatethe totalseektimefor each of the schedulesin Exercise 11 14 Determine which schedule is the fastest has the smallest total seektime EX 43,Further Reading,Bibliography,Chapter 11 Exercises
425,s a parameter on the command line and report the total amount of headmovementrequiredby eachalgorithm P 55,Bibliography,Chapter 11 Exercises,Programming Problems
426,omputer is a major concern of operating systemdesigners Because I Odevicesvarysowidelyintheirfunc tion and speed consider a mouse a hard disk a flash drive and a tape robot varied methods are needed to control them These methods form the I Osubsystem of the kernel which separ ates the rest of the kernel from the complexitiesof managing I Odevices 489,Programming Problems,Chapter 12 I/O Systems,
427,omputer is a major concern of operating systemdesigners Because I Odevicesvarysowidelyintheirfunc tion and speed consider a mouse a hard disk a flash drive and a tape robot varied methods are needed to control them These methods form the I Osubsystem of the kernel which separ ates the rest of the kernel from the complexitiesof managing I Odevices 489,Programming Problems,Chapter 12 I/O Systems,12.1 Overview
428,t and connection methods A typical PCbus structure appears in Figure 12 1 In the figure a PCIe bus the common PC system bus connects the processor memory subsystem to fast devices and anexpansion bus connects relatively slow devices such as the keyboard and serial and USBports In the lower left portion of the figure four disks are connected together on a serial attached SCSI SAS bus plugged into an SAS controller PCIei safl e x i b l eb u st h a ts e n d sd a t ao v e ro n eo rm o r e lanes A lane is composed of two signaling pairs one pair for receiving data and the otherfortransmitting Eachlaneisthereforecomposedoffourwires andeach,Chapter 12 I/O Systems,12.1 Overview,12.2 I/O Hardware
429,s such as bad sector mapping prefetching buffering and caching 12 2 1 Memory Mapped I O Howdoestheprocessorgivecommandsanddatatoacontrollertoaccomplish anI Otransfer Theshortansweristhatthecontrollerhasoneormoreregisters for data and control signals The processor communicates with the controller by reading and writing bit patterns in these registers One way in which this communication can occur is through the use of special I Oinstructions,,,
430,g the statusregisteroverandoveruntilthe busybitbecomesclear Ifthecontroller anddevicearefast thismethodisareasonableone Butifthewaitmaybelong thehostshouldprobablyswitchtoanothertask How then doesthehostknow when the controller has become idle For some devices the host must service the device quickly or data will be lost For instance when data are streaming in on a serial port or from a keyboard the small buffer on the controller will overflowanddatawillbelostifthehostwaitstoolongbeforereturningtoread thebytes ,,,
431,nitiates I O CPU receiving interrupt transfers control to interrupt handler CPU resumes processing of interrupted taskCPU 1I O controller CPU executing checks for interrupts between instructions 5 interrupt handler processes data returns from interruptinitiates I O 32 4 7input ready output complete or error generates interrupt signal 6 Figure 12 3 Interrupt driven I O cycle ,,,
432,of a transfer a pointer to the destination of the transfer and a count of the number of bytes to be transferred A command block can be more complex including a list of sources and destinations addresses that are not contiguous This scatter gather methodallowsmultipletransferstobeexecutedviaasin gleDMAcommand The CPUwrites the address of this command block to the DMAcontroller then goes on with other work The DMAcontroller proceeds to operate the memory bus directly placing addresses on the bus to perform transfers without the help of the main CPU As i m p l e DMAcontroller is a stan dardcomponent in allmoderncomputers fromsmartphones to mainframes ,,,
433,be designed so that we can attach new devices to the com puter without rewriting the operating system And when the devices vary so widely howcantheoperatingsystemgiveaconvenient uniform I Ointerface to applications Weaddressthosequestionsnext 12 3 Application I O Interface In this section we discuss structuring techniques and interfaces for the oper ating system that enable I Odevicesto be treatedin a standard uniform way We explain for instance how an application can open a file on a disk without,,,
434,be designed so that we can attach new devices to the com puter without rewriting the operating system And when the devices vary so widely howcantheoperatingsystemgiveaconvenient uniform I Ointerface to applications Weaddressthosequestionsnext 12 3 Application I O Interface In this section we discuss structuring techniques and interfaces for the oper ating system that enable I Odevicesto be treatedin a standard uniform way We explain for instance how an application can open a file on a disk without,12.2.4 Direct Memory Access,12.2.5 I/O Hardware Summary,12.3 Application I/O Interface
435,es so thatapplications areinsulatedfromthe low leveldifferencesamong thosedevices The operating system itself as well as special applications such as database management systems may prefer to access a block device as a simplelineararrayofblocks Thismodeofaccessissometimescalled raw I O If the application performs its own buffering then using a file system would cause extra unneeded buffering Likewise if an application provides its own locking of blocks or regions then an y operating system locking services would be redundant at the least and contradictory at the worst To avoid,,,
436,ess which plugs this application into a socket created by another application to listen for any remote application to plug into the local socket and to send and receive packets over the connection To support the implementation of networkservers thesocketinterfacealsoprovidesafunctioncalled select that manages a set of sockets A call to select returns information about which sockets have a packet waiting to be received and which sockets have roomtoacceptapackettobesent Theuseof select eliminatesthepolling and busy waiting that would otherwise be necessary for network I O T h e s e functions encapsulate the essential behav iors of networks greatly facilitating,,,
437,f the HPET The trigger generates an interrupt and the operating system s clock management routines determine what the timer was for and what action to take Theprecisionoftriggersislimitedbytheresolutionofthetimer together withtheoverheadofmaintainingvirtual clocks Furthermore ifthetimerticks are used to maintain the system time of day clock the system clock can drift Driftcanbecorrectedviaprotocolsdesignedforthatpurpose suchas NTP the network time protocol which uses sophisticated latency calculations to keep acomputer sclock accurate almost toatomic clock levels Inmostcomputers ,,,
438, Asynchronousactivitiesoccurthroughoutmodernoperatingsystems Fre quently theyarenotexposedtousersorapplicationsbutratherarecontained withintheoperating systemoperation Secondarystoragedeviceandnetwork I Oare useful examples By default when an application issues a network send request or a storage device write request the operating system notes the request buffers the I O and returns to the application When possible to optimize overall system performance the operating system completes the request If a system failure occurs in the interim the application will lose any in flight requests Therefore operating systems usually put a limit on how,,,
439,ofthem completes 12 3 5 Vectored I O Someoperatingsystemsprovideanothermajorvariationof I Oviatheirappli cation interfaces Vectored I Oallows one system call to perform multiple I O operations involving multiple locations For example the UNIX readvsys tem call accepts a vector of multiple buffers and either reads from a source to that vector or writes from that vector to a destination The same transfer,,,
440,y give priority service for delay sensitive requests For instance requests from the virtual memory subsystem may take priority over applicationrequests Severalschedulingalgorithmsfordisk I Oweredetailed inSection11 2 When a kernel supports asynchronous I O i tm u s tb ea b l et ok e e pt r a c k of many I Orequestsatthesametime Forthis purpose theoperatingsystem might attach the wait queue to a device status table The kernel manages this table which contains an entry for each I Odevice as shown in Figure 12 10 Eachtableentryindicatesthedevice sty pe address andstate notfunctioning ,12.3.4 Nonblocking and Asynchronous I/O,12.3.5 Vectored I/O,12.4 Kernel I/O Subsystem
441,y give priority service for delay sensitive requests For instance requests from the virtual memory subsystem may take priority over applicationrequests Severalschedulingalgorithmsfordisk I Oweredetailed inSection11 2 When a kernel supports asynchronous I O i tm u s tb ea b l et ok e e pt r a c k of many I Orequestsatthesametime Forthis purpose theoperatingsystem might attach the wait queue to a device status table The kernel manages this table which contains an entry for each I Odevice as shown in Figure 12 10 Eachtableentryindicatesthedevice sty pe address andstate notfunctioning ,,,
442,is double buffering decouplestheproducerof datafromtheconsumer thusrelaxing timingrequirementsbetweenthem The needforthisdecouplingisillustratedinFigure12 11 whichliststheenormous differencesindevicespeedsfor typicalcomputerhardwareand interfaces A second use of buffering is to provide adaptations for devices that have different data transfer sizes Such disparities are especially common in computer networking where buffers are used widely for fragmentation and,,,
443,everuseofvirtualmemorymappingand copy on write page protection 12 4 3 Caching Acacheis a region of fast memory that holds copies of data Access to the cached copy is more efficient than access to the original For instance the instructions of the currently running process are stored on disk cached in physicalmemory andcopiedagaininthe CPU ssecondaryandprimarycaches ,,,
444,ons that enable processes to coordinate exclusive access among themselves For instance Windowsprovidessystemcalls towaituntiladeviceobjectbecomes available It also has a parameter to the OpenFile system call that declares the types of access to be permitted to other concurrent threads On these systems itisup tothe applicationsto avoiddeadlock 12 4 5 Error Handling An operating system that uses protected memory can guard against many kinds of hardware and application errors so that a complete system failure isnot the usualresultof eachminor mechanical malfunction Devicesand I O transferscanfailinmanyways eitherfortransientreasons aswhenanetwork,,,
445,ons that enable processes to coordinate exclusive access among themselves For instance Windowsprovidessystemcalls towaituntiladeviceobjectbecomes available It also has a parameter to the OpenFile system call that declares the types of access to be permitted to other concurrent threads On these systems itisup tothe applicationsto avoiddeadlock 12 4 5 Error Handling An operating system that uses protected memory can guard against many kinds of hardware and application errors so that a complete system failure isnot the usualresultof eachminor mechanical malfunction Devicesand I O transferscanfailinmanyways eitherfortransientreasons aswhenanetwork,,,
446,rotected from user access by the memory protection system Note that a kernel cannot simply deny all user access Most graphics games and video editingandplaybacksoftwareneeddirectaccesstomemory mappedgraphics controllermemorytospeedtheperformanceofthegraphics forexample The kernel might in this case provide a locking mechanism to allow a section of graphics memory representing a window on screen to be allocated to one processat atime 12 4 7 Kernel Data Structures Thekernelneedstokeepstateinformationabouttheuseof I Ocomponents It doessothroughavarietyofin kerneldatastructures suchastheopen filetable,,,
447,rotected from user access by the memory protection system Note that a kernel cannot simply deny all user access Most graphics games and video editingandplaybacksoftwareneeddirectaccesstomemory mappedgraphics controllermemorytospeedtheperformanceofthegraphics forexample The kernel might in this case provide a locking mechanism to allow a section of graphics memory representing a window on screen to be allocated to one processat atime 12 4 7 Kernel Data Structures Thekernelneedstokeepstateinformationabouttheuseof I Ocomponents It doessothroughavarietyofin kerneldatastructures suchastheopen filetable,,,
448,couldanalyzeitsloadand ifsuf ficiently low and hardware enabled power off components such as CPUsand external I Odevices CPUcores can be suspended when the system load does not require them and resumed when the load increases and more cores are needed to run the queue of threads Their state of course needs to be saved on suspend and restoredonresume Thisfeatureisneededinserversbecauseadatacenterfull,,,
449,ndinitialization Power managementof I Odevices The upper levels of the I Osubsystem access devices via the uniform interfaceprovidedby the devicedrivers 12 5 Transforming I O Requests to Hardware Operations Earlier we described the handshaking between a device driver and a device controller butwedidnotexplainhowtheoperatingsystemconnectsanappli cation request to a set of network wires or to a specific disk sector Consider ,,,
450,ndinitialization Power managementof I Odevices The upper levels of the I Osubsystem access devices via the uniform interfaceprovidedby the devicedrivers 12 5 Transforming I O Requests to Hardware Operations Earlier we described the handshaking between a device driver and a device controller butwedidnotexplainhowtheoperatingsystemconnectsanappli cation request to a set of network wires or to a specific disk sector Consider ,12.4.8 Power Management,12.4.9 Kernel I/O Subsystem Summary,12.5 Transforming I/O Requests to Hardware Operations
451, editing Because messages are exchanged between queues in adjacentmodules aqueueinonemodulemayoverflowanadjacentqueue To preventthis from occurring a queue may support flo control Without flow control a queue accepts all messages and immediately sends them on to the queue in the adjacent module without buffering them Aqueue that supports flowcontrolbuffersmessagesanddoesnotacceptmessageswithoutsufficient buffer space This process involves exchanges of control messages between queuesinadjacentmodules ,12.4.9 Kernel I/O Subsystem Summary,12.5 Transforming I/O Requests to Hardware Operations,12.6 STREAMS
452,nd generates an interrupt The interrupt is passed back up through the kernel to cause the network I Osystemcall tocomplete Now the remote system s network hardware receives the packet and an interrupt is generated The characte r is unpacked from the network proto cols and is given to the appropriate network daemon The network daemon identifies which remote login session is involved and passes the packet to the appropriate subdaemon for that session Throughout this flow there are con textswitchesandstateswitches Figure12 16 Usually thereceiverechoesthe character back to the sender that approach doublesthe work ,12.5 Transforming I/O Requests to Hardware Operations,12.6 STREAMS,12.7 Performance
453, designed to handle several basic categoriesofhardware includingblockdevices character streamdevices memory mappedfiles networksockets andprogrammedintervaltimers Thesystemcallsusuallyblocktheprocessesthatissuethem butnonblock ingandasynchronouscallsareusedbythekernelitselfandbyapplications that mustnot sleepwhile waiting foran I Ooperationtocomplete ,12.6 STREAMS,12.7 Performance,12.8 Summary
454,ibe a hybrid strategythat combines po lling sleeping and interruptsfor I O device service For each of these three strategies pure polling pure interrupts hybrid describe a computing environment in which that strategyismoreefficient thaneitherof theothers 12 5How does DMAincrease system concurrency How does it complicate hardware design 12 6Why is it important to scale up system bus and device speeds as CPU speedincreases 12 7Distinguish between a driver end and a stream module in a STREAMS operation ,12.7 Performance,12.8 Summary,Practice Exercises
455,anKaufmann 2012 Intel 2011 Intel 64 and IA 32 Architectures So ftware Developer s Manual Com bined Volumes 1 2A 2B 3A and 3B IntelCorporation 2011 ,12.8 Summary,Practice Exercises,Further Reading
456,anKaufmann 2012 Intel 2011 Intel 64 and IA 32 Architectures So ftware Developer s Manual Com bined Volumes 1 2A 2B 3A and 3B IntelCorporation 2011 ,Practice Exercises,Further Reading,Bibliography
457,yin thedesignof interrupthandlers 12 15SomeDMAcontrollers support direct virtual memory access where the targets of I Ooperations are specified as virtual addresses and a translation from virtual to physical address is performed during theDMA How does this design complicate the design of the DMA controller What aretheadvantagesof providingsuch functionality 12 16 UNIXcoordinatestheactivitiesofthekernel I Ocomponentsbymanip ulatingsharedin kerneldatastructures whereasWindowsusesobject EX 46,Further Reading,Bibliography,Chapter 12 Exercises
458,irements may be important as well including providing support for Ô¨Åle sharing and remote access to Ô¨Åles ,PART SIX FILE SYSTEM,,
459,he operating system provides a uniform logical view of stored information The operating system abstracts from the physical propertiesofitsstoragedevicestodefinealogicalstorageunit the fil Filesare mappedbytheoperatingsystemontophysicaldevices Thesestoragedevices areusuallynonvolatile sothecontentsarepersistentbetweensystemreboots 529,PART SIX FILE SYSTEM,Chapter 13 File-System Interface,
460,he operating system provides a uniform logical view of stored information The operating system abstracts from the physical propertiesofitsstoragedevicestodefinealogicalstorageunit the fil Filesare mappedbytheoperatingsystemontophysicaldevices Thesestoragedevices areusuallynonvolatile sothecontentsarepersistentbetweensystemreboots 529,PART SIX FILE SYSTEM,Chapter 13 File-System Interface,13.1 File Concept
461,method that second copy is now independent of the first and can be changed separately Afile s attributesvary from one operating systemto another but typically consist of these Name The symbolic file name is the only information kept in human readableform Identifie Thisuniquetag usuallyanumber identifiesthefilewithinthe file system it isthe non human readable name forthe file Type This information is neededfor systems that support different types of files Location This information is a pointer to a device and to the location of thefile onthat device ,,,
462,so that it can be reusedby other files and erase or mark as freethe directory entry Note that some systems allow hard links multiple names direc tory entries for the same file In this case the actual file contents is not deleteduntilthelast linkisdeleted Truncating a fil The user may want to erase the contents of a file but keep its attributes Rather than forcing the user to delete the file and then recreateit thisfunctionallowsallattributestoremainunchanged except for file length The file can then be reset to length zero and its file space canbe released ,,,
463,ch theyareinterested Forexample Javacompilersexpectsourcefilestohavea javaextension andtheMicrosoft Word word processor expects its files to end with a docor docxextension These extensionsare not always required so a user may specify a file without the extension to save typing and the application will look for a file with the given name and the extension it expects Because these extensions are not supported by the operating system they can be considered hints to the applications that operateon them Consider too the mac OSoperating system In this system each file has a type such as app for application Each file also has a creator attribute,,,
464,ednordependedonby theoperatingsystem theyaremeant mostlyto aidusersindeterminingwhat typeofcontentsthefilecontains Extensionscanbeusedorignoredbyagiven application but that isupto the application s programmer 13 1 4 File Structure File types also can be used to indicate the internal structure of the file Source and object files have structures that match the expectations of the programs thatreadthem Further certainfilesmustconformtoarequiredstructurethat,,,
465,ytes Each byte is individually addressable by its offset from the beginning or end of the file In this case the logical record size is 1 byte The filesystemautomaticallypacksandunpacksbytesintophysicaldiskblocks say 512 bytesperblock as necessary The logical record size physical block size and packing technique deter minehowmanylogicalrecordsareineachphysicalblock Thepackingcanbe done either by the user s application program or by the operating system In either case the file may be considered a sequence of blocks All the basic I O functions operate in terms of blocks The conversion from logical records to physical blocks isa relativelysimplesoftware problem ,,,
466, direct access orrelative access Here a file is made up of fixed length logical records that allow programs to read and write records rapidly in no particular order The direct access method is based on a disk model of a file since disks allow random access to any file block For direct access the file is viewed as a numbered sequence of blocks or records Thus beginning endcurrent position rewind read or write Figure 13 4 Sequential access file ,13.1.4 File Structure,13.1.5 Internal File Structure,13.2 Access Methods
467, direct access orrelative access Here a file is made up of fixed length logical records that allow programs to read and write records rapidly in no particular order The direct access method is based on a disk model of a file since disks allow random access to any file block For direct access the file is viewed as a numbered sequence of blocks or records Thus beginning endcurrent position rewind read or write Figure 13 4 Sequential access file ,,,
468, direct access orrelative access Here a file is made up of fixed length logical records that allow programs to read and write records rapidly in no particular order The direct access method is based on a disk model of a file since disks allow random access to any file block For direct access the file is viewed as a numbered sequence of blocks or records Thus beginning endcurrent position rewind read or write Figure 13 4 Sequential access file ,,,
469,ent with its declaration We can easily simulate sequential access on a direct access file by simply keeping a variable cpthat defines our current position as shown in Figure13 5 Simulatingadirect accessfileonasequential accessfile however isextremelyinefficientand clumsy 13 2 3 Other Access Methods Other access methods can be built on top of a direct access method These methodsgenerallyinvolvetheconstructionofanindexforthefile The index like an index in the back of a book contains pointers to the various blocks To find a record in the file we first search the index and then use the pointer to access the file directlyand to find the desiredrecord ,,,
470,ed in many ways The organization must allow us to insert entries to delete entries to search for a named entry and to list all the entries in the directory In this section we examine several schemes for defining the logicalstructureofthe directorysystem Whenconsideringaparticulardirectorystructure weneedtokeepinmind theoperationsthat areto beperformedon a directory Search for a fil Weneedtobe abletosearch a directorystructureto find theentryforaparticularfile Sincefileshavesymbolicnames andsimilar,13.2.2 Direct Access,13.2.3 Other Access Methods,13.3 Directory Structure
471,a c eo ft h a tfi l e releasedfor reuseby another file In the following sections we describe the most common schemes for defining th elo gic a lstr u c tu r eo fadir ec to ry 13 3 1 Single Level Directory The simplest directory structure is the single level directory All files are con tainedinthe samedirectory which is easy tosupport andunderstand Figure 13 7 ,,,
472,hisown UFDissearched Thus differentusersmayhavefileswiththesamename aslongasallthefilenames within each UFDare unique To create a file for a user the operating system searches only that user s UFDto ascertain whether another file of that name cat bo a test x data a auser 1 user 2 user 3 user 4 data a testuser file directorymaster file directory Figure 13 8 Two level directory structure ,,,
473,n a special way All directories have the same internal format One bit in each directory entry defines the entry as a file 0 or as a subdirectory 1 Special list obj spellfind count hex reorder stat mail distroot spell binprograms p e mail reorder list find prog copy prt exp last firsthex count all Figure 13 9 Tree structured directory structure ,,,
474,opies eachprogrammercanviewthecopyrather thanthe original butifoneprogrammerchanges thefile the changeswillnot appearintheother scopy Withasharedfile onlyoneactualfileexists soany changes made by one person are immediately visible to the other Sharing is listallw countwordslist listradew7countroot dictspell Figure 13 10 Acyclic graph directory structure ,,,
475,opcontinually searching through the cycle and never terminating One solution is to limit arbitrarilythenumber of directoriesthat willbe accessedduringa search A similar problem exists when we are trying to determine when a file can be deleted With acyclic graph directory structures a value of 0 in the referencecountmeansthattherearenomorereferencestothefileordirectory and the file can be deleted However when cycles exist the reference count may not be 0 even when it is no longer possible to refer to a directory or file This anomaly results from the possibilit y of self referencing or a cycle in the directorystructure Inthiscase wegenerallyneedtousea garbage collection,,,
476, ers have systems programs that automatically or through computer operator intervention copy diskfilestotapeatregularintervals onceperdayorweek or month to maintain a copy should a file system be accidentally destroyed Filesystemscanbedamagedbyhardwareproblems suchaserrorsinreading orwriting powersurgesorfailures headcrashes dirt temperatureextremes ,13.3.4 Acyclic-Graph Directories,13.3.5 General Graph Directory,13.4 Protection
477,cause the file tobe copied printed and so on Many protection mechanisms have been proposed Each has advantages and disadvantages and must be appropriate for its intended application A smallcomputersystemthatisusedbyonlyafewmembersofaresearchgroup for example may not need the same types of protection as a large corporate computer that is used for research finance and personnel operations We discuss some approaches to protection in the following sections and present amorecompletetreatmentinChapter17 ,,,
478,uatestudents Jim Dawn andJill tohelpwiththeproject The text of the book is kept in a file named book tex The protection associated with this fileisas follows Sarashould beable toinvokealloperations on thefile Jim Dawn and Jill should be able only to read and write the file they should not be allowed todeletethe file All other users should be able to read but not write the file Sara is interested in letting as many people as possible read the text so that she can obtain feedback ,,,
479,ations We want to control the creation and deletionof files in a directory In addition we probably want to control whether a user can determine the existence of a file in a directory Sometimes knowledge of the existence and name of a file is significant in itself Thus listing the contents of a directory must be a protected operation Similarly ifapathnamereferstoafileinadirectory theusermustbeallowed access to both the directory and the file In systems where files may have numerous path names such as acyclic and general graphs a given user may have different access rights to a particular file depending on the path name used ,,,
480,ncreases 13 5 1 Basic Mechanism Memorymappingafileisaccomplishedbymappingadiskblocktoapage or pages inmemory Initialaccesstothefileproceedsthroughordinarydemand,13.4.2 Access Control,13.4.3 Other Protection Approaches,13.5 Memory-Mapped Files
481,ncreases 13 5 1 Basic Mechanism Memorymappingafileisaccomplishedbymappingadiskblocktoapage or pages inmemory Initialaccesstothefileproceedsthroughordinarydemand,,,
482,te using shared mem ory by having the communicating processes memory map the same file into their virtual address spaces The memory mapped file serves as the region of shared memory between the communicating processes Figure 13 14 We have already seen this in Section 3 5 where a POSIXshared memory object is created and each communicating process memory maps the object into its address space In the following section we discuss support in the Windows APIforsharedmemoryusing memory mappedfiles 13 5 2 Shared Memory in the Windows API The general outline for creating a region of shared memory using memory mappedfilesintheWindows APIinvolvesfirstcreatinga fil mapping forthe,,,
483,sed disk space Remote file systems present challenges in reliability performance and security Distributed information systems maintain user host and access informationsothatclientsandserverscansharestateinformationtoman age use and access Sincefilesarethemaininformation storagemechanisminmostcomputer systems file protection is needed on multiuser systems Access to files canbecontrolledseparatelyforeachtypeofaccess read write execute append delete listdirectory andsoon Fileprotectioncanbeprovidedby access lists passwords or othertechniques ,13.5.1 Basic Mechanism,13.5.2 Shared Memory in the Windows API,13.6 Summary
484,sed disk space Remote file systems present challenges in reliability performance and security Distributed information systems maintain user host and access informationsothatclientsandserverscansharestateinformationtoman age use and access Sincefilesarethemaininformation storagemechanisminmostcomputer systems file protection is needed on multiuser systems Access to files canbecontrolledseparatelyforeachtypeofaccess read write execute append delete listdirectory andsoon Fileprotectioncanbeprovidedby access lists passwords or othertechniques ,13.5.2 Shared Memory in the Windows API,13.6 Summary,Practice Exercises
485,sociatedwitheachuser specifyingwhichfilesausercanaccess andhow Discusstherelative meritsof thesetwo schemes Further Reading Amultileveldirectorystructurewasfirstimplementedonthe MULTICS system Organick 1972 Most operating systems now implement multileveldirec tory structures These include Linux Love 2010 mac OS Singh 2007 Solaris McDougalland Mauro 2007 and allversionsofWindows Russi novich etal 2017 ,13.6 Summary,Practice Exercises,Further Reading
486, al 2017 M Russinovich D A Solomon andA Ionescu Win dows Internals Part 1 SeventhEdition MicrosoftPress 2017 Singh 2007 A Singh Mac OS X Internals A Systems Approach Addison Wesley 2007 ,Practice Exercises,Further Reading,Bibliography
487,mance 13 15Give an example of an application that could benefit from operating systemsupportfor random access toindexedfiles 13 16Some systems provide file sharing by maintaining a single copy of a file Other systems maintain several copies one for each of the users sharing the file Discuss the relativemeritsof each approach EX 48,Further Reading,Bibliography,Chapter 13 Exercises
488,the common denominators CHAPTER OBJECTIVES Describethedetailsofimplementinglocalfilesystemsanddirectorystruc tures Discuss block allocation and free block algorithms and trade offs Explore file system efficiency and performance issues Look at recovery from file system failures Describe the WAFLfile system as a concrete example 563,Chapter 13 Exercises,Chapter 14 File-System Implementation,
489,lsofdevicedriversandthe I OinfrastructurearecoveredinChapter 12 The basicfile system called the blockI Osubsystem in Linux needs only to issue generic commands to the appropriate device driver to read and write blocks on the storage device It issues commands to the drive based on logical block addresses It is also concerned with I Orequest scheduling Thislayeralsomanagesthememorybuffersandcachesthatholdvariousfile system directory anddatablocks Ablockinthebufferisallocatedbeforethe transfer of a mass storage block can occur When the buffer is full the buffer manager must find more buffer memory or free up buffer space to allow a,Chapter 13 Exercises,Chapter 14 File-System Implementation,14.1 File-System Structure
490, volume In UFS itis calledthe boot block InNTFS i ti st h e partition boot sector Avolume control block pervolume containsvolumedetails suchasthe number of blocks in the volume the size of the blocks a free block count andfree blockpointers andafree FCBcountand FCBpointers In UFS this iscalleda superblock InNTFS i ti ss t o r e di nt h e master fil table Adirectory structure per file system is used to organize the files In UFS thisincludesfilenamesandassociatedinodenumbers In NTFS itisstored inthemasterfiletable ,Chapter 14 File-System Implementation,14.1 File-System Structure,14.2 File-System Operations
491, volume In UFS itis calledthe boot block InNTFS i ti st h e partition boot sector Avolume control block pervolume containsvolumedetails suchasthe number of blocks in the volume the size of the blocks a free block count andfree blockpointers andafree FCBcountand FCBpointers In UFS this iscalleda superblock InNTFS i ti ss t o r e di nt h e master fil table Adirectory structure per file system is used to organize the files In UFS thisincludesfilenamesandassociatedinodenumbers In NTFS itisstored inthemasterfiletable ,,,
492,ldata blocks inmemory The BSDUNIX systemistypicalinitsuseofcacheswherever diskI Ocanbesaved Itsaveragecache hitrateof85percentshowsthatthese techniques are well worth implementing The BSD UNIX system is described fullyinAppendixC The operating structures of a file systemimplementationare summarized inFigure14 3 14 3 Directory Implementation The selection of directory allocation and directory management algorithms significantly affects the efficiency performance and reliability of the file sys tem Inthissection wediscussthetrade offsinvolvedinchoosingoneofthese algorithms ,,,
493,ldata blocks inmemory The BSDUNIX systemistypicalinitsuseofcacheswherever diskI Ocanbesaved Itsaveragecache hitrateof85percentshowsthatthese techniques are well worth implementing The BSD UNIX system is described fullyinAppendixC The operating structures of a file systemimplementationare summarized inFigure14 3 14 3 Directory Implementation The selection of directory allocation and directory management algorithms significantly affects the efficiency performance and reliability of the file sys tem Inthissection wediscussthetrade offsinvolvedinchoosingoneofthese algorithms ,14.2.1 Overview,14.2.2 Usage,14.3 Directory Implementation
494,ng systems implement a software cache to store the most recently used directory information A cachehitavoidstheneedtoconstantlyrereadtheinformationfromsecondary storage Asorted list allows a binary search and decreases the average search time However the requirement that the list be kept sorted may complicate creatinganddeletingfiles sincewemayhavetomovesubstantialamountsof,,,
495,for allfileswithina file systemtype 14 4 1 Contiguous Allocation Contiguous allocation requiresthateachfileoccupyasetofcontiguousblocks onthedevice Deviceaddressesdefinealinearorderingonthedevice Withthis ordering assumingthatonlyone jobis accessingthedevice accessingblock b 1afterblock bnormallyrequiresnoheadmovement Whenheadmovement is needed from the last sector of one cylinder to the first sector of the next cylinder theheadneedonlymovefromonetracktothenext Thus for HDDs the number of disk seeks requiredfor accessing contiguously allocated files is,,,
496,for allfileswithina file systemtype 14 4 1 Contiguous Allocation Contiguous allocation requiresthateachfileoccupyasetofcontiguousblocks onthedevice Deviceaddressesdefinealinearorderingonthedevice Withthis ordering assumingthatonlyone jobis accessingthedevice accessingblock b 1afterblock bnormallyrequiresnoheadmovement Whenheadmovement is needed from the last sector of one cylinder to the first sector of the next cylinder theheadneedonlymovefromonetracktothenext Thus for HDDs the number of disk seeks requiredfor accessing contiguously allocated files is,14.3.1 Linear List,14.3.2 Hash Table,14.4 Allocation Methods
497,for allfileswithina file systemtype 14 4 1 Contiguous Allocation Contiguous allocation requiresthateachfileoccupyasetofcontiguousblocks onthedevice Deviceaddressesdefinealinearorderingonthedevice Withthis ordering assumingthatonlyone jobis accessingthedevice accessingblock b 1afterblock bnormallyrequiresnoheadmovement Whenheadmovement is needed from the last sector of one cylinder to the first sector of the next cylinder theheadneedonlymovefromonetracktothenext Thus for HDDs the number of disk seeks requiredfor accessing contiguously allocated files is,,,
498,can continue to grow as long as free blocks are available Consequently itisnevernecessary tocompact diskspace Linked allocation does have disadvantages however The major problem is that it can be used effectively only for sequential access files To find the ith 01 2 3 45 7 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31156file jeepstart 9directory end 25 Figure 14 5 Linked allocation of disk space ,,,
499,mmon case in which we havea fileof onlyone ortwo blocks With linkedallocation we lose thespace of only one pointer per block With indexed allocation an entire index block mustbe allocated evenifonly one ortwo pointerswillbe non null Thispointraisesthequestionofhowlargetheindexblockshouldbe Every file must have an index block so we want the index block to be as small as,,,
500,address of the file in memory we can calculate immediately the address of the ith block or the next block a n dr ea ditdir ec tly For linked allocation we can also keep the address of the next block in memoryandreaditdirectly Thismethodisfineforsequentialaccess fordirect access however an access to the ith block might require iblock reads This,,,
501,from NVMstorage devices These developments aim to reduce the instruction count and overall path between the storage device and applicationaccess to thedata 14 5 Free Space Management Since storage space is limited we need to reuse the space from deleted files for new files if possible Write once optical disksallow only one write to any given sector and thus reuse is not physically possible To keep track of free disk space the system maintains a free space list The free space list records allfreedeviceblocks thosenotallocatedtosomefileordirectory Tocreatea file wesearchthefree spacelistfortherequiredamountofspaceandallocate,14.4.3 Indexed Allocation,14.4.4 Performance,14.5 Free-Space Management
502,ck andsoon Recallourear lierexample Section14 5 1 inwhich blocks 2 3 4 5 8 9 10 11 12 13 17 18 25 26 and 27 were free and the rest of the blocks were allocated In this situation we would keep a pointer to block2asthefirstfreeblock Block2wouldcontainapointertoblock3 which would point to block 4 which would point to block 5 which would point to block 8 and so on Figure 14 9 This scheme is not efficient to traverse the list we must read each block which requires substantial I Otime on HDDs Fortunately however traversing the free list is not a frequent action Usually ,,,
503,ck andsoon Recallourear lierexample Section14 5 1 inwhich blocks 2 3 4 5 8 9 10 11 12 13 17 18 25 26 and 27 were free and the rest of the blocks were allocated In this situation we would keep a pointer to block2asthefirstfreeblock Block2wouldcontainapointertoblock3 which would point to block 4 which would point to block 5 which would point to block 8 and so on Figure 14 9 This scheme is not efficient to traverse the list we must read each block which requires substantial I Otime on HDDs Fortunately however traversing the free list is not a frequent action Usually ,,,
504,more space than would a simplediskaddress theoveralllistisshorter aslongasthecountisgenerally greater than 1 Note that this method of tracking free space is similar to the extent method of allocating blocks These entries can be stored in a balanced tree ratherthan alinkedlist for effici entlookup insertion anddeletion ,,,
505,more space than would a simplediskaddress theoveralllistisshorter aslongasthecountisgenerally greater than 1 Note that this method of tracking free space is similar to the extent method of allocating blocks These entries can be stored in a balanced tree ratherthan alinkedlist for effici entlookup insertion anddeletion ,,,
506, composed of pages and take a relatively long time compared with reads or writes Anewmechanism isneededtoallowthefilesystemtoinform thestorage devicethatapageisfreeandcanbeconsideredforerasure oncetheblockcon taining the page is entirely free That mechanism varies based on the storage controller For ATA attacheddrives itis TRIM whilefor NVMe basedstorage it is the unallocate command Whatever the specific controller command this mechanism keepsstorage space availabl e for writing Without such a capabil ity thestoragedevicegetsfullandneedsgarbagecollectionandblockerasure leadingtodecreasesinstorage I Owriteperformance knownas awritecliff ,,,
507, composed of pages and take a relatively long time compared with reads or writes Anewmechanism isneededtoallowthefilesystemtoinform thestorage devicethatapageisfreeandcanbeconsideredforerasure oncetheblockcon taining the page is entirely free That mechanism varies based on the storage controller For ATA attacheddrives itis TRIM whilefor NVMe basedstorage it is the unallocate command Whatever the specific controller command this mechanism keepsstorage space availabl e for writing Without such a capabil ity thestoragedevicegetsfullandneedsgarbagecollectionandblockerasure leadingtodecreasesinstorage I Owriteperformance knownas awritecliff ,,,
508, sowemustweighitsbenefitagainstitsperformance cost when designing a file system Generally every data item associated with a fileneedstobe consideredfor itseffectonefficiency andperformance Consider forinstance howefficiencyisaffectedbythesizeofthepointers used to access data Most systemsuse either 32 bit or 64 bit pointers through outtheoperatingsystem Using32 bitpointerslimitsthesizeofafileto232 or4 GB Using64 bitpointersallowsverylargefilesizes but64 bitpointersrequire more space to store As a result the allocation and free space management methods linkedlists indexes and soon usemorestoragespace ,14.5.5 Space Maps,14.5.6 TRIMing Unused Blocks,14.6 Efficiency and Performance
509, sowemustweighitsbenefitagainstitsperformance cost when designing a file system Generally every data item associated with a fileneedstobe consideredfor itseffectonefficiency andperformance Consider forinstance howefficiencyisaffectedbythesizeofthepointers used to access data Most systemsuse either 32 bit or 64 bit pointers through outtheoperatingsystem Using32 bitpointerslimitsthesizeofafileto232 or4 GB Using64 bitpointersallowsverylargefilesizes but64 bitpointersrequire more space to store As a result the allocation and free space management methods linkedlists indexes and soon usemorestoragespace ,,,
510,y will be used again shortly Other systems cache file data using a page cache T h ep a g e cache uses virtual memory techniques to cache file data as pages rather than as file system oriented blocks Caching fi le data using virtual addresses is far more efficientthan caching through physical diskblocks as accesses interface with virtual memory rather than the file system Several systems including Solaris Linux and Windows use page caching to cache both process pages an dfi ledata Th isiskn ow nas unifie virtual memory Some versions of UNIXand Linux provide a unifie buffer cache T o illustratethebenefitsoftheunifiedbuffe rcache considerthetwoalternatives,,,
511,cureverytimethesystemboots Alternatively afilesystemcanrecorditsstatewithinthefile systemmetadata At the start of any metadata change a status bit is set to indicate that the metadataisinflux Ifallupdatestothemetadatacompletesuccessfully thefile system can clear that bit If however the status bit remains set a consistency checker isrun The consistency checker a systems program such as fsckinUNIX compares the data in the directory structure and other metadata with the state on storage and tries to fix any inconsistencies it finds The allocation and free space management algorithms dictate what types of problems the,14.6.1 Efficiency,14.6.2 Performance,14.7 Recovery
512,cureverytimethesystemboots Alternatively afilesystemcanrecorditsstatewithinthefile systemmetadata At the start of any metadata change a status bit is set to indicate that the metadataisinflux Ifallupdatestothemetadatacompletesuccessfully thefile system can clear that bit If however the status bit remains set a consistency checker isrun The consistency checker a systems program such as fsckinUNIX compares the data in the directory structure and other metadata with the state on storage and tries to fix any inconsistencies it finds The allocation and free space management algorithms dictate what types of problems the,,,
513, it to continue execution Meanwhile these log entries are replayed across the actual file system structures As the changes are made a pointer is updated to indicate which actions have completed and whic h are stillincomplete When an entire committed transaction is completed and entry is made in the log indicating that The log file is is actually a circular buffer A circular buffer writes to the endofitsspaceandthencontinues atthebeginning overwritingoldervalues as it goes We would not want the buffer to write over data that had not yet beensaved sothatscenarioisavoided Thelogmaybeinaseparatesectionof thefilesystemor evenona separatestoragedevice ,,,
514,ect ZFStherefore has no consistency checker Moredetailson ZFSarefound inSection 11 8 6 14 7 4 Backup and Restore Storagedevicessometimesfail andcaremustbetakentoensurethatthedata lost in such a failure are not lost forever To this end system programs can be used to back up data from one storage device to another such as a magnetic tapeorothersecondarystoragedevice Recoveryfromthelossofanindividual file or of an entire device may then be a matter of restoring the data from backup To minimize the copying needed we can use information from each file s directory entry For instance if the backup program knows when the last,,,
515,ect ZFStherefore has no consistency checker Moredetailson ZFSarefound inSection 11 8 6 14 7 4 Backup and Restore Storagedevicessometimesfail andcaremustbetakentoensurethatthedata lost in such a failure are not lost forever To this end system programs can be used to back up data from one storage device to another such as a magnetic tapeorothersecondarystoragedevice Recoveryfromthelossofanindividual file or of an entire device may then be a matter of restoring the data from backup To minimize the copying needed we can use information from each file s directory entry For instance if the backup program knows when the last,,,
516,tes might not bea bad ideaif yourdata areimportant 14 8 Example The WAFL File System Becausesecondary storage I Ohassuchahugeimpactonsystemperformance file systemdesignandimplementationcommandquitealotofattentionfrom system designers Some file systems are general purpose in that they can provide reasonable performance and functionality for a wide variety of file sizes file types and I Oloads Others are optimized for specific tasks in an attempt to provide better performance in those areas than general purpose,14.7.3 Other Solutions,14.7.4 Backup and Restore,14.8 Example: The WAFL File System
517,ures Operating systembackup toolsallowdatatobecopiedtomagnetic tape or other storage devices enabling the user to recover from data loss or even entire device loss due to hardware failure operating system bug or usererror Due to the fundamental role that file systems play in system operation theirperformanceandreliabilityarecr ucial Techniquessuchaslogstruc tures and caching help improve performance while log structures and RAIDimprove reliability The WAFLfile system is an example of optimiza tion of performance to match a specific I Oload ,14.7.4 Backup and Restore,14.8 Example: The WAFL File System,14.9 Summary
518, iftheyareso useful 14 6Whyisitadvantageoustotheuserforanoperatingsystemtodynami callyallocateitsinternaltables Whatarethepenaltiestotheoperating systemfordoing so Further Reading The internals of the BSD UNIX system are covered in full in McKusick et al 2015 DetailsconcerningfilesystemsforLinuxcanbefoundin Love 2010 The Google file system is described in Ghemawat et al 2003 FUSEcan be found at http fuse sourceforge net ,14.8 Example: The WAFL File System,14.9 Summary,Practice Exercises
519, iftheyareso useful 14 6Whyisitadvantageoustotheuserforanoperatingsystemtodynami callyallocateitsinternaltables Whatarethepenaltiestotheoperating systemfordoing so Further Reading The internals of the BSD UNIX system are covered in full in McKusick et al 2015 DetailsconcerningfilesystemsforLinuxcanbefoundin Love 2010 The Google file system is described in Ghemawat et al 2003 FUSEcan be found at http fuse sourceforge net ,14.9 Summary,Practice Exercises,Further Reading
520, 1993 M I Seltzer K Bostic M K McKusick and C Staelin AnImplementationofaLog StructuredFileSystemforUNIX USENIX Winter 1993 pages307 326 Seltzer et al 1995 M I Seltzer K A Smith H Balakrishnan J Chang S McMains and V N Padmanabhan File System Logging Versus Clustering APerformanceComparison USENIX Winter 1995 pages 249 264 Solomon 1998 D A Solomon Inside Windows NT SecondEdition Microsoft Press 1998 ,Practice Exercises,Further Reading,Bibliography
521,n the event of computercrashes 14 13Discuss the advantages and disadvantages of supporting links to files thatcrossmountpoints thatis thefilelinkreferstoafilethatisstored ina differentvolume 14 14Consider a file system on a disk that has both logical and physical block sizes of 512 bytes Assume that the information about each file is already in memory For each of the three allocation strategies con tiguous linked and indexed answer thesequestions EX 49,Further Reading,Bibliography,Chapter 14 Exercises
522,rexample atypicalSolarissystem may have dozens of file systems of a dozen different types as shown in the file systemlistinFigure15 2 In this book we consider only general purpose file systems It is worth noting though thattherearemanyspecial purposefilesystems Considerthe typesof filesystemsintheSolarisexamplementionedabove 597,Chapter 14 Exercises,Chapter 15 File-System Internals,
523,rexample atypicalSolarissystem may have dozens of file systems of a dozen different types as shown in the file systemlistinFigure15 2 In this book we consider only general purpose file systems It is worth noting though thattherearemanyspecial purposefilesystems Considerthe typesof filesystemsintheSolarisexamplementionedabove 597,Chapter 14 Exercises,Chapter 15 File-System Internals,15.1 File Systems
524,file systemnamespace Themountprocedureisstraightforward Theoperatingsystemisgiventhe nameofthedeviceandthe mount point thelocationwithinthefilestructure where the file system is to be attached Some operating systems require that a file system type be provided while others inspect the structures of the device,Chapter 15 File-System Internals,15.1 File Systems,15.2 File-System Mounting
525,operating systems on a single system How does the system know which one to boot A b oot loader that understands multi ple file systems and multiple operating systems can occupy the boot space Once loaded it can boot one of the operating systems available on the drive The drive can have multiple partitions each containing a different type of file system and a differentoperating system Note that if the boot loader does not understandaparticularfile systemformat anoperatingsystemstoredonthat filesystemisnotbootable Thisisoneofthereasonsonlysomefilesystemsare supportedasroot filesystemsfor any givenoperating system ,15.1 File Systems,15.2 File-System Mounting,15.3 Partitions and Mounting
526,cludingremotefilesystems wediscussthatchallenge aswell Finally we considerwhat todoabout conflicting actions occurring on shared files For instance if multiple users are writing to a file should all the writes be allowed to occur or should the operating system protect the users actions from one another 15 4 1 Multiple Users When an operating system accommodates multiple users the issues of file sharing filenaming andfileprotectionbecomepreeminent Givenadirectory structure that allows files to be shared by users the system must mediate the filesharing Thesystemcaneitherallowausertoaccessthefilesofotherusers,15.2 File-System Mounting,15.3 Partitions and Mounting,15.4 File Sharing
527,cludingremotefilesystems wediscussthatchallenge aswell Finally we considerwhat todoabout conflicting actions occurring on shared files For instance if multiple users are writing to a file should all the writes be allowed to occur or should the operating system protect the users actions from one another 15 4 1 Multiple Users When an operating system accommodates multiple users the issues of file sharing filenaming andfileprotectionbecomepreeminent Givenadirectory structure that allows files to be shared by users the system must mediate the filesharing Thesystemcaneitherallowausertoaccessthefilesofotherusers,,,
528,heimplementation Theuseofthesemethods allows very dissimilar file system types to be implemented within the same structure including network file systems such as NFS Users can access files containedwithinmultiplefilesystemsonthelocaldriveorevenonfilesystems availableacross the network Data structures and procedures are used to isolate the basic system call functionality from the implementation details Thus the file system imple mentation consists of three major layers as depicted schematically in Figure 15 5 The first layer is the file system interface based on the open read write and close callsand onfiledescriptors ,15.4 File Sharing,15.4.1 Multiple Users,15.5 Virtual File Systems
529,lemented method involves manually transferring files between machines via programs like ftp The second major method uses a distributed fil system DFS in which remote directories are visiblefromalocalmachine Insomeways thethirdmethod the World Wide Web is a reversion to the first A browser is needed to gain access to the remote files and separate operations essentially a wrapper for ftp a r eu s e d totransferfiles Increasingly cloudcom puting Section1 10 5 isbeingusedfor file sharing as well ,15.4.1 Multiple Users,15.5 Virtual File Systems,15.6 Remote File Systems
530,ounted file operation requests are sent on behalf of the user across the network to the server via the DFSprotocol Typically a file open request is sent along with the IDof the requesting user The server then applies the standard access checks to determine if the user has credentials to access the file in the mode requested The request is either allowed or denied If it is allowed a file handle is returned to the client appli cation andtheapplicationthencanperformread write andotheroperations on the file The client closes the file when access is completed The operating system may apply semantics similar to those for a local file system mount or may usedifferentsemantics ,,,
531,n one location informationthatiscurrentlyscatteredinvariousfilesoneachsystem orindifferentdistributedinformationservices 15 6 3 Failure Modes Local file systems can fail for a variety of reasons including failure of the drive containing the file system corruption of the directory structure or other disk management information collectively called metadata disk controller failure cable failure and host adapter failure User or system administrator failure can also cause files to be lost or entire directories or volumes to be deleted Manyofthesefailureswillcauseahosttocrashandanerrorcondition tobedisplayed andhumaninterventionmayberequiredtorepairthedamage ,,,
532,n one location informationthatiscurrentlyscatteredinvariousfilesoneachsystem orindifferentdistributedinformationservices 15 6 3 Failure Modes Local file systems can fail for a variety of reasons including failure of the drive containing the file system corruption of the directory structure or other disk management information collectively called metadata disk controller failure cable failure and host adapter failure User or system administrator failure can also cause files to be lost or entire directories or volumes to be deleted Manyofthesefailureswillcauseahosttocrashandanerrorcondition tobedisplayed andhumaninterventionmayberequiredtorepairthedamage ,,,
533,e issues are addressed in the industry standard NFSVersion 4 in which NFSis made stateful to improve its security performance and functionality 15 7 Consistency Semantics Consistencysemanticsrepresentanimportantcriterionforevaluatinganyfile systemthat supportsfilesharing Thesesemanticsspecifyhow multipleusers ofasystemaretoaccessasharedfilesimultaneously Inparticular theyspecify whenmodificationsofdatabyoneuserw illbeobservablebyotherusers These semantics aretypicallyimplementedascodewiththe filesystem Consistency semantics are directly related to the process synchronization algorithmsofChapter6 However thecomplexalgorithmsofthatchaptertend,15.6.2 Distributed Information Systems,15.6.3 Failure Modes,15.7 Consistency Semantics
534,rced on scheduling accesses 15 7 3 Immutable Shared Files Semantics A unique approach is that of immutable shared files Once a file is declared as shared by its creator it cannot be modified An immutable file has two key properties its name may not be reused and its contents may not be altered Thus the name of an immutable file signifies that the contents of the file are fixed Theimplementationofthesesemanticsinadistributedsystem Chapter 19 issimple becausethe sharing isdisciplined read only ,,,
535,rced on scheduling accesses 15 7 3 Immutable Shared Files Semantics A unique approach is that of immutable shared files Once a file is declared as shared by its creator it cannot be modified An immutable file has two key properties its name may not be reused and its contents may not be altered Thus the name of an immutable file signifies that the contents of the file are fixed Theimplementationofthesesemanticsinadistributedsystem Chapter 19 issimple becausethe sharing isdisciplined read only ,,,
536,rced on scheduling accesses 15 7 3 Immutable Shared Files Semantics A unique approach is that of immutable shared files Once a file is declared as shared by its creator it cannot be modified An immutable file has two key properties its name may not be reused and its contents may not be altered Thus the name of an immutable file signifies that the contents of the file are fixed Theimplementationofthesesemanticsinadistributedsystem Chapter 19 issimple becausethe sharing isdisciplined read only ,,,
537,nterest The figure shows three independent file systems of machines named U S1 a n d S2 At this point on each machine only the local files can be accessed Figure 15 7 a shows the effects of mounting S1 usr shared over U usr local This figure depicts the view users on Uhave of their file system After the mountiscomplete theycanaccessanyfilewithinthe dir1directoryusingthe prefix usr local dir1 Theoriginaldirectory usr local onthatmachine isno longervisible Subject to access rights accreditation any file system or any directory within a file system can be mounted remotely on top of any local directory ,15.7.2 Session Semantics,15.7.3 Immutable-Shared-Files Semantics,15.8 NFS
538,nterest The figure shows three independent file systems of machines named U S1 a n d S2 At this point on each machine only the local files can be accessed Figure 15 7 a shows the effects of mounting S1 usr shared over U usr local This figure depicts the view users on Uhave of their file system After the mountiscomplete theycanaccessanyfilewithinthe dir1directoryusingthe prefix usr local dir1 Theoriginaldirectory usr local onthatmachine isno longervisible Subject to access rights accreditation any file system or any directory within a file system can be mounted remotely on top of any local directory ,,,
539,is used mainly for administrative purposes forinstance fornotifyingallclientsthattheserverisgoingdown Onlythroughadditionanddeletionofentriesinthislistcantheserverstatebe affected by the mount protocol Usually asystemhasastaticmountingpreconfigurationthatisestablished atboottime etc vfstab inSolaris however thislayoutcanbemodified In addition to the actual mount procedure the mount protocol includes several other procedures such as unmount and return export list 15 8 3 The NFS Protocol TheNFSprotocol provides a set of RPCs for remote file operations The proce duressupport thefollowing operations ,,,
540,is used mainly for administrative purposes forinstance fornotifyingallclientsthattheserverisgoingdown Onlythroughadditionanddeletionofentriesinthislistcantheserverstatebe affected by the mount protocol Usually asystemhasastaticmountingpreconfigurationthatisestablished atboottime etc vfstab inSolaris however thislayoutcanbemodified In addition to the actual mount procedure the mount protocol includes several other procedures such as unmount and return export list 15 8 3 The NFS Protocol TheNFSprotocol provides a set of RPCs for remote file operations The proce duressupport thefollowing operations ,,,
541,sal scheme is needed since the layout of each client s logical name space is unique dictated by the mounts the client has p e r f o r m e d I tw o u l db em u c hm o r ee f fi c i e n tt oh a n das e r v e rap a t hn a m e and receive a target vnode once a mount point is encountered At any point however theremightbeanothermountpointfortheparticularclientofwhich thestatelessserverisunaware ,,,
542,30 seconds Furthermore writes to a file at one site may or may not be visible at other sites that have this file open for reading New opens of a file observe only the changes that have already been flushed to the server Thus NFSprovides neither strict emulation of UNIXsemantics nor the session semantics of Andrew Section 15 7 2 In spite of these drawbacks the utilityandgoodperformanceofthemechanismmakeitthemostwidelyused multi vendor distributedsysteminoperation 15 9 Summary General purposeoperatingsystemsprovidemanyfile systemtypes from special purposethrough general ,,,
543,30 seconds Furthermore writes to a file at one site may or may not be visible at other sites that have this file open for reading New opens of a file observe only the changes that have already been flushed to the server Thus NFSprovides neither strict emulation of UNIXsemantics nor the session semantics of Andrew Section 15 7 2 In spite of these drawbacks the utilityandgoodperformanceofthemechanismmakeitthemostwidelyused multi vendor distributedsysteminoperation 15 9 Summary General purposeoperatingsystemsprovidemanyfile systemtypes from special purposethrough general ,15.8.4 Path-Name Translation,15.8.5 Remote Operations,15.9 Summary
544,cesstothesame file Semantics models include UNIX session and immutable shared files semantics NFSis an example of a remote file system providing clients with seam lessaccesstodirectories files andevenentirefilesystems Afull featured remotefilesystemincludesacommunicationprotocolwithremoteopera tions and path name translation Practice Exercises 15 1Explainhowthe VFSlayerallowsanoperatingsystemtosupportmul tipletypesof filesystemseasily 15 2Why have morethanone filesystemtypeon agivensystem ,15.8.5 Remote Operations,15.9 Summary,Practice Exercises
545, 2007 McKusick et al 2015 M K McKusick G V Neville Neil and R N M Wat son The Design and Implementation of the FreeBSD UNIX Operating System Second Edition Pearson 2015 Ousterhout 1991 J Ousterhout The Role of Distributed State In CMU Computer Science a 25th Anniversary Commemorative R F Rashid Ed Addison Wesley 1991 ,15.9 Summary,Practice Exercises,Further Reading
546, 2007 McKusick et al 2015 M K McKusick G V Neville Neil and R N M Wat son The Design and Implementation of the FreeBSD UNIX Operating System Second Edition Pearson 2015 Ousterhout 1991 J Ousterhout The Role of Distributed State In CMU Computer Science a 25th Anniversary Commemorative R F Rashid Ed Addison Wesley 1991 ,Practice Exercises,Further Reading,Bibliography
547,mounttherootfilesystemautomaticallyat boot time 15 9Why do operating systems require file systems other than root to be mounted EX 51,Further Reading,Bibliography,Chapter 15 Exercises
548,ocesses or users to the resources deÔ¨Åned by a computer system This mechanism must provid e a means for specifying the con trols to be imposed together with a means of enforcing them ,PART SEVEN SECURITY AND PROTECTION,,
549,atcontaindatapertain ing to corporate operations may be of interest to unscrupulous competitors Furthermore loss of such data whether by accident or fraud can seriously impairtheabilityofthecorporationtofunction Evenrawcomputingresources areattractivetoattackersforbitcoinmining forsendingspam andasasource fromwhich to anonymously attack other systems 621,PART SEVEN SECURITY AND PROTECTION,Chapter 16 Security,
550,atcontaindatapertain ing to corporate operations may be of interest to unscrupulous competitors Furthermore loss of such data whether by accident or fraud can seriously impairtheabilityofthecorporationtofunction Evenrawcomputingresources areattractivetoattackersforbitcoinmining forsendingspam andasasource fromwhich to anonymously attack other systems 621,PART SEVEN SECURITY AND PROTECTION,Chapter 16 Security,16.1 The Security Problem
551,alicious manner rather thansimplyperformingitsstatedfunction iscalleda Trojan horse Ifthepr o gramisexecutedinanotherdomain itcanescalateprivileges Asanexample consider a mobile app that purports to provide some benign functionality say a flashlight app but that meanwhile surreptitiously accesses the user s contacts or messagesandsmugglesthemto someremoteserver A classic variation of the Trojan horse is a Trojan mule program that emulates a login program An unsuspecting user starts to log in at a terminal computer or web page and notices that she has apparently mistyped her,Chapter 16 Security,16.1 The Security Problem,16.2 Program Threats
552,alicious manner rather thansimplyperformingitsstatedfunction iscalleda Trojan horse Ifthepr o gramisexecutedinanotherdomain itcanescalateprivileges Asanexample consider a mobile app that purports to provide some benign functionality say a flashlight app but that meanwhile surreptitiously accesses the user s contacts or messagesandsmugglesthemto someremoteserver A classic variation of the Trojan horse is a Trojan mule program that emulates a login program An unsuspecting user starts to log in at a terminal computer or web page and notices that she has apparently mistyped her,,,
553,size in question halting only when a NULL 0 byte is encountered If such a byte occurs before the BUFFER SIZEis reached the program behaves as expected But the copy could easily exceed the buffer size what then The answer is that the outcome of an overflow depends largely on the lengthoftheoverflowandtheoverflowingcontents Figure16 3 Italsovaries greatly with the code generated by t he compiler which may be optimized,,,
554,apar ticular problem for users of PCs UNIXand other multiuser operating systems generally are not susceptible to viruses because the executable programs are protected from writing by the operating system Even if a virus does infect such a program its powers usually are limited because other aspects of the systemareprotected Viruses are usually borne via spam e mail and phishing attacks They can also spread when users download viral programs from Internet file sharing servicesorexchangeinfecteddisks Adistinctioncanbemadebetweenviruses which require human activity and worms which use a network to replicate without any helpfrom humans ,,,
555,lnet and others were enabled by default when the system was installed to a model in which almost all services are disabled at installation time and must specifically be enabled by system administrators Such changes reduce the system s attacksurface All hackers leave tracks behind them whether via network traffic pat terns unusualpackettypes orothermean s Forthatreason hackersfrequently launch attacks from zombie systems independent systems or devices that have been compromised by hackers but that continue to serve their own ers while being used without the owner s knowledge for nefarious purposes ,16.2.2 Code Injection,16.2.3 Viruses and Worms,16.3 System and Network Threats
556,ve many options for mounting network attacks As shown in Figure 16 6 an attacker can opt to remain passive and intercept network traffic an attack commonly referred to as sniffin often obtaining useful information about the types of sessions 1LorelynMedina Shutterstock ,,,
557,ttacker could cause all authenticationtobeblockedbypurposelymakingincorrectattemptstoaccess allaccounts Similarly afirewallthatautomaticallyblockscertainkindsoftraf fic could be induced to block that traffic when it should not These examples suggest that programmers and systems managers need to fully understand thealgorithmsandtechnologiestheyaredeploying Finally computerscience classes are notorious sources of accidental system DoSattacks Consider the first programming exercises in which students learn to create subprocesses or threads A common bug involves spawning subprocesses infinitely The system sfreememoryand CPUresourcesdon t stand achance ,,,
558,sforproductionapplications In an isolated computer the operating system can reliably determine the sender and recipient of all interprocess communication since it controls all communication channels in the computer In a network of computers the situation is quite different A networked computer receives bits from the wire with no immediate and reliable way of determining what machine or applicationsentthosebits Similarly thecomputersendsbitsontothenetwork with no way of knowing who might eventually receive them Additionally when either sending or receiving the system has no way of knowing if an eavesdropperlistenedto the communication ,,,
559,sforproductionapplications In an isolated computer the operating system can reliably determine the sender and recipient of all interprocess communication since it controls all communication channels in the computer In a network of computers the situation is quite different A networked computer receives bits from the wire with no immediate and reliable way of determining what machine or applicationsentthosebits Similarly thecomputersendsbitsontothenetwork with no way of knowing who might eventually receive them Additionally when either sending or receiving the system has no way of knowing if an eavesdropperlistenedto the communication ,16.3.2 Denial of Service,16.3.3 Port Scanning,16.4 Cryptography as a Security Tool
560,f cryptography that pertainto operatingsystems 16 4 1 Encryption Becauseitsolvesawidevarietyofcommunicationsecurityproblems encryp tionisusedfrequentlyinmanyaspectsofmoderncomputing Itisusedtosend messages securely across a network as well as to protect database data files andevenentiredisksfromhavingtheircontentsreadbyunauthorizedentities An encryption algorithm enables the s ender of a message to ensure that only a computer possessing a certain key can read the message or to ensure that the writer of data is the only reader of the data Encryption of messages is an ancient practice of course and there have been many encryption algorithms ,,,
561,capsulatesthe TCP packetinan IPpacket whichitsimilarlypassesdowntothe data link layer to betransmittedacrossthenetworktoitspeeronthedestinationcomputer This IPpeerthendeliversthe TCPpacketuptothe TCPpeeronthatmachine Seven 4LorelynMedina Shutterstock ,,,
562,ll executed backup plan so that the contents of the files can be restored without thekey 16 4 3 An Example TLS Transport Layer Security TLS is a cryptographic protocol that enables two computerstocommunicatesecurely thatis sothateachcanlimitthesender and receiver of messages to the other It is perhaps the most commonly used cryptographic protocol on the Internet today since it is the standard protocol by which web browsers communicate securely with web servers For completeness we should note that TLSevolved from SSL Secure Sock ets Layer which was designed by Netscape It is described in detail in https tools ietf org html rfc5246 ,,,
563, system depends on the ability to identify the programs and processes currently executing whichinturndependsontheabilitytoidentifyeachuserofthesystem Users normally identify themselves but how do we determine whether a user s identity is authentic Generally user authentication is based on one or more of three things the user s possession of something a key or card the user s knowledgeofsomething auseridentifierandpassword oranattributeofthe user fingerprint retinapattern or signature ,16.4.2 Implementation of Cryptography,16.4.3 An Example: TLS,16.5 User Authentication
564,attacks where all words word variations and common passwordsare tried Inadditiontobeingguessed passwordscanbeexposedasaresultofvisual or electronic monitoring An intruder can look over the shoulder of a user shoulder surfin when the user is logging in and can learn the password easily by watching the keyboard Alternatively anyone with access to the network on which a computer resides can seamlessly add a network monitor allowing him to sniff or watch all data being transferred on the network including user IDs and passwords Encrypting the data stream containing the password solves this problem Even such a system could have passwords,,,
565,attacks where all words word variations and common passwordsare tried Inadditiontobeingguessed passwordscanbeexposedasaresultofvisual or electronic monitoring An intruder can look over the shoulder of a user shoulder surfin when the user is logging in and can learn the password easily by watching the keyboard Alternatively anyone with access to the network on which a computer resides can seamlessly add a network monitor allowing him to sniff or watch all data being transferred on the network including user IDs and passwords Encrypting the data stream containing the password solves this problem Even such a system could have passwords,,,
566,changed from session to session A new password is selected either by the system or by the user at the end of each session and that password mustbeusedforthenextsession Insuchacase evenifapasswordisusedby anunauthorizedperson thatpersoncanuseitonlyonce Whenthelegitimate user tries to use a now invalid password at the next session he discovers the securityviolation Stepscan thenbe takento repairthe breachedsecurity 16 5 3 Securing Passwords One problem with all these approaches is the difficulty of keeping the pass word secret within the computer How can the system store a password securely yet allow its use for authentication when the user presents her pass ,,,
567,s well as finger length finger width and line patterns These devices are currently too large and expensive to be used for normal computerauthentication Fingerprintreadershavebecomeaccurateandcost effective Thesedevices readfingerridgepatternsandconvertthemintoasequenceofnumbers Over time they can store a set of sequences to adjust for the location of the finger on the reading pad and other factors Software can then scan a finger on the padandcompareitsfeatureswiththesestoredsequencestodetermineifthey match Ofcourse multipleuserscan have profilesstored and the scanner can differentiate among them A very accura te two factor authentication scheme,,,
568,s well as finger length finger width and line patterns These devices are currently too large and expensive to be used for normal computerauthentication Fingerprintreadershavebecomeaccurateandcost effective Thesedevices readfingerridgepatternsandconvertthemintoasequenceofnumbers Over time they can store a set of sequences to adjust for the location of the finger on the reading pad and other factors Software can then scan a finger on the padandcompareitsfeatureswiththesestoredsequencestodetermineifthey match Ofcourse multipleuserscan have profilesstored and the scanner can differentiate among them A very accura te two factor authentication scheme,,,
569,sreviewedandupdatedperiodica llytoensurethatitisstillpertinentand stillfollowed 16 6 2 Vulnerability Assessment How can we determine whether a security policy has been correctly imple mented The best way is to execute a v ulnerability assessment Such assess ments can cover broad ground from social engineering through risk assess menttoportscans Risk assessment forexample attemptstovaluetheassets of the entity in question a program a management team a system or a facil ity and determine the odds that a security incident will affect the entity and,16.5.4 One-Time Passwords,16.5.5 Biometrics,16.6 Implementing Security Defenses
570,sreviewedandupdatedperiodica llytoensurethatitisstillpertinentand stillfollowed 16 6 2 Vulnerability Assessment How can we determine whether a security policy has been correctly imple mented The best way is to execute a v ulnerability assessment Such assess ments can cover broad ground from social engineering through risk assess menttoportscans Risk assessment forexample attemptstovaluetheassets of the entity in question a program a management team a system or a facil ity and determine the odds that a security incident will affect the entity and,,,
571,sreviewedandupdatedperiodica llytoensurethatitisstillpertinentand stillfollowed 16 6 2 Vulnerability Assessment How can we determine whether a security policy has been correctly imple mented The best way is to execute a v ulnerability assessment Such assess ments can cover broad ground from social engineering through risk assess menttoportscans Risk assessment forexample attemptstovaluetheassets of the entity in question a program a management team a system or a facil ity and determine the odds that a security incident will affect the entity and,,,
572,r afterthefact The types of inputs examined to detect intrusive activity These may include user shell commands process system calls and network packet headers or contents Some forms of intrusion might be detected only by correlating informationfromseveralsuch sources Therangeofresponsecapabilities Simpleformsofresponseincludealert ing an administrator to the potential intrusion or somehow halting the potentially intrusive activity for example killing a process engaged in suchactivity Inasophisticatedformofresponse asystemmighttranspar entlydivertanintruder sactivitytoa honeypot afalseresourceexposed,,,
573,res anomalyalgorithms andotheralgorithmsandtocombinetheresultstoarrive ata moreaccurate anomaly detectionrate 16 6 4 Virus Protection Aswehaveseen virusescananddowreakhavoconsystems Protectionfrom viruses thus is an important security concern Antivirus programs are often used to provide this protection Some of these programs are effective against only particular known viruses They work by searching all the programs on a system for the specific pattern of instructions known to make up the virus ,,,
574, Internet or DMZcomputers to the company computers Optionally controlled communications may be allowed between the DMZand one company computerormore Forinstance awebserveronthe DMZmayneedtoquerya database server on the corporate network With a firewall however access is contained and any DMZsystemsthat are broken into stillareunable to access the company computers Of course a firewall itself must be secure and attack proof Otherwise its ability to secure connections can be compromised Furthermore firewalls do not prevent attacks that tunnel or travel within protocols or connections,,,
575, Internet or DMZcomputers to the company computers Optionally controlled communications may be allowed between the DMZand one company computerormore Forinstance awebserveronthe DMZmayneedtoquerya database server on the corporate network With a firewall however access is contained and any DMZsystemsthat are broken into stillareunable to access the company computers Of course a firewall itself must be secure and attack proof Otherwise its ability to secure connections can be compromised Furthermore firewalls do not prevent attacks that tunnel or travel within protocols or connections,,,
576,at a requestislegitimate Usesecurecommunication when possible Physically protectcomputerhardware Configuretheoperatingsystemtominimizetheattacksurface disableall unused services Configure system daemons privileges applications and services to be as secureas possible Use modern hardware and software as they are likely to have up to date securityfeatures Keepsystemsand applicationsup todateand patched Only run applications from trusted sources such as those that are code signed ,,,
577,at a requestislegitimate Usesecurecommunication when possible Physically protectcomputerhardware Configuretheoperatingsystemtominimizetheattacksurface disableall unused services Configure system daemons privileges applications and services to be as secureas possible Use modern hardware and software as they are likely to have up to date securityfeatures Keepsystemsand applicationsup todateand patched Only run applications from trusted sources such as those that are code signed ,,,
578,ject to ensure that programs run by a userdonotgetgreateraccesstothesystemthantheuserisauthorizedtohave Asubjectis used to track and manage permissions for each program that a user runs It is composed of the user s access token and the program acting on behalf of the user Since Windows 10 operates with a client server model two classes of subjects are used to control access simple subjects and server subjects An example of a simple subject is the typical application program thatauserexecutesaftershelogson Thesimplesubjectisassigneda security,16.6.7 Other Solutions,16.6.8 Security Defenses Summarized,16.7 An Example: Windows 10
579,access malicious destruction or a lteration and accidental introduc tion of inconsistency It is easier to protect against accidental loss of data consistency than to protect against malicious access to the data Absolute protectionoftheinformationstoredinacomputersystemfrommalicious abuse is not possible but the cost to the perpetrator can be made suffi ciently high to deter most if not all attempts to access that information without properauthority Several types of attacks can be launched against programs and against individual computers or the masses Stack and buffer overflow tech ,16.6.8 Security Defenses Summarized,16.7 An Example: Windows 10,16.8 Summary
580,cryptography in computer systems Discussions concerning protection of digitalsignaturesareofferedby Akl 1983 Davies 1983 Denning 1983 and Denning 1984 Complete cryptography information is presented in Schneier 1996 and Katzand Lindell 2008 Asymmetrickeyencryptionisdiscussedat https www ee stanford edu hellman publications 24 pdf TheTLScryptographic protocol is described in detail at https tools ietf org html rfc5246 T h e nmapnetwork scanning tool is from http www insecure org nmap For more information on port scans,16.7 An Example: Windows 10,16.8 Summary,Further Reading
581,Book of Email Viruses A m e r i c a n Eagle Publications 2002 Schneier 1996 B Schneier Applied Cryptography Second Edition John Wiley and Sons 1996 Stallings and Brown 2011 W Stallings and L Brown Computer Security Principles and Practice SecondEdition PrenticeHall 2011 ,16.8 Summary,Further Reading,Bibliography
582,the sender To w h a tu sesc a nsu c ha nen c ryptio nb epu t 16 12Discuss how the asymmetric encryption algorithm can be used to achieve the following goals a Authentication the receiver knows that only the sender could have generatedthemessage b Secrecy onlythe receivercan decryptthe message c Authentication and secrecy only the receiver can decrypt the message andthereceiverknowsthatonlythesendercouldhave generatedthe message EX 52,Further Reading,Bibliography,Chapter 16 Exercises
583,s sothat untrustworthy usersmightsafelyshare acommon logicalname space suchasadirectoryoffiles oracommonphysicalnamespace suchasmemory Modernprotectionconceptshaveevolved toincreasethereliabilityofanycom plex system that makes use of shared resources and is connected to insecure communications platformssuch as the Internet 667,Chapter 16 Exercises,Chapter 17 Protection,
584,s sothat untrustworthy usersmightsafelyshare acommon logicalname space suchasadirectoryoffiles oracommonphysicalnamespace suchasmemory Modernprotectionconceptshaveevolved toincreasethereliabilityofanycom plex system that makes use of shared resources and is connected to insecure communications platformssuch as the Internet 667,Chapter 16 Exercises,Chapter 17 Protection,17.1 Goals of Protection
585,nets of UNIX that a user should not run as root InUNIX only the root user can execute privileged commands Most users innately respect that fearing an accide ntal delete operation for which there is nocorrespondingundelete Becauserootisvirtuallyomnipotent thepotential for human error when a user acts as root is grave and its consequences far reaching Now consider that rather than human error damage may result from malicious attack Avirus launched by an accidental click on an attachment is one example Another is a buffer overflo w or other code injection attack that is successfully carried out against a root privileged process or in Windows ,Chapter 17 Protection,17.1 Goals of Protection,17.2 Principles of Protection
586,centric rings with ring iproviding a subset of the functionality of ring jfor any j i The innermost ring ring 0 t h u sp r o v i d e s thefullsetof privileges This patternisshown inFigure17 1 When the system boots it boots to the highest privilege level Code at thatlevelperformsnecessaryinitializationbeforedroppingtoalessprivileged level In orderto returnto a higher privilegelevel code usually calls a special instruction sometimes referred to as a gate which provides a portal between rings The syscall instruction inIntel isoneexample Callingthisinstruction shiftsexecutionfromusertokernelmode Aswehaveseen executingasystem,17.1 Goals of Protection,17.2 Principles of Protection,17.3 Protection Rings
587,Apple sWatchTower also known as KPP for KernelPatch Protection fori OS 17 4 Domain of Protection Rings of protection separate functions into domains and order them hierar chically A generalization of rings is using domains without a hierarchy A computer system can be treated as a collection of processes and objects By,17.2 Principles of Protection,17.3 Protection Rings,17.4 Domain of Protection
588,a mechanism is available to allow domain switching enablingtheprocesstoswitchfromonedomaintoanother Wemay alsowanttoallowthecontentofadomaintobechanged Ifwecannotchange the content of a domain we can provide the same effect by creating a new domainwiththechangedcontentandswitchingtothatnewdomainwhenwe want to change the domaincontent D1 O3 read write O1 read write O2 execute O1 execute O3 read O2 write O4 print D2 D3 Figure 17 4 System with three protection domains ,,,
589,ed on an executable file through chmod s whoever executes the file temporarily assumestheidentityofthefileowner Thatmeansifausermanagestocreatea filewiththeuserID root andthesetuidbitenabled anyonewhogainsaccess toexecutethefilebecomesuser root forthedurationoftheprocess slifetime If that strikes you as alarming it is with good reason Because of their potential power setuid executable binaries are expected to be both sterile affecting only necessary files under specific constraints and hermetic for example tamperproof and impossible to subvert Setuid programs need to,,,
590, write onto files F1and F3 T h el a s e r printercan beaccessedonly by a processexecutingin domain D2 Theaccess matrixschemeprovidesuswiththemechanismforspecifyinga varietyofpolicies Themechanismconsistsofimplementingtheaccessmatrix andensuringthatthesemanticpropertieswehaveoutlinedhold Morespecif ically we must ensure that a process executing in domain Dican access only thoseobjects specifiedinrow i and then only as allowed by the access matrix entries The access matrix can implement policy decisions concerning protection Thepolicydecisionsinvolvewhich rightsshouldbeincludedinthe i j thentry ,,,
591, write onto files F1and F3 T h el a s e r printercan beaccessedonly by a processexecutingin domain D2 Theaccess matrixschemeprovidesuswiththemechanismforspecifyinga varietyofpolicies Themechanismconsistsofimplementingtheaccessmatrix andensuringthatthesemanticpropertieswehaveoutlinedhold Morespecif ically we must ensure that a process executing in domain Dican access only thoseobjects specifiedinrow i and then only as allowed by the access matrix entries The access matrix can implement policy decisions concerning protection Thepolicydecisionsinvolvewhich rightsshouldbeincludedinthe i j thentry ,17.4.2 Example: UNIX,17.4.3 Example: Android Application IDs,17.5 Access Matrix
592,memorytechniquesareoftenusedformanagingthistable Inaddition it is difficult to take advantage of special groupings of objects or domains For example if everyone can read a particular object this object must have aseparateentryineverydomain 17 6 2 Access Lists for Objects Each column in the access matrix can be implemented as an access list for one object as described in Section 13 4 2 Obviously the empty entries can be,17.4.3 Example: Android Application IDs,17.5 Access Matrix,17.6 Implementation of the Access Matrix
593,memorytechniquesareoftenusedformanagingthistable Inaddition it is difficult to take advantage of special groupings of objects or domains For example if everyone can read a particular object this object must have aseparateentryineverydomain 17 6 2 Access Lists for Objects Each column in the access matrix can be implemented as an access list for one object as described in Section 13 4 2 Obviously the empty entries can be,,,
594,memorytechniquesareoftenusedformanagingthistable Inaddition it is difficult to take advantage of special groupings of objects or domains For example if everyone can read a particular object this object must have aseparateentryineverydomain 17 6 2 Access Lists for Objects Each column in the access matrix can be implemented as an access list for one object as described in Section 13 4 2 Obviously the empty entries can be,,,
595, bit is necessary to distinguish between capabilities and other objects more bits are often used This extension allows all objects to be tagged with their types by the hardware Thus the hardware can distinguish integers floating point numbers pointers Booleans characters instructions capabilities anduninitializedvaluesby theirtags Alternatively theaddressspaceassociatedwithaprogramcanbesplitinto twoparts Onepartisaccessibletotheprogramandcontainstheprogram s normaldataandinstructions Theotherpart containingthecapabilitylist is accessible only by the operating system Asegmentedmemory space is usefulto supportthisapproach ,,,
596,erthelastaccess thecapabilityisdestroyed Thisstrategywas usedinthe MULTICS systemand in the CALsystem As an example of how such a strategy works consider a file system in which each file has an associated access list When a process opens a file the directorystructureissearchedtofindthefile accesspermissionischecked and buffers are allocated All this information is recorded in a new entry in a file tableassociatedwiththeprocess Theoperationreturnsanindexintothistable for the newly opened file All operations on the file are made by specification of the index into the file table The entry in the file table then points to the file,,,
597,erthelastaccess thecapabilityisdestroyed Thisstrategywas usedinthe MULTICS systemand in the CALsystem As an example of how such a strategy works consider a file system in which each file has an associated access list When a process opens a file the directorystructureissearchedtofindthefile accesspermissionischecked and buffers are allocated All this information is recorded in a new entry in a file tableassociatedwiththeprocess Theoperationreturnsanindexintothistable for the newly opened file All operations on the file are made by specification of the index into the file table The entry in the file table then points to the file,,,
598,eachdomain Ifa process wants to use a capability it may find that that capability has been deleted The processmaythentryto reacquirethecapability Ifaccess has beenrevoked the processwillnot be ableto reacquirethecapability Back pointers Alist of pointers is maintained with each object pointing toallcapabilitiesassociatedwiththatobject Whenrevocationisrequired we can follow these pointers changing the capabilities as necessary This scheme was adopted in the MULTICS system It is quite general but its implementationis costly ,17.6.4 A Lock‚ÄìKey Mechanism,17.6.5 Comparison,17.7 Revocation of Access Rights
599, this isfound inSolaris10 and laterversions The idea is to advance the protection available in the operating system by explicitly adding the principle of least privilege via role based access control RBAC This facility revolves around privileges A privilege is the right to execute a system call or to use an option within that system call such as opening a file with write access Privileges can be assigned to processes limitingthemtoexactlytheaccesstheyneedtoperformtheirwork Privileges andprogramscanalsobeassignedto roles Usersareassignedrolesorcantake roles based on passwords assigned to the roles In this way a user can take a,17.6.5 Comparison,17.7 Revocation of Access Rights,17.8 Role-Based Access Control
600,rol MAC MACisenforcedas asystempolicythateventherootusercannotmodify unlessthepolicyexplic itly allows modifications or the system is rebooted usually into an alternate configuration The restrictions imposed by MACp o l i c yr u l e sa r em o r ep o w erful than the capabilities of the root user and can be used to make resources inaccessible toanyone but theirintendedowners ,17.7 Revocation of Access Rights,17.8 Role-Based Access Control,17.9 Mandatory Access Control (MAC)
601,capabilities in POSIX 1003 1e Although POSIX 1e was eventually withdrawn Linux was quick to adoptcapabilitiesinVersion2 2andhascontinuedtoaddnewdevelopments In essence Linux s capabilities slice up the powers of root into distinct areas each represented by a bit in a bitmask as shown in Figure 17 11 Fine grainedcontrol overprivilegedoperationscanbe achievedby togglingbitsin thebitmask In practice three bitmasks are used denoting the capabilities permitted effective and inheritable Bitmaskscanapplyonaper processoraper thread basis Furthermore oncerevoked capabilitiescannotbereacquired Theusual,17.8 Role-Based Access Control,17.9 Mandatory Access Control (MAC),17.10 Capability-Based Systems
602,capabilities in POSIX 1003 1e Although POSIX 1e was eventually withdrawn Linux was quick to adoptcapabilitiesinVersion2 2andhascontinuedtoaddnewdevelopments In essence Linux s capabilities slice up the powers of root into distinct areas each represented by a bit in a bitmask as shown in Figure 17 11 Fine grainedcontrol overprivilegedoperationscanbe achievedby togglingbitsin thebitmask In practice three bitmasks are used denoting the capabilities permitted effective and inheritable Bitmaskscanapplyonaper processoraper thread basis Furthermore oncerevoked capabilitiescannotbereacquired Theusual,,,
603,stem protection takes the form of entitlements Entitlements are declaratory permissions XMLproperty list stating which permissions are claimed as necessary by the program see Figure 17 12 When the process attempts a privileged operation in the figure loading a kernel extension its,,,
604,ampered with Most importantly only code signed kernelextensionsarepermitted and SIPcanfurtherbeconfiguredtoallowonly code signedbinariesas well UnderSIP althoughrootisstillthemostpowerfuluserinthesystem itcan dofarlessthanbefore Therootusercanstillmanageotherusers files aswell asinstallandremoveprograms butnotinanywaythatwouldreplaceormod ify operating system components SIPis implementedas a global inescapable,17.10.1 Linux Capabilities,17.10.2 Darwin Entitlements,17.11 Other Protection Improvement Methods
605,ampered with Most importantly only code signed kernelextensionsarepermitted and SIPcanfurtherbeconfiguredtoallowonly code signedbinariesas well UnderSIP althoughrootisstillthemostpowerfuluserinthesystem itcan dofarlessthanbefore Therootusercanstillmanageotherusers files aswell asinstallandremoveprograms butnotinanywaythatwouldreplaceormod ify operating system components SIPis implementedas a global inescapable,,,
606,self The kernel need only contain a set of callouts which can then be implemented in a specialized driver Windows kernel module Linux or extension Darwin Because an external modular com ponent provides the filtering logic it can be updated independently of the kernel This component commonly makes use of a specialized profiling lan guage by including a built in interpreter or parser Thus the profile itself can bedecoupledfromthecode providingahuman readable editableprofileand further simplifying updates It is also possible for the filtering component to call atrusteduser modedaemonprocesstoassist withvalidationlogic ,,,
607,sid erablysinceitsinception Itisnow used in the i OSvariants where it serves along with code signing as the chief protection against untrusted third party code In i OS and starting with macOS10 8 the mac OSsandbox is mandatory and is automatically enforced forallMac storedownloadedapps Morerecently asmentionedearlier Apple adopted the System Integrity Protection SIP used in mac OS10 11 and later SIPis in effect a system wide platform profile Apple enforces it starting at systemboot on all processes in the system Only those processes that are enti tled can perform privileged operations and those are code signed by Apple and therefore trusted ,,,
608, reducethe cost of each validation or we must allow the system designer to compromise the goals of protection Satisfying all these goals is difficult i f the flexibility to implement protection policies is restricted by the support mechanisms provided or if protection environments are made larger than necessary to secure greater operational efficiency Asoperatingsystemshavebecomemorecomplex andparticularlyasthey haveattemptedtoprovidehigher leveluserinterfaces thegoals ofprotection,,,
609, reducethe cost of each validation or we must allow the system designer to compromise the goals of protection Satisfying all these goals is difficult i f the flexibility to implement protection policies is restricted by the support mechanisms provided or if protection environments are made larger than necessary to secure greater operational efficiency Asoperatingsystemshavebecomemorecomplex andparticularlyasthey haveattemptedtoprovidehigher leveluserinterfaces thegoals ofprotection,17.11.3 Sandboxing,17.11.4 Code Signing,17.12 Language-Based Protection
610,ce made on theunderlyinghardwareoccursindirectly throughacapability Thisrestriction prevents any process from accessing a resource outside of its protection envi ronment at any time However a program may impose arbitrary restrictions onhow aresourcecan beusedduringexecutionofaparticularcodesegment We can implement such restrictions most readily by using the software capa bilitiesprovidedby CAP Alanguageimplementationmight providestandard protected procedures to interpret software capabilities that would realize the protection policies that could be specified in the language This scheme puts,,,
611,vilege amethodcanassertaprivilegeonlyif itsclassisinaprotectiondomainthatisitselfallowedtoexercisetheprivilege This implementation approach is called stack inspection Every thread in theJVMhas an associated stack of its ongoing method invocations When a caller may not be trusted a method executes an access request within a doPrivileged block to perform the access to a protected resource directly or indirectly doPrivileged isastaticmethodinthe AccessController class thatispassedaclasswitha run methodtoinvoke Whenthe doPrivileged block is entered the stack frame for this method is annotated to indicate this fact Then thecontentsoftheblockareexecuted Whenanaccesstoaprotected,,,
612,sier to implementwithanaccess listscheme thanwitha capability list Real systems are much more limited than the general model Older UNIX distributionsarerepresentative providingdiscretionaryaccesscontrolsof read write andexecutionprotectionseparatelyfortheowner group and generalpublicforeachfile Moremodernsystemsareclosertothegeneral model or at least provide a variety of protection features to protect the systemanditsusers Solaris 10 and beyond among other systems implement the principle of least privilege via role based access control a form of access matrix ,17.12.1 Compiler-Based Enforcement,17.12.2 Run-Time-Based Enforcement‚ÄîProtection in Java,17.13 Summary
613,putations Communications of the ACM V olume 9 Number3 1966 pages 143 155 Ganger et al 2002 G R Ganger D R Engler M F Kaashoek H M Briceno R Hunt and T Pinckney Fast and Flexible Applicat ion Level Networking on ExokernelSystems ACM Transactions on Computer Systems Volume20 Number 1 2002 pages 49 83 Iliffe and Jodeit 1962 J K IliffeandJ G Jodeit ADynamicStorageAlloca tionSystem Computer Journal Volume5 Number3 1962 pages200 209 ,17.12.2 Run-Time-Based Enforcement‚ÄîProtection in Java,17.13 Summary,Further Reading
614,putations Communications of the ACM V olume 9 Number3 1966 pages 143 155 Ganger et al 2002 G R Ganger D R Engler M F Kaashoek H M Briceno R Hunt and T Pinckney Fast and Flexible Applicat ion Level Networking on ExokernelSystems ACM Transactions on Computer Systems Volume20 Number 1 2002 pages 49 83 Iliffe and Jodeit 1962 J K IliffeandJ G Jodeit ADynamicStorageAlloca tionSystem Computer Journal Volume5 Number3 1962 pages200 209 ,17.13 Summary,Further Reading,Bibliography
615,tationsofitsstack frame 17 20How are the access matrix facility and the role based access control facility similar How dothey differ 17 21How does the principle of least privilege aid in the creation of protec tionsystems 17 22How can systems that implement the principle of least privilege still have protectionfailuresthat leadto securityviolations EX 54,Further Reading,Bibliography,Chapter 17 Exercises
616,buted systems o ffer several beneÔ¨Åts they give users access to more of the resources maintained by the system boost com putation speed and improve data availability and reliability ,PART EIGHT ADVANCED TOPICS,,
617,he CPU memory disk drives network interface cards and so forth into several different execution environments thereby creating the illusion that each separate environment is running on its own private computer Thisconceptmayseemsimilartothelayeredapproachofoperating systemimplementation seeSection2 8 2 andinsomewaysitis Inthecaseof 701,PART EIGHT ADVANCED TOPICS,Chapter 18 Virtual Machines,
618,he CPU memory disk drives network interface cards and so forth into several different execution environments thereby creating the illusion that each separate environment is running on its own private computer Thisconceptmayseemsimilartothelayeredapproachofoperating systemimplementation seeSection2 8 2 andinsomewaysitis Inthecaseof 701,PART EIGHT ADVANCED TOPICS,Chapter 18 Virtual Machines,18.1 Overview
619, virtualization in modern computing Virtualization is invaluable for data cen ter operations efficient application development and softwaretesting among many other uses 18 2 History Virtual machines first appeared commercially on IBMmainframes in 1972 Virtualizationwasprovidedbythe IBM VMoperatingsystem Thissystemhas evolved and is still available In additi on many of its original concepts are found inother systems making itworth exploring ,Chapter 18 Virtual Machines,18.1 Overview,18.2 History
620,DOSandIBM OS 2 18 3 BeneÔ¨Åts and Features Severaladvantagesmakevirtualizationattractive Mostofthemarefundamen tallyrelatedtotheabilitytosharethesamehardwareyetrunseveraldifferent executionenvironments that is differentoperatingsystems concurrently One important advantage of virtualization is that the host system is pro tected from the virtual machines just as the virtual machines are protected from each other A virus inside a guest operating system might damage that operating systembut is unlikelyto affec t the host or the other guests Because,18.1 Overview,18.2 History,18.3 Benefits and Features
621,a transfer from user mode to kernel mode on a real machine such as a system call an interrupt or an attempt to execute a privileged instruction must also cause a transfer from virtual user mode to virtual kernel mode in the virtual machine How can such a transfer be accomplished The procedure is as follows When the kernel in the guest attempts to execute a privileged instruction that is an error because the system is in user mode and causes a trap to the VMMintherealmachine The VMMgainscontrolandexecutes or emulates the action that was attempted by the guest kernel on the part of the guest It,18.2 History,18.3 Benefits and Features,18.4 Building Blocks
622,a transfer from user mode to kernel mode on a real machine such as a system call an interrupt or an attempt to execute a privileged instruction must also cause a transfer from virtual user mode to virtual kernel mode in the virtual machine How can such a transfer be accomplished The procedure is as follows When the kernel in the guest attempts to execute a privileged instruction that is an error because the system is in user mode and causes a trap to the VMMintherealmachine The VMMgainscontrolandexecutes or emulates the action that was attempted by the guest kernel on the part of the guest It,,,
623,ation implementers the Intel x86 CPU line is one of them No thought was given to running virtualization on the x86 when it was designed In fact the first CPUin the family the Intel 4004 released in 1971 was designed to be the core of a calculator The chip has maintained backward compatibility throughout its lifetime preventing changes that would have made virtualization easier through many genera tions ,,,
624,ardware support virtualization would be impossible The more hardware support available within a system the more feature rich and stable the virtual machines can be and the better they can perform In the Intelx86 CPUfamily Inteladdednewvirtualizationsupport the VT xinstruc tions in successive generations begi nning in 2005 Now binary translation is nolonger needed In fact all major general purpose CPUs now provide extended hardware supportforvirtualization Forexample AMDvirtualizationtechnology AMD V hasappearedinseveral AMDprocessorsstartingin2006 Itdefinestwonew modes of operation host and guest thus moving from a dual mode to a,,,
625,ing a virtual machine from an existingonecanbeaseasyasclickingthe clone buttonandprovidinganew nameand IPaddress Thiseaseofcreationcanleadto virtual machine sprawl which occurs when there are so many virtual machines on a system that their use history and state become confusing and difficultto track 18 5 2 Type 0 Hypervisor Type0hypervisorshaveexistedformanyyearsundermanynames including partitions and domains They are a hardware feature and that brings its own positives and negatives Operating systems need do nothing special to takeadvantageoftheirfeatures The VMMitselfisencodedinthefirmwareand,18.4.2 Binary Translation,18.4.3 Hardware Assistance,18.5 Types of VMs and Their Implementations
626,ing a virtual machine from an existingonecanbeaseasyasclickingthe clone buttonandprovidinganew nameand IPaddress Thiseaseofcreationcanleadto virtual machine sprawl which occurs when there are so many virtual machines on a system that their use history and state become confusing and difficultto track 18 5 2 Type 0 Hypervisor Type0hypervisorshaveexistedformanyyearsundermanynames including partitions and domains They are a hardware feature and that brings its own positives and negatives Operating systems need do nothing special to takeadvantageoftheirfeatures The VMMitselfisencodedinthefirmwareand,,,
627,ing a virtual machine from an existingonecanbeaseasyasclickingthe clone buttonandprovidinganew nameand IPaddress Thiseaseofcreationcanleadto virtual machine sprawl which occurs when there are so many virtual machines on a system that their use history and state become confusing and difficultto track 18 5 2 Type 0 Hypervisor Type0hypervisorshaveexistedformanyyearsundermanynames including partitions and domains They are a hardware feature and that brings its own positives and negatives Operating systems need do nothing special to takeadvantageoftheirfeatures The VMMitselfisencodedinthefirmwareand,,,
628,ive operating system with a subset of hardware made available to it Because of that each can have its own guest operating systems Figure 18 5 Other types of hypervisors usually cannot provide this virtualization within virtualizationfunctionality 18 5 3 Type 1 Hypervisor Type1hypervisorsarecommonlyfoundincompanydatacentersandare ina sense becoming thedata centeroperatingsystem Theyarespecial purpose operatingsystemsthatrunnativelyonthehardware butratherthanproviding,,,
629, operating system explorers becausethereisverylittleoperating systeminvolvementintheseapplication level virtual machine managers This type of VMMis simply another process run and managed by the host and even the host does not know that virtual izationis happening within the VMM Type2hypervisorshavelimitsnotassociatedwithsomeoftheothertypes For example a user needs administrative privileges to access many of the hardware assistance features of modern CPUs If the VMMis being run by a standard user without additional privileges the VMMcannot take advantage ofthesefeatures Duetothislimitation aswellastheextraoverheadofrunning,,,
630,dearlier some VMMspresentvirtualdevices togueststhatappeartoberealdevices Insteadoftakingthatapproach theXen VMMpresentedcleanandsimpledeviceabstractionsthatallowefficient I Oas well as good I O relatedcommunication between the guest and the VMM F o r 1Barham Paul Xen and the Art of Virtualization SOSP 03 Proceedings of the Nineteenth ACM SymposiumonOperatingSystemsPrinciples p164 177 c circlecopyrt2003AssociationforComputingMachinery Inc,,,
631,eratingsystemonadifferentoperatingsystem but onthe sameCPU This method works relatively efficiently because the applications werecompiledforthe instructionsetthatthe targetsystemuses But what if an application or operating system needs to run on a different CPU Here it is necessary to translate all of the source CPU s instructions so thattheyareturnedintotheequivalentinstructionsofthetarget CPU Suchan environmentisno longervirtualizedbut ratherisfully emulated Emulation is useful when the host system has one system architecture and the guest system was compiled for a different architecture For example ,,,
632,eratingsystemonadifferentoperatingsystem but onthe sameCPU This method works relatively efficiently because the applications werecompiledforthe instructionsetthatthe targetsystemuses But what if an application or operating system needs to run on a different CPU Here it is necessary to translate all of the source CPU s instructions so thattheyareturnedintotheequivalentinstructionsofthetarget CPU Suchan environmentisno longervirtualizedbut ratherisfully emulated Emulation is useful when the host system has one system architecture and the guest system was compiled for a different architecture For example ,,,
633,rformance of itsapplicationsontheallottedresources Figure18 7showsaSolaris10system with two containers and the standard global userspace Containers are much lighter weight than other virtualization methods That is they use fewer system resources and are faster to instantiate and destroy moresimilar to processesthan virtualmachines For this reason they are becoming more commonly used especially in cloud computing FreeBSD was perhaps the first operating system to include a container like feature called jails andAIXhas a similar feature Linux added the LXCcontainer feature in 2014 It is now included in the common Linux distributions via,,,
634,ting system aspects of virtualization including how the VMMprovides core operating system functions like scheduling I O and memory manage ment Here we answer questions such as these How do VMMss c h e d u l e CPU use when guest operating systems believe they have dedicated CPUs How can memory management work when many guests require large amounts of memory ,18.5.7 Emulation,18.5.8 Application Containment,18.6 Virtualization and Operating-System Components
635,tindividualvirtualizedoperating systems receive only a portion of the available CPUcycles even though they believe they are receiving all of the cycles and indeed are scheduling all of thecycles Commonly thetime of daycl ocksinvirtualmachinesareincorrect because timers take longer to trigger than they would on dedicated CPUs Virtualizationcanthusundotheschedu ling algorithmeffortsoftheoperating systemswithin virtualmachines To correct for this the VMMmakesanapplicationavailableforeachtypeof operatingsystemthatthesystemadministratorcaninstallintotheguests This application corrects clock drift and can have other functions such as virtual devicemanagement ,,,
636,pages into physical memory Recallthatpinninglocksapageintophysicalmemorysothatit cannot be moved or paged out To the guest these pinned pages appear to decrease the amount of physical memory it has available creating memory pressure The guest then may free up other physical memory to be sure it has enough free memory Meanwhile the VMM knowing thatthepagespinnedbytheballoonprocesswillneverbeused removes thosephysicalpagesfromtheguestandallocatesthemtoanotherguest A tt h es a m et i m e t h eg u e s ti su s i n gi t so w nm e m o r y m a n a g e m e n ta n d paging algorithms to manage the available memory which is the most,,,
637,orecomplexrealdevicedriver I Oinvirtualenvironmentsiscomplicated and requirescareful VMMdesignandimplementation Consider the case of a hypervisor and hardware combination that allows devicestobededicatedtoaguestandallowstheguesttoaccessthosedevices directly Of course a device dedicated to one guest is not available to any other guests but this direct access can still be useful in some circumstances The reason to allow direct access is to improve I Operformance The less the hypervisor has to do to enable I Ofor its guests the faster the I Ocan occur With type 0 hypervisors that provide direct device access guests can often,,,
638,dredsof virtualmachines Onceagain thesolutiontothisproblemdependsonthetypeofhypervisor Type 0 hypervisors often allow root disk partitioning partly because these systems tend to run fewer guests than other systems Alternatively a disk manager may be part of the control partition and that disk manager may providediskspace including boot disks to theotherpartitions Type 1 hypervisors store the guest root disk and configuration informa tion in one or more files in the file systems provided by the VMM T y p e2 hypervisorsstorethesameinformationinthehostoperatingsystem sfilesys tems In essence a disk image containing all of the contents of the root disk,,,
639,running the same VMM The copy occurs with so little interruption of service that users logged in to the guest as well asnetworkconnections tothe guest continue withoutnoticeable impact This ratherastonishing abilityisverypower fulinresourcemanagementand hard ware administration After all compare it with the steps necessary without virtualization we must warn users shut down the processes possibly move thebinaries and restartthe processeson thenew system Only then can users access the services again With live migration we can decrease the load on an overloaded system or make hardware or system changes with no discernable disruptionfor users ,,,
640,nd FreeBSD W indows NT and Windows XPare running as guest operating systems At the heart of VMware is the virtualization layer which abstracts the physical hardware into isolated virtualmachinesrunningasguestopera tingsystems Eachvirtualmachinehas itsown virtual CPU memory diskdrives network interfaces andso forth The physical disk that the guest owns and manages is really just a file withinthefilesystemofthehostoperatingsystem Tocreateanidenticalguest we can simply copy the file Copying the file to another location protects the guestagainst a disasterat the original site Moving the fileto another location,18.6.4 Storage Management,18.6.5 Live Migration,18.7 Examples
641,nd FreeBSD W indows NT and Windows XPare running as guest operating systems At the heart of VMware is the virtualization layer which abstracts the physical hardware into isolated virtualmachinesrunningasguestopera tingsystems Eachvirtualmachinehas itsown virtual CPU memory diskdrives network interfaces andso forth The physical disk that the guest owns and manages is really just a file withinthefilesystemofthehostoperatingsystem Tocreateanidenticalguest we can simply copy the file Copying the file to another location protects the guestagainst a disasterat the original site Moving the fileto another location,,,
642,not per form pointer arithmetic which could provide illegal memory access If the class passes verification it is run by the Java interpreter The JVMalso automatically manages memory by performing garbage collection thepracticeofreclaimingmemoryfromobjectsnolonger inuseandreturningittothesystem Muchresearchfocusesongarbagecollec tionalgorithmsforincreasingtheperformanceofJavaprogramsinthevirtual machine ,,,
643,are specialized machine images using one address space that shrink the attack surface and resource footprint of deployed applications In essence they compile the application the system libraries it calls and the kernel services it uses into a single binary that runs within a virtual environment or even on bare metal While research into changing how operatingsystemkernels hardware andapplications interactisnot new see https pdos csail mit edu 6 828 20 05 readings engler95exokernel pdf ,18.7.1 VMware,18.7.2 The Java Virtual Machine,18.8 Virtualization Research
644,ironmentson IBMmainframes Since then thanks to improvements in system and CPUperformance and innovativesoftwaretechniques virtualizationhasbecomeacommonfea ture in data centers and even on personal computers Because of its pop ularity CPUdesignershave addedfeaturesto support virtualization This snowball effect is likely to continue with virtualization and its hardware supportincreasing overtime The virtual machine manager or hypervisor creates and runs the virtual machine Type0hypervisorsareimplementedinthehardwareandrequire modifications to the operating system to ensure proper operation Some,18.7.2 The Java Virtual Machine,18.8 Virtualization Research,18.9 Summary
645,es traditionally only available to applications running on dedicatedhardware Further Reading Theoriginal IBMvirtualmachineisdescribedi n MeyerandSeawright 1970 Popek and Goldberg 1974 established the characteristics that help define VMMs Methods of implementing virtual machines are discussed in Agesen etal 2010 Intel x86 hardware virtualization support is described in Neiger et al 2006 AMDhardware virtualization support is described in a white paper availableat http developer amd com asse ts NPT WP 1 201 Ô¨Ånal TM pdf ,18.8 Virtualization Research,18.9 Summary,Further Reading
646,alization Intel Technology Journal Volume 10 2006 Popek and Goldberg 1974 G J PopekandR P Goldberg FormalRequire ments for Virtualizable Third Generation Architectures Communications of the ACM Volume17 Number7 1974 pages 412 421 Waldspurger 2002 C Waldspurger Memory Resource Management in VMware ESX Server Operating Systems Review Volume 36 Number 4 2002 pages181 194 West et al 2016 R West Y Li E Missimer and M Danish A Virtualized SeparationKernelforMixedCriticality Systems Volume34 2016 ,18.9 Summary,Further Reading,Bibliography
647, ernCPUs 18 6Why is live migration possible in virtual environments but much less possiblefora nativeoperatingsystem EX 55,Further Reading,Bibliography,Chapter 18 Exercises
648,ed file systems 19 1 Advantages of Distributed Systems Adistributed system is a collection of loosely coupled nodes interconnected by a communication network From the point of view of a specific node in a distributed system the rest of the nodes and their respective resources are remote whereas its own resources are local 733,Chapter 18 Exercises,Chapter 19 Networks and Distributed Systems,
649,ed file systems 19 1 Advantages of Distributed Systems Adistributed system is a collection of loosely coupled nodes interconnected by a communication network From the point of view of a specific node in a distributed system the rest of the nodes and their respective resources are remote whereas its own resources are local 733,Chapter 18 Exercises,Chapter 19 Networks and Distributed Systems,19.1 Advantages of Distributed Systems
650,iefly discusseach of them 19 1 1 Resource Sharing If a number of different sites with different capabilities are connected to one another then a user at one site may be able to use the resources available at another For example a user at site A may query a database located at site B Meanwhile a user at site B may access a file that resides at site A In general resource sharing in a distributed system provides mechanisms for,,,
651,ntroduce basic networking concepts and chal lengesastheyrelatetodistributedsystems Therestofthechapterspecifically discussesdistributedsystems There are basically two typesof networks local area networks LAN a n d wide area networks WAN Themaindifferencebetweenthetwoisthewayin whichtheyaregeographicallydistribu ted Local areanetworksarecomposed of hosts distributed over small areas such as a single building or a number of adjacent buildings whereas wide area networks are composed of systems distributed over a large area such as the United States These differences,,,
652,ntroduce basic networking concepts and chal lengesastheyrelatetodistributedsystems Therestofthechapterspecifically discussesdistributedsystems There are basically two typesof networks local area networks LAN a n d wide area networks WAN Themaindifferencebetweenthetwoisthewayin whichtheyaregeographicallydistribu ted Local areanetworksarecomposed of hosts distributed over small areas such as a single building or a number of adjacent buildings whereas wide area networks are composed of systems distributed over a large area such as the United States These differences,,,
653,ntroduce basic networking concepts and chal lengesastheyrelatetodistributedsystems Therestofthechapterspecifically discussesdistributedsystems There are basically two typesof networks local area networks LAN a n d wide area networks WAN Themaindifferencebetweenthetwoisthewayin whichtheyaregeographicallydistribu ted Local areanetworksarecomposed of hosts distributed over small areas such as a single building or a number of adjacent buildings whereas wide area networks are composed of systems distributed over a large area such as the United States These differences,19.1.2 Computation Speedup,19.1.3 Reliability,19.2 Network Structure
654,nerally found in businesses and organizations in which computers and peripherals tend to be nonmobile These networks usecoaxial twisted pair and orfiber optic cables to send signals An Ethernet networkhasnocentralcontroller becauseitisamultiaccessbus sonewhosts canbeaddedeasilytothenetwork TheEthernetprotocolisdefinedbythe IEEE 802 3 standard Typical Ethernet speed s using common twisted pair cabling,,,
655,mong the varioussites For example the Internet WANenables hosts at geographically separate sites to communicate with one another The host computers typically differ from one another in speed CPUtype operating system and so on Hosts are routercommunication subsystem network HH Huser processes network hostnetwork host host operating system RR R R H Figure 19 3 Communication processors in a wide area network ,,,
656, share no memory however a hostwithinthesysteminitiallyhasnok nowledgeabouttheprocessesonother hosts Tosolvethisproblem processesonremotesystemsaregenerallyidentified bythepair hostname identifier where host name isanameuniquewithin the network and identifie is a process identifier or other unique number withinthathost Ahostnameisusuallyan alphanumericidentifier ratherthan anumber tomakeiteasierforuserstospecify Forinstance siteAmighthave hostsnamed program student faculty andcs Thehostname programiscertainly easierto rememberthan thenumerichost address 128 148 31 100 ,19.2.1 Local-Area Networks,19.2.2 Wide-Area Networks,19.3 Communication Structure
657, share no memory however a hostwithinthesysteminitiallyhasnok nowledgeabouttheprocessesonother hosts Tosolvethisproblem processesonremotesystemsaregenerallyidentified bythepair hostname identifier where host name isanameuniquewithin the network and identifie is a process identifier or other unique number withinthathost Ahostnameisusuallyan alphanumericidentifier ratherthan anumber tomakeiteasierforuserstospecify Forinstance siteAmighthave hostsnamed program student faculty andcs Thehostname programiscertainly easierto rememberthan thenumerichost address 128 148 31 100 ,,,
658,on of a binary 0 and 1 so that when data are sentasastreamofelectricalsignals thereceiverisabletointerpretthedata real systems environmentOSI environmentnetwork environmentdata networkcomputer A application layer presentation layer session layer transport layer network layer link layer physical layercomputer B A L 7 P L 6 S L 5 T L 4 N L 3 L L 2 P L 1 AP AP Figure 19 5 Two computers communicating via the OSI network model ,,,
659,ency the host caches theIP MACaddress pair in an internal table The cache entries are aged so that an entry is eventually removed fr om the cache if an access to that system is not required within a given time In this way hosts that are removed from a network are eventually forgotten For added performance ARPentries for heavilyused hosts maybe pinned in the ARPcache Once an Ethernet device has announced its host id and address commu nication can begin A process may specify the name of a host with which to communicate Networking software takes that name and determines the IP address of the target using a DNSlookup or an entry in a local hostsfile,,,
660,r header maychangeastheEthernetaddressofthenextrouterinthechainisused but the other headers of the packet remain the same until the packet is received andprocessedbytheprotocolstackandfinallypassedtothereceivingprocess by the kernel 19 3 4 Transport Protocols UDP and TCP Onceahostwithaspecific IPaddressreceivesapacket itmustsomehowpass ittothecorrectwaiting process Thetransportprotocols TCPandUDPidentify thereceiving andsending processesthroughtheuseofa port number Thus ,,,
661,e TCP adistributedsystemdoes not need extra logic to deal with lost or out of order packets However TCPis slowerthan UDP 19 4 Network and Distributed Operating Systems In this section we describe the two general categories of network oriented operating systems network operating systems and distributed operating sys ,19.3.3 TCP/IP Example,19.3.4 Transport Protocols UDP and TCP,19.4 Network and Distributed Operating Systems
662, Maine to the computer at Albion in Michigan The communication is one directional and individual such that other users at those sites wishing to transfer a file say Sean at colby edu to Karen at albion edu must likewiseissuea setof commands TheInternetprovidesamechanismforsuchatransferwiththefiletransfer protocol FTP andthemoreprivatesecurefiletransferprotocol SFTP Suppose that user Carla at wesleyan edu wants to copy a file that is owned by Owen atkzoo edu The usermustfirst invoke the sftpprogram byexecuting sftp owen kzoo edu,,,
663,em Depending on the goals of the system it can implement data migration computation migration processmigration orany combination thereof 19 4 2 1 Data Migration Supposea useron siteAwants to access data such as a file that resideat site B Thesystemcantransferthedatabyoneoftwobasicmethods Oneapproach todata migration is to transfer the entire file to site A From that point on all access to the file is local When the user no longer needs access to the file a copy of the file if it has been modified is sent back to site B Even if only a,,,
664,or the huge growth of the World Wide Web 19 5 Design Issues in Distributed Systems Thedesignersofadistributedsystemmusttakeanumberofdesignchallenges intoaccount Thesystemshouldberobustsothatitcanwithstandfailures The system should also be transparent to users in terms of both file location and user mobility Finally the system should be scalable to allow the addition of more computation power more storage or more users We briefly introduce theseissueshere Inthenextsection weputthemincontextwhenwedescribe thedesignsofspecific distributedfilesystems ,19.4.1 Network Operating Systems,19.4.2 Distributed Operating Systems,19.5 Design Issues in Distributed Systems
665,tillhasnotreceivedan I am upmessage orifsite Ahassentan Are you up messageandhasnotreceivedareply theprocedure can be repeated Again the only conclusion that site Acan draw safely is that sometypeof failurehas occurred SiteAcantrytodifferentiatebetweenlinkfailureandsitefailurebysend inganAre you up messagetoBbyanotherroute ifoneexists IfandwhenB receivesthismessage itimmediatelyrepliespositively Thispositivereplytells Athat B is up and that the failure is in th e direct link between them Since we donotknowinadvancehowlongitwilltakethemessagetotravelfromAtoB andback wemustuseatime outscheme AtthetimeAsendsthe Are you up ,,,
666,n should withstand hig h service load accommodate growth of theusercommunity and allowsimpleintegrationof addedresources Scalability is related to fault tolerance discussed earlier Aheavily loaded componentcanbecomeparalyzedandbehavelikeafaultycomponent Inaddi tion shifting the load from a faulty component to that component s backup cansaturatethelatter Generally havingspareresourcesisessentialforensur ing reliability as well as for handling pea k loads gracefully Thus the multi ple resources in a distributed system represent an inherent advantage giving the system a greater potential for faul t tolerance and scalability However ,,,
667,n should withstand hig h service load accommodate growth of theusercommunity and allowsimpleintegrationof addedresources Scalability is related to fault tolerance discussed earlier Aheavily loaded componentcanbecomeparalyzedandbehavelikeafaultycomponent Inaddi tion shifting the load from a faulty component to that component s backup cansaturatethelatter Generally havingspareresourcesisessentialforensur ing reliability as well as for handling pea k loads gracefully Thus the multi ple resources in a distributed system represent an inherent advantage giving the system a greater potential for faul t tolerance and scalability However ,,,
668,mongthemachinesofadistributedsystem Accordingly serviceactiv ity has to be carried out across the network Instead of a single centralized data repository the system frequently has multiple and independent storage devices As you will see the concrete configuration and implementation of a DFSmay vary from system to system In some configurations servers run on dedicatedmachines In others amachine can be both a serverand aclient The distinctive features of a DFSare the multiplicity and autonomy of clients and servers in the system Ideally though a DFSshould appear to its clientstobeaconventional centralized filesystem Thatis theclientinterface,19.5.2 Transparency,19.5.3 Scalability,19.6 Distributed File Systems
669,6 1 The Client Server DFS Model Figure 19 12 illustrates a simple DFS client server model The server stores both files and metadata on attached storage In some systems more than one server can be used to store different files Clients are connected to the server through a network and can request access to files in the DFSby contacting the server through a well known protocol such as NFSVersion 3 The server client networkclient clientserver Figure 19 12 Client server DFS model ,,,
670,clu steringmethodssuchthatfailuresare detectedandfailingovertoworkingcompo nentscontinuesserveroperations In addition the server presents a bottleneck for all requests for both data and metadata which resultsin problemsof scalabilityand bandwidth 19 6 2 The Cluster Based DFS Model Astheamountofdata I Oworkload andprocessingexpands sodoestheneed foraDFStobefault tolerantandscalable Largebottleneckscannotbetolerated and system component failures must be expected Cluster based architecture was developedinpartto meettheseneeds Figure19 13 illustratesasamplecluster based DFSmodel Thisisthebasic modelpresentedbythe Googlefile system GFS andthe Hadoop distributed,,,
671,vel of naming discussed previously since files have different names at different levels that is user level textual names and system levelnumericalidentifiers Alo cation independentnamingschemeis adynamicmapping sinceitcan mapthesamefilenametodifferentlocations attwodifferenttimes Therefore locationindependenceisastrongerproperty than location transparency In practice most of the current DFSs provide a static location transparent mappingforuser levelnames Somesupport fil migration thatis changing thelocationofafileautomatically pro vidinglocationindependence Open AFS,19.6.1 The Client‚ÄìServer DFS Model,19.6.2 The Cluster-Based DFS Model,19.7 DFS Naming and Transparency
672,vel of naming discussed previously since files have different names at different levels that is user level textual names and system levelnumericalidentifiers Alo cation independentnamingschemeis adynamicmapping sinceitcan mapthesamefilenametodifferentlocations attwodifferenttimes Therefore locationindependenceisastrongerproperty than location transparency In practice most of the current DFSs provide a static location transparent mappingforuser levelnames Somesupport fil migration thatis changing thelocationofafileautomatically pro vidinglocationindependence Open AFS,,,
673,irec tory to its tree Thus a user might be able to access a remote directory tree on one client but be denied access on another client 19 7 3 Implementation Techniques Implementation of transparent naming requires a provision for the mapping of a file name to the associated location To keep this mapping manageable wemustaggregatesetsoffilesintocomponentunitsandprovidethemapping on a component unit basis rather than on a single file basis This aggregation servesadministrativepurposesaswell UNIX likesystemsusethehierarchical directory tree to provide name to location mapping and to aggregate files recursivelyinto directories ,,,
674,irec tory to its tree Thus a user might be able to access a remote directory tree on one client but be denied access on another client 19 7 3 Implementation Techniques Implementation of transparent naming requires a provision for the mapping of a file name to the associated location To keep this mapping manageable wemustaggregatesetsoffilesintocomponentunitsandprovidethemapping on a component unit basis rather than on a single file basis This aggregation servesadministrativepurposesaswell UNIX likesystemsusethehierarchical directory tree to provide name to location mapping and to aggregate files recursivelyinto directories ,,,
675,ote service method is analogous to performing a disk access for each access request Toensurereasonableperformanceofaremote servicemechanism wecan useaformofcaching Inconventionalfil esystems therationaleforcachingis toreducedisk I O therebyincreasingperformance whereasin DFSs thegoal is to reduceboth network traffic and disk I O In the following discussion we describe the implementation of caching in a DFSand contrast it with the basic remote serviceparadigm 19 8 1 Basic Caching Scheme Theconceptofcachingissimple Ifthedataneededtosatisfytheaccessrequest are not already cached then a copy of the data is brought from the server to,19.7.2 Naming Schemes,19.7.3 Implementation Techniques,19.8 Remote File Access
676,ote service method is analogous to performing a disk access for each access request Toensurereasonableperformanceofaremote servicemechanism wecan useaformofcaching Inconventionalfil esystems therationaleforcachingis toreducedisk I O therebyincreasingperformance whereasin DFSs thegoal is to reduceboth network traffic and disk I O In the following discussion we describe the implementation of caching in a DFSand contrast it with the basic remote serviceparadigm 19 8 1 Basic Caching Scheme Theconceptofcachingissimple Ifthedataneededtosatisfytheaccessrequest are not already cached then a copy of the data is brought from the server to,,,
677,ry Disk caches have one clear advantage over main memory caches they are reliable Modifications to cached data are lost in a crash if the cache is kept in volatile memory Moreover if the cached data are kept on disk they are still there duringrecovery andthereisnoneedtofetchthemagain Main memorycaches haveseveraladvantagesof theirown however Main memory caches permitworkstations tobe diskless Datacanbeaccessedmorequicklyfromacacheinmainmemorythanfrom one ona disk Technology is moving toward larger and less expensive memory The resulting performance speedup is predicted to outweigh the advantages of diskcaches ,,,
678,d complete NFStreats metadata directory data and file attribute data differently Anymetadatachange sareissuedsynchronouslytotheserver Thus file structure loss and directory structure corruption are avoided when a clientor theservercrashes Yet another variation on delayed write is to write data back to the server when the file is closed This write on close policy is used in Open AFS I nt h e case of files that are open for short periods or are modified rarely this policy does not significantly reduce network traffic In addition the write on close policy requires the closing process to delay while the file is written through ,,,
679,eraldataservers Usingourearlierexamplesof HDFSandGFS we can compare some differences HDFSallows append only write operations norandomwrites andasinglefilewriter while GFSdoesallowrandomwrites withconcurrentwriters Thisgreatlycomplicateswriteconsistencyguarantees forGFSwhile simplifyingthem for HDFS 19 9 Final Thoughts on Distributed File Systems Thelinebetween DFSclient serverandcluster basedarchitecturesisblurring TheNFSVersion 4 1 specification includes a protocol for a parallel version of NFScalledp NFS but as of thiswriting adoption isslow ,,,
680,eraldataservers Usingourearlierexamplesof HDFSandGFS we can compare some differences HDFSallows append only write operations norandomwrites andasinglefilewriter while GFSdoesallowrandomwrites withconcurrentwriters Thisgreatlycomplicateswriteconsistencyguarantees forGFSwhile simplifyingthem for HDFS 19 9 Final Thoughts on Distributed File Systems Thelinebetween DFSclient serverandcluster basedarchitecturesisblurring TheNFSVersion 4 1 specification includes a protocol for a parallel version of NFScalledp NFS but as of thiswriting adoption isslow ,19.8.3 Cache-Update Policy,19.8.4 Consistency,19.9 Final Thoughts on Distributed File Systems
681,orkloads 19 10 Summary Adistributed system is a collection of processors that do not share mem ory or a clock Instead each processor has its own local memory and the processors communicate with one another through various communica tion lines such as high speed buses and the Internet The processors in a distributedsystemvaryinsizeand function Adistributedsystemprovidestheuserwithaccesstoallsystemresources Access to a shared resource can be provided by data migration compu tation migration or process migrati on The access can be specified by the useror implicitlysuppliedby the operatingsystemand applications ,19.8.4 Consistency,19.9 Final Thoughts on Distributed File Systems,19.10 Summary
682,n 2000 Infor mation about Open AFSisavailablefrom http www openafs org Information on the Google file system can be found in Ghe mawat et al 2003 The Google MapReduce method is described in http research google com archive mapreduce html The Hadoop dis tributedfilesystemisdiscussedin K ShvachkoandChansler 2010 andthe Hadoop frameworkisdiscussedin http hadoop apache org To learn more about Lustre see http lustre org ,19.9 Final Thoughts on Distributed File Systems,19.10 Summary,Practice Exercises
683,n 2000 Infor mation about Open AFSisavailablefrom http www openafs org Information on the Google file system can be found in Ghe mawat et al 2003 The Google MapReduce method is described in http research google com archive mapreduce html The Hadoop dis tributedfilesystemisdiscussedin K ShvachkoandChansler 2010 andthe Hadoop frameworkisdiscussedin http hadoop apache org To learn more about Lustre see http lustre org ,19.10 Summary,Practice Exercises,Further Reading
684,Steven B Fenner andA Rudoff UnixNetworkProgram ming Volume1 TheSocketsNetworkingAPI Third Edition JohnWiley and Sons 2003 Stevens 1995 R Stevens TCP IP Illustrated Volume 2 The Implementation Addison Wesley 1995 ,Practice Exercises,Further Reading,Bibliography
685,r IPaddresses insteadof justone 19 16The original HTTPprotocol used TCP IPas the underlying network protocol For eachpage graphic or applet a separate TCPsessionwas constructed used andtorndown Becauseoftheoverheadofbuilding and destroying TCP IPconnections performance problems resulted from this implementation method Would using UDPrather than TCP beagoodalternative Whatotherchangescouldyoumaketoimprove HTTPperformance EX 56,Further Reading,Bibliography,Chapter 19 Exercises
686,an operating system for mobile devices Windows 10 has a modern design and features a look and feel very different from earlier oper ating systems produced by Microsoft ,PART NINE CASE STUDIES,,
687,s been a major design goal of the Linux project However Linux is muchyoungerthanmost UNIXsystems Itsdevelopmentbeganin1991 when a Finnish university student Linus Torvalds began creating a small but self containedkernelforthe80386processor thefirsttrue32 bitprocessorinIntel s range of PC compatible CPUs 775,PART NINE CASE STUDIES,Chapter 20 The Linux System,
688,s been a major design goal of the Linux project However Linux is muchyoungerthanmost UNIXsystems Itsdevelopmentbeganin1991 when a Finnish university student Linus Torvalds began creating a small but self containedkernelforthe80386processor thefirsttrue32 bitprocessorinIntel s range of PC compatible CPUs 775,PART NINE CASE STUDIES,Chapter 20 The Linux System,20.1 Linux History
689,ne Linux1 0 wasreleasedonMarch14 1994 Thisrelease culminatedthreeyearsofrapiddevelopmentoftheLinuxkernel Perhapsthe single biggest new feature was networking 1 0 included support for UNIX s standard TCP IPnetworking protocols as well as a BSD compatible socket interface for networking programming Device driver support was added for running IPover Ethernet or via the PPPorSLIPprotocols over serial lines or modems The1 0kernelalsoincludedanew muchenhancedfilesystemwithoutthe limitations of the original Minix file system and it supported a range of SCSI controllersforhigh performancediskaccess Thedevelopersextendedthevir ,,,
690,inistra tiontoolsunderLinuxwerederivedfromcodefirstdevelopedfor4 3 BSD but morerecent BSDderivatives suchas FreeBSD haveborrowedcodefromLinux in return Examples of this sharing include the Intel floating point emulation math libraryand the PCsound hardware devicedrivers TheLinuxsystemasawholeismaintainedbyaloosenetworkofdevelop ers collaborating over the Internet with small groups or individuals having responsibility for maintaining the inte grity of specific components A small number of public Internet file transfer protocol FTP a r c h i v es i t e sa c ta sd e facto standard repositories for these components The File System Hierarchy,,,
691,ver The RPMpackage file format is used or at least understood by the majority of distributions and commer cial applications distributed in this format can be installed and run on any distributionthatcan accept RPMfiles 20 1 4 Linux Licensing The Linux kernel is distributed under version 2 0 of the GNUGeneral Public License GPL thetermsofwhich aresetoutbytheFreeSoftwareFoundation Linux is not public domain software Public domain implies that the authors have waived copyright rights in the software but copyright rights in Linux code are still held by the code s various authors Linux is freesoftware how ,,,
692,ver The RPMpackage file format is used or at least understood by the majority of distributions and commer cial applications distributed in this format can be installed and run on any distributionthatcan accept RPMfiles 20 1 4 Linux Licensing The Linux kernel is distributed under version 2 0 of the GNUGeneral Public License GPL thetermsofwhich aresetoutbytheFreeSoftwareFoundation Linux is not public domain software Public domain implies that the authors have waived copyright rights in the software but copyright rights in Linux code are still held by the code s various authors Linux is freesoftware how ,,,
693,e operations Linux is designed to comply with the relevant POSIXdocuments andatleasttwoLinuxdistributionshaveachieved official POSIXcertification Because it gives standard interfaces to both the programmer and the user Linux presentsfewsurprisesto anybody familiarwith UNIX W ed on o td e t a i l these interfaces here The sections on the programmer interface Section C 3 anduserinterface SectionC 4 of BSDapplyequallywelltoLinux Bydefault however the Linux programming interface adheres to SVR4 UNIX semantics ratherthanto BSDbehavior Aseparatesetoflibrariesisavailabletoimplement BSDsemantics inplaces where the two behaviors differsignificantly ,20.1.3 Linux Distributions,20.1.4 Linux Licensing,20.2 Design Principles
694,stsfromterminals andupdating logfiles Figure 20 1 illustrates the various components that make up a full Linux system The most important distinction here is between the kernel and every thing else All the kernel code executes in the processor s privileged mode system shared libraries Linux kernel loadable kernel modulessystem management programsuser processesuser utility programscompilers Figure 20 1 Components of the Linux system ,,,
695,ny device drivers that the user needs can be either loaded explicitly by the system at startup or loaded automatically by the system on demand and unloaded when not in use For example amousedrivercanbeloadedwhena USBmouseispluggedintothe systemand unloadedwhenthe mouseisunplugged The modulesupportunderLinuxhas four components 1 The module management system allows modules to be loaded into memoryand tocommunicate with therestofthe kernel 2 The module loader and unloader which are user mode utilities work withthemodule managementsystemtoloada moduleinto memory ,20.2 Design Principles,20.2.1 Components of a Linux System,20.3 Kernel Modules
696,by othermodulesnot yetloaded The final module management component is the module requester The kernel defines a communication interface to which a module management program can connect With this connection established the kernelwill inform the management process whenever a process requests a device driver file system or network service that is not currently loaded and will give the managertheopportunitytoloadthatser vice Theoriginalservicerequestwill completeoncethemoduleisloaded Themanagerprocessregularlyqueriesthe kerneltoseewhetheradynamicallyloadedmoduleisstillinuseandunloads that modulewhenitisno longeractivelyneeded ,,,
697,s and video display adapters Theproblemofmanagingthehardwareconfigurationbecomesmore severe when modular device drivers are supported since the currently active setof devicesbecomesdynamically variable Linux provides a central conflict resolution mechanism to help arbitrate access tocertain hardwareresources Itsaims areasfollows To preventmodulesfrom clashing overaccess to hardwareresources Toprevent autoprobes device driverprobesthatauto detectdevicecon figuration from interferingwithexistingdevicedrivers,,,
698,s and video display adapters Theproblemofmanagingthehardwareconfigurationbecomesmore severe when modular device drivers are supported since the currently active setof devicesbecomesdynamically variable Linux provides a central conflict resolution mechanism to help arbitrate access tocertain hardwareresources Itsaims areasfollows To preventmodulesfrom clashing overaccess to hardwareresources Toprevent autoprobes device driverprobesthatauto detectdevicecon figuration from interferingwithexistingdevicedrivers,,,
699,model has the advantage of great simplicity It is not necessary to specifyeverydetailoftheenvironmentofanewprograminthesystemcallthat runsthatprogram Thenewprogramsimplyrunsinitsexistingenvironment Ifaparentprocesswishestomodifytheenvironmentinwhichanewprogram istoberun itcanforkandthen stillrunningtheoriginalexecutableinachild process make any system calls it requir es to modify that child process before finally executingthe new program Under UNIX then a process encompasses all the information that the operating system must maintain to track the context of a single execution of a,20.3.2 Driver Registration,20.3.3 Conflict Resolution,20.4 Process Management
700,model has the advantage of great simplicity It is not necessary to specifyeverydetailoftheenvironmentofanewprograminthesystemcallthat runsthatprogram Thenewprogramsimplyrunsinitsexistingenvironment Ifaparentprocesswishestomodifytheenvironmentinwhichanewprogram istoberun itcanforkandthen stillrunningtheoriginalexecutableinachild process make any system calls it requir es to modify that child process before finally executingthe new program Under UNIX then a process encompasses all the information that the operating system must maintain to track the context of a single execution of a,,,
701,ters to these other structures so any number of processescaneasilyshareasubcontextbypointingtothesamesubcontextand incrementinga referencecount Theargumentstothe clone systemcalltellitwhichsubcontextstocopy andwhichtoshare Thenewprocessisalwaysgivenanewidentityandanew scheduling context these are the essent ials of a Linux process According to the arguments passed however the kernel may either create new subcontext data structures initialized so as to be copies of the parent s or set up the new process to use the same subcontext data structures being used by the parent ,,,
702,range from 0 to 99 and a nice value ranging from 20 to 19 Smaller nicevalues indicate higher priorities Thus byincreasingthe nicevalue youaredecreasingyourpriorityandbeing nice to therestof thesystem CFSis a significant departure from the traditional UNIXprocess scheduler In the latter the core variables in the scheduling algorithm are priority and time slice The time slice is the length of time the sliceof the processor that a thread is afforded Traditional UNIXsystems give processes a fixed timeslice perhapswithaboost orpenaltyforhigh orlow priorityprocesses ,20.4.1 The fork() and exec() Process Model,20.4.2 Processes and Threads,20.5 Scheduling
703,range from 0 to 99 and a nice value ranging from 20 to 19 Smaller nicevalues indicate higher priorities Thus byincreasingthe nicevalue youaredecreasingyourpriorityandbeing nice to therestof thesystem CFSis a significant departure from the traditional UNIXprocess scheduler In the latter the core variables in the scheduling algorithm are priority and time slice The time slice is the length of time the sliceof the processor that a thread is afforded Traditional UNIXsystems give processes a fixed timeslice perhapswithaboost orpenaltyforhigh orlow priorityprocesses ,,,
704,e could not be preempted even if a higher priority thread became available to run With version 2 6 the Linux kernel became fully preemptive Now a task can be preempted when it is running inthekernel The Linux kernel provides spinlocks and semaphores as well as reader writerversionsofthesetwolocks forlockinginthekernel On SMPmachines thefundamentallockingmechanismisas pinlock andthekernelisdesignedso thatspinlocksareheldforonlyshortdurations Onsingle processormachines spinlocks are not appropriate for use and are replaced by enabling and dis ablingkernelpreemption Thatis ratherthanholdingaspinlock thetaskdis ,,,
705,e could not be preempted even if a higher priority thread became available to run With version 2 6 the Linux kernel became fully preemptive Now a task can be preempted when it is running inthekernel The Linux kernel provides spinlocks and semaphores as well as reader writerversionsofthesetwolocks forlockinginthekernel On SMPmachines thefundamentallockingmechanismisas pinlock andthekernelisdesignedso thatspinlocksareheldforonlyshortdurations Onsingle processormachines spinlocks are not appropriate for use and are replaced by enabling and dis ablingkernelpreemption Thatis ratherthanholdingaspinlock thetaskdis ,,,
706, of which protects only a small subset of the kernel sdatastructures Such spinl ocksweredescribedinSection20 5 3 The3 0and4 0kernelsprovidedadditionalSMPenhancements including ever finer locking processor affinity load balancing algorithms and support for hundredsoreventhousands of physical processorsinasinglesystem top half interrupt handlers bottom half interrupt handlers kernel system service routines preemptible user mode programs preemptible increasing priority Figure 20 2 Interrupt protection levels ,,,
707,x86 64 has a small 16 MBZONE DMA for legacy devices and all the rest of its memory in ZONE NORMAL w i t hn o highmemory TherelationshipofzonesandphysicaladdressesontheIntelx86 32archi tecture is shown in Figure 20 3 The kernel maintains a list of free pages for zone physical memory 16 MB 16 896 MB 896 MBZONE_DMA ZONE_NORMAL ZONE_HIGHMEM Figure 20 3 Relationship of zones and physical addresses in Intel x86 32 ,20.5.3 Kernel Synchronization,20.5.4 Symmetric Multiprocessing,20.6 Memory Management
708,x86 64 has a small 16 MBZONE DMA for legacy devices and all the rest of its memory in ZONE NORMAL w i t hn o highmemory TherelationshipofzonesandphysicaladdressesontheIntelx86 32archi tecture is shown in Figure 20 3 The kernel maintains a list of free pages for zone physical memory 16 MB 16 896 MB 896 MBZONE_DMA ZONE_NORMAL ZONE_HIGHMEM Figure 20 3 Relationship of zones and physical addresses in Intel x86 32 ,,,
709,space Eachregionisdes cribedinternallybyasingle vm area struct structurethatdefinesthepropertiesoftheregion includingtheprocess sread write and executepermissions in the region as well as information about any files associated with the region The regions for each address space are linked intoabalancedbinarytreetoallowfastlookupoftheregioncorrespondingto any virtualaddress The kernel also maintains a second physical view of each address space This view is stored in the hardware page tables for the process The page tableentriesidentifytheexactcurrentlocationofeachpageofvirtualmemory ,,,
710,x systems use the more modern ELFformat now supported by most current UNIXimplementations ELFhasanumberofadvantagesover a out including flexibility and extendability New sections can be added to an ELFbinary for example toaddextradebugginginformation withoutcausingtheloaderrou tinestobecomeconfused Byallowingregistrationofmultipleloaderroutines Linuxcaneasilysupportthe ELFanda outbinaryformatsinasinglerunning system In Section 20 6 3 1 and Section 20 6 3 2 we concentrate exclusively on the loading and running of ELF format binaries The procedure for loading a out binariesissimplerbut similarinoperation ,,,
711,e an object stored on disk or fetched over a network from a remote file server Rather UNIXfiles can be anything capable of handling the input or outputofastreamofdata Devicedriverscanappearasfiles andinterprocess communication channels or network connections also look like files to the user The Linux kernel handles all these types of files by hiding the implemen tation details of any single file type behind a layer of software the virtual file system VFS Here we first cover the virtual file system and then discuss the standardLinuxfilesystem ext3 ,20.6.2 Virtual Memory,20.6.3 Execution and Loading of User Programs,20.7 File Systems
712,otheinode Thefileobjectkeepstrackofwhereinthefile theprocessiscurrentlyreadingorwriting tokeeptrackofsequentialfile I O It also remembers the permissions for example read or write requested when the file was opened and tracks the thread s activity if necessary to perform adaptiveread ahead fetchingfiledata intomemorybeforethethreadrequests thedata to improveperformance File objects typically belong to a single process but inode objects do not There is one file object for every instance of an open file but always only a,,,
713,temwasseverelyrestrictedby14 characterfile namelimitsandamaximum file system size of 64 MB The Minix file system was superseded by a new file system whichwaschristenedthe extended file system extfs Alaterredesign to improve performance and scalability and to add a few missing featuresled tothe second extended file system ext2 Furtherdevelopmentaddedjournal ing capabilities and the system was renamed the third extended file system ext3 Linux kernel developers then augmented ext3 with modern file system featuressuchasextents Thisnewfilesystemiscalledthe fourth extended file system ext4 The rest of this section discusses ext3 however since it remains,,,
714, rather provides an interface to some other functionality The Linux procfilesystemisan exampleof a file system whosecontentsarenotactuallystoredanywherebutarecomputedondemand according to userfile I Orequests A procfilesystemisnotuniquetoLinux UNIXv8introduceda procfile systemanditsusehasbeenadoptedandexpandedintomanyotheroperating systems Itisanefficientinterfacetothekernel sprocessnamespaceandhelps with debugging Each subdirectory of the file system corresponded not to a directory on any disk but rather to an active process on the current system A listing of the file system reveals one directory per process with the directory,,,
715, rather provides an interface to some other functionality The Linux procfilesystemisan exampleof a file system whosecontentsarenotactuallystoredanywherebutarecomputedondemand according to userfile I Orequests A procfilesystemisnotuniquetoLinux UNIXv8introduceda procfile systemanditsusehasbeenadoptedandexpandedintomanyotheroperating systems Itisanefficientinterfacetothekernel sprocessnamespaceandhelps with debugging Each subdirectory of the file system corresponded not to a directory on any disk but rather to an active process on the current system A listing of the file system reveals one directory per process with the directory,,,
716,esnosenseforapointingdevicesuchasamouse Network devices are dealt with differently from block and character devices Users cannot directly transfer data to network devices Instead they must communicate indirectly by opening a connection to the kernel s net working subsystem Wediscusstheinterfacetonetwork devicesseparatelyin Section20 10 20 8 1 Block Devices Blockdevicesprovidethemaininterfacetoalldiskdevicesinasystem Perfor mance is particularly important for disks and the block device system must,20.7.3 Journaling,20.7.4 The Linux Proc File System,20.8 Input and Output
717,esnosenseforapointingdevicesuchasamouse Network devices are dealt with differently from block and character devices Users cannot directly transfer data to network devices Instead they must communicate indirectly by opening a connection to the kernel s net working subsystem Wediscusstheinterfacetonetwork devicesseparatelyin Section20 10 20 8 1 Block Devices Blockdevicesprovidethemaininterfacetoalldiskdevicesinasystem Perfor mance is particularly important for disks and the block device system must,,,
718,the device deal with the request The main exception to this rule is the special subset of character device drivers that implement terminal devices The kernel maintains a standard interface to these drivers by means of a set of tty structstructures Each of these structures provides buffering and flow control on the data stream from theterminaldeviceandfeedsthosedatato a linediscipline Aline discipline is an interpreter for the information from the terminal device Themostcommonlinedisciplineisthe ttydiscipline whichgluesthe terminal sdata streamonto the standardinput and output streamsof a user s runningprocesses allowingthoseprocessestocommunicate directlywiththe,,,
719,hat event and tellstheschedulerthatitisnolongereligibleforexecution Oncetheeventhas completed everyprocessonthewaitqueuewillbeawakened Thisprocedure allows multiple processes to wait for a single event For example if several processes are trying to read a file from a disk then they will all be awakened once the datahavebeen readinto memorysuccessfully Although signals have always been the main mechanism for commu nicating asynchronous events among processes Linux also implements the semaphore mechanism of SystemV UNIX Aprocess can wait on a semaphore aseasilyasitcanwaitforasignal butsemaphoreshavetwoadvantages large,20.8.1 Block Devices,20.8.2 Character Devices,20.9 Interprocess Communication
720,hat event and tellstheschedulerthatitisnolongereligibleforexecution Oncetheeventhas completed everyprocessonthewaitqueuewillbeawakened Thisprocedure allows multiple processes to wait for a single event For example if several processes are trying to read a file from a disk then they will all be awakened once the datahavebeen readinto memorysuccessfully Although signals have always been the main mechanism for commu nicating asynchronous events among processes Linux also implements the semaphore mechanism of SystemV UNIX Aprocess can wait on a semaphore aseasilyasitcanwaitforasignal butsemaphoreshavetwoadvantages large,,,
721,to virtualmemory 20 10 Network Structure Networking is a key area of functionality for Linux Not only does Linux supportthestandardInternetprotocolsusedformost UNIX to UNIXcommuni cations butitalsoimplementsanumberofprotocolsnativetoother non UNIX operating systems In particular since Linux was originally implemented pri marily on PCs rather than on large workstations or on server class systems it supports many of the protocols typically used on PCnetworks such as AppleTalkand IPX Internally networking in the Linux kernel is implemented by three layers ofsoftware ,,,
722,to virtualmemory 20 10 Network Structure Networking is a key area of functionality for Linux Not only does Linux supportthestandardInternetprotocolsusedformost UNIX to UNIXcommuni cations butitalsoimplementsanumberofprotocolsnativetoother non UNIX operating systems In particular since Linux was originally implemented pri marily on PCs rather than on large workstations or on server class systems it supports many of the protocols typically used on PCnetworks such as AppleTalkand IPX Internally networking in the Linux kernel is implemented by three layers ofsoftware ,20.9.1 Synchronization and Signals,20.9.2 Passing of Data among Processes,20.10 Network Structure
723,fthissystemisavailable under Linux PAMallows authentication modules to be loaded on demand as specified in a system wide configuration file If a new authentication mecha nism is added at a later date it can be added to the configuration file and all systemcomponentswillimmediatelybeabletotakeadvantageofit PAMmod ules can specify authentication method s account restrictions session setup functions andpassword changingfunc tions sothat whenuserschangetheir passwords all the necessary authenti cation mechanisms can be updated at once ,20.9.2 Passing of Data among Processes,20.10 Network Structure,20.11 Security
724,fthissystemisavailable under Linux PAMallows authentication modules to be loaded on demand as specified in a system wide configuration file If a new authentication mecha nism is added at a later date it can be added to the configuration file and all systemcomponentswillimmediatelybeabletotakeadvantageofit PAMmod ules can specify authentication method s account restrictions session setup functions andpassword changingfunc tions sothat whenuserschangetheir passwords all the necessary authenti cation mechanisms can be updated at once ,,,
725,e POSIXspecification s saved user id mechanism which allowsaprocesstodropandreacquireitseffective UIDrepeatedly Forsecurity reasons aprogrammaywanttoperformmostofitsoperationsinasafemode waivingtheprivilegesgrantedbyits setuidstatus butitmaywishtoperform selected operations with all its privileges Standard UNIXimplementations achieve this capacity only by swapping the real and effective UIDs When this is done the previous effective UIDis remembered but the program s real UID doesnotalwayscorrespondtothe UIDoftheuserrunningtheprogram Saved UIDs allow a process to set its effective UIDto its real UIDand then return to,,,
726,reasons but it is modular enough in design to allow most driversto be dynamicallyloadedand unloadedatruntime Linux is a multiuser system providing protection between processes and running multiple processesaccording to a time sharing scheduler Newly createdprocessescanshareselectivepartsoftheirexecutionenvironment withtheirparentprocesses allowing multithreadedprogramming Interprocess communication is supported by both System V mechanisms message queues semaphores and shared memory and BSD s socket interface Multiple networking protocols can be accessed simultaneously through the socketinterface ,20.11.1 Authentication,20.11.2 Access Control,20.12 Summary
727,ern implementations includ ing Linux simply optimize for sequential data access Why do they do so Of what hardware characteristics does sequential access take advantage Why isrotational optimizationno longerso useful Further Reading The Linux system is a product of the Internet as a result much of the avail able documentation on Linux is available in some form on the Internet The following keysitesreferencemost ofthe usefulinformation available ,20.11.2 Access Control,20.12 Summary,Practice Exercises
728,ern implementations includ ing Linux simply optimize for sequential data access Why do they do so Of what hardware characteristics does sequential access take advantage Why isrotational optimizationno longerso useful Further Reading The Linux system is a product of the Internet as a result much of the avail able documentation on Linux is available in some form on the Internet The following keysitesreferencemost ofthe usefulinformation available ,20.12 Summary,Practice Exercises,Further Reading
729,g etc Killian84 Procfs USENIX pdf and expanded in http https www usenix org sites default Ô¨Åles usenix winter91 faulkner pdf Bibliography Love 2010 R Love Linux Kernel Development Third Edition Developer s Library 2010 Mauerer 2008 W Mauerer Professional Linux Kernel Architecture John Wiley and Sons 2008 ,Practice Exercises,Further Reading,Bibliography
730,der what circumstances would a user process request an operation that resultsin theallocation of a demand zeromemoryregion 20 20What scenarios would cause a page of memory to be mapped into a user program s address space with the copy on write attribute enabled 20 21InLinux sharedlibrariesperformm anyoperationscentraltotheoper ating system What is the advantage of keeping this functionality out of the kernel Arethereany drawbacks Explainyour answer EX 58,Further Reading,Bibliography,Chapter 20 Exercises
731,980s Microsoftand IBMcooperatedtodevelopthe OS 2 operating system which was written in assembly language for single processor Intel 80286 systems In 1988 Microsoft decided to end the joint effort with IBM and develop its own new technology orNT portable operating system to 821,Chapter 20 Exercises,Chapter 21 Windows,
732,980s Microsoftand IBMcooperatedtodevelopthe OS 2 operating system which was written in assembly language for single processor Intel 80286 systems In 1988 Microsoft decided to end the joint effort with IBM and develop its own new technology orNT portable operating system to 821,Chapter 20 Exercises,Chapter 21 Windows,21.1 History
733,ring processes and working more closely with the makersof Windows hardware and applications The result was Windows 7 which was released in October 2009 along with corresponding server edition called Windows Server 2008 R2 Among the significant engineering changes was the increased use of event tracing rather than counters or profiling to analyze system behavior Tracing runs constantly in the system watching hundr eds of scenarios execute Scenarios include process startup and exit file copy and web page load for example When one of these scenarios fails or when it succeeds but does not perform well thetracescan beanalyzed todeterminethecause ,,,
734,h a traditional keyboard and mouse and provided ways to avoid the tile based Metro interface It also continued to improve on the many security performance and reliabilitychanges in troducedin Windows 8 Although this releasewasbetterreceived thecontinuedlackofapplicationsintheWindows Store was a problem for the operating system s mobile market penetration while desktop and server application p rogrammers felt abandoned due to a lackof improvementsintheirarea 21 1 3 Windows 10 With the release of Windows 10 in July 2015 and its server companion Windows Server 2016 in October 2016 Microsoft shifted to a Windows ,,,
735,h a traditional keyboard and mouse and provided ways to avoid the tile based Metro interface It also continued to improve on the many security performance and reliabilitychanges in troducedin Windows 8 Although this releasewasbetterreceived thecontinuedlackofapplicationsintheWindows Store was a problem for the operating system s mobile market penetration while desktop and server application p rogrammers felt abandoned due to a lackof improvementsintheirarea 21 1 3 Windows 10 With the release of Windows 10 in July 2015 and its server companion Windows Server 2016 in October 2016 Microsoft shifted to a Windows ,,,
736,cations With attributes and claims system administrators need not rely on a user s name or the group the user belongs to as the only means that the security system can use to filter access to objects such as files Properties of the user such as say seniority in the organization salary and so on can also be considered Thesepropertiesareencodedas attributes whicharepairedwith conditional access control entriesinthe ACL s u c ha s Seniority 10 Years Windowsusesencryptionaspartofcommonprotocolssuchasthoseused tocommunicatesecurelywithwebsites Encryptionisalsousedtoprotectuser filesstoredonsecondarystorage Windows7andlaterversionsallowusersto,21.1.2 Windows 8,21.1.3 Windows 10,21.2 Design Principles
737,cations With attributes and claims system administrators need not rely on a user s name or the group the user belongs to as the only means that the security system can use to filter access to objects such as files Properties of the user such as say seniority in the organization salary and so on can also be considered Thesepropertiesareencodedas attributes whicharepairedwith conditional access control entriesinthe ACL s u c ha s Seniority 10 Years Windowsusesencryptionaspartofcommonprotocolssuchasthoseused tocommunicatesecurelywithwebsites Encryptionisalsousedtoprotectuser filesstoredonsecondarystorage Windows7andlaterversionsallowusersto,,,
738,on could choose to allow only user mode programssignedbyMicrosoft Google orAdobetolaunchontheirenterprise computers 21 2 2 Reliability Windowsmaturedgreatlyasanoperatingsysteminitsfirsttenyears leading toWindows2000 Atthesametime itsreliabilityincreasedduetosuchfactors asmaturityinthesourcecode extensivestresstestingofthesystem improved CPUarchitectures and automatic detection of many serious errors in drivers from both Microsoft and third parties Windows has subsequently extended the tools for achieving reliability to include automatic analysis of source code for errors tests to detect validation failures and an application version of the,,,
739,x has matured it hasdriftedfartherandfartherawayfrom POSIXcompatibility andmanymod ern Linux applications now rely on Linux specific system calls and improve mentsto glibcthatarenotstandardized Additionally itbecomesimpractical toaskusers orevenenterprises torecompilewithVisualStudioeverysingle Linux application that they d like to use Indeed compiler differences among GCC CLang and Microsoft s C C compiler often make doing so impossi ble Therefore eventhoughthesubsystemmo delstillexistsatanarchitectural level theonlysubsystemonWindowsgoingforwardwillbetheWin 32subsys temitself andcompatibilitywithother operatingsystemsisachievedthrough a newmodelthat usesPico Providersinstead ,,,
740,r or at interrupt level threads in any process running in Windows can be preempted by higher prioritythreads Thus thesystemrespondsquickly seeChapter5 Windows XPfurther improved performance by reducing the code path lengthincriticalfunctionsandimplemen tingmorescalablelockingprotocols such as queued spinlocks and pushlocks Pushlocks are like optimized spin lockswithread writelockfeatures Thenewlockingprotocolshelpedreduce systembuscyclesandincludedlock freelistsandqueues atomicread modify write operations like interlocked increment and other advanced syn chronization techniques These changes were needed because Windows XP,,,
741,uting technology To facilitate change over time the devel opers implemented Windows using a layered architecture The lowest level kernel executive runsinkernelmodeandprovidesthebasicsystemservices and abstractions that support shared use of the system On top of the execu tive severalservicesoperateinusermode Amongthemweretheenvironment subsystems that emulated different operating systems which are deprecated today Evenin the kernel Windows uses a layeredarchitecture with loadable drivers in the I Osystem so new file systems new kinds of I Odevices and new kinds of networking can be added while the system is running Drivers,,,
742, all of which can be used to rapidly extend the syst em with new services and management capabilities 21 2 6 Portability An operating system is portable if it can be movedfrom one CPUarchitecture toanotherwithrelativelyfewchanges Windowswasdesignedtobeportable Like the UNIXoperating system Windows is written primarily in C and C Thereisrelativelylittlearchitecture specificsourcecodeandverylittleassem ,,,
743,the IA 32 and AMD64 architectures were supported on client computers along with AMD64 on servers With Windows 8 32 bit ARMwas added and Windows 10now supports ARM64 aswell 21 2 7 International Support Windows was designed for international and multinational use It provides support for different locales via the national language support NLS API TheNLS API provides specialized routines to format dates time and money in accordance with national customs String comparisons are specialized to account for varying character sets UNICODE is Windows s native character code specifically in its UTL 16LE encoding format which is different from,,,
744, cause CPU3 to wake up and service this expirationifitiscurrentlyidlewhenanother nonsleeping CPUcouldhandleit instead While these measures helped they were not enough to increase battery life in mobile systems such as phones which have a fraction of the battery capacityoflaptops Windows8thusintroducedanumberoffeaturestofurther optimize battery life First the Win RTprogramming model does not allow for precisetimerswithaguaranteedexpirationtime Alltimersregisteredthrough the new APIare candidates for coalescing unlike Win 32timers which had to be manually opted in Next the concept of a dynamic tick was introduced in,,,
745,ch a device a PCcould quickly be connected to or disconnected from a full set of peripherals Contemporary PCs are designed to enable users to plug and unpluga huge host of peripheralsfrequently Support for dynamic configuration of devices is continually evolving in Windows The system can automatically recognize devices when they are pluggedinandcanfind install andloadtheappropriatedrivers oftenwith outuserintervention Whendevicesareunplugged thedriversautomatically unload and system execution continues without disrupting other software Additionally Windows Update permits downloading of third party drivers,,,
746,sprovidedby the CPUnatively One of the chief advantages of this type of architecture is that interactions betweenmodules and betweenprivilegelevels arekeptsimple and that iso lationneedsandsecurityneedsarenotnecessarilyconflatedthroughprivilege Forexample asecure protectedcomponentthatstorespasswordscanitselfbe unprivileged In the past operating syst em designers chose to meet isolation needsby making thesecurecomponent highly privileged but thisresultsina netloss for thesecurityof thesystemwhen this component iscompromised Theremainderof this sectiondescribestheselayersand subsystems ,21.2.8 Energy Efficiency,21.2.9 Dynamic Device Support,21.3 System Components
747,lities to provideadditional protectionof enterprisecredentialsthrough afeaturecalledCredentialGuard Furthermore whenDeviceGuard mentionedearlier isactivated ittakes advantage of VTL1 capabilities by moving all digital signature checking into thesecurekernel Thismeansthatevenifattackedthroughasoftwarevulner ability thenormalkernelcannotbeforcedtoloadunsigneddrivers asthe VTL 1 boundary would have to be breached for that to occur On a Device Guard protectedsystem for a kernel modepage in VTL0 to be authorized for execu tion the kernel must first ask permission from the secure kernel and only the securekernelcangrant thispageexecutableaccess Moresecuredeployments,,,
748,lities to provideadditional protectionof enterprisecredentialsthrough afeaturecalledCredentialGuard Furthermore whenDeviceGuard mentionedearlier isactivated ittakes advantage of VTL1 capabilities by moving all digital signature checking into thesecurekernel Thismeansthatevenifattackedthroughasoftwarevulner ability thenormalkernelcannotbeforcedtoloadunsigneddrivers asthe VTL 1 boundary would have to be breached for that to occur On a Device Guard protectedsystem for a kernel modepage in VTL0 to be authorized for execu tion the kernel must first ask permission from the secure kernel and only the securekernelcangrant thispageexecutableaccess Moresecuredeployments,,,
749,ylanguageonlywhenabsolutelynecessarytointerfacewiththelowest levelofthe hardwarearchitectureand whendirectregisteraccess is needed 21 3 4 1 Dispatcher The dispatcherprovidesthe foundation forthe executiveand the subsystems Most of the dispatcher is never paged out of memory and its execution is never preempted Its main responsibilit ies are thread scheduling and context switching implementationofsynchroni zationprimitives timermanagement software interrupts asynchronous and deferred procedure calls interproces sor interrupts IPIs and exception dispatching It also manages hardware and,,,
750,ylanguageonlywhenabsolutelynecessarytointerfacewiththelowest levelofthe hardwarearchitectureand whendirectregisteraccess is needed 21 3 4 1 Dispatcher The dispatcherprovidesthe foundation forthe executiveand the subsystems Most of the dispatcher is never paged out of memory and its execution is never preempted Its main responsibilit ies are thread scheduling and context switching implementationofsynchroni zationprimitives timermanagement software interrupts asynchronous and deferred procedure calls interproces sor interrupts IPIs and exception dispatching It also manages hardware and,,,
751,ssoftwareinter ruptsto deliver APCsa n dDPCs to performsystem functions such as synchro nizing threads with I Ocompletion to start thread execution and to handle timers 21 3 5 Executive The Windows executive provides a set of services that all environment sub systems use To give you a good basic overview we discuss the following services here object manager virtual memory manager process manager advanced local procedure call facility I Omanager cache manager security reference monitor plug and play and power managers registry and startup Note though that the Windows executive includes more than two dozen ser vicesintotal ,,,
752,le The remote user can watch the user s actions and can even be given control of the desktop to help resolve computing problems This latter use of terminal services uses the mirroring feature wherethealternativeuserissharingthesamesession insteadof creatinga separateone Many corporations use corporate systems maintained in data centers to run all user sessions that access corporate resources rather than allowing users to access those resources from their PCs by exclusivelydedicatingthese machines as terminal servers Each server computer may handle hundreds of remote desktop sessions This is a form of thin client computing i nw h i c h,21.3.4 Kernel,21.3.5 Executive,21.4 Terminal Services and Fast User Switching
753,ed attributes E a c ha t t r i b u t eo fafi l ei sa n independentbytestreamthatcanbecreated deleted read andwritten Some attribute types are standard for all files including the file name or names if the file has aliases such as an MS DOSshort name the creation time and the securitydescriptorthat specifiestheaccess controllist Userdataarestoredin dataattributes Mosttraditionaldatafileshavean unnamed dataattributethatcontainsall the file s data However additional data streams can be created with explicit names The IProp interfaces of the Component Object Model discussed later,21.3.5 Executive,21.4 Terminal Services and Fast User Switching,21.5 File System
754,ed attributes E a c ha t t r i b u t eo fafi l ei sa n independentbytestreamthatcanbecreated deleted read andwritten Some attribute types are standard for all files including the file name or names if the file has aliases such as an MS DOSshort name the creation time and the securitydescriptorthat specifiestheaccess controllist Userdataarestoredin dataattributes Mosttraditionaldatafileshavean unnamed dataattributethatcontainsall the file s data However additional data streams can be created with explicit names The IProp interfaces of the Component Object Model discussed later,,,
755,mmitsuccessfullybeforethecrash Periodically usuallyevery5seconds a checkpoint record is written to the log The system does not need log records prior to the checkpoint to recover from a crash They can be discarded so the logfiledoesnotgrowwithoutbounds Thefirsttimeaftersystemstartupthat anNTFSvolumeisaccessed NTFSautomaticallyperformsfile systemrecovery This scheme does not guarantee that all the user file contents are correct aftera crash It ensuresonly that the file systemdata structures the metadata files areundamagedandreflectsomeconsistentstatethatexistedpriortothe,,,
756,ssion on individual files or on all data files in a directory To compress a file NTFSdivides the file s data into compres sion units which are blocks of 16 contiguous clusters When a compression unit is written a data compression algorithm is applied If the result fits into fewer than 16 clusters the compressed version is stored When reading NTFS can determine whether data have been compressed if they have been the length of the stored compression unit is less than 16 clusters To improve per formance when reading contiguous compression units NTFSprefetches and decompressesaheadof theapplicationrequests ,,,
757,ssion on individual files or on all data files in a directory To compress a file NTFSdivides the file s data into compres sion units which are blocks of 16 contiguous clusters When a compression unit is written a data compression algorithm is applied If the result fits into fewer than 16 clusters the compressed version is stored When reading NTFS can determine whether data have been compressed if they have been the length of the stored compression unit is less than 16 clusters To improve per formance when reading contiguous compression units NTFSprefetches and decompressesaheadof theapplicationrequests ,,,
758,ginal form in the copy Achieving a consistent state for the volumerequiresthe cooperation of applications since the system cannot know when the data used by the application are in a stable state from which the application could be safely restarted TheserverversionofWindowsusesshadowcopiestoefficientlymaintain old versions of files stored on file servers This allows users to see documents astheyexistedatearlierpointsintime Ausercanthus recoverfilesthatwere accidentallydeletedorsimplylookatapreviousversionofthefile allwithout pullingoutbackup media ,,,
759,ginal form in the copy Achieving a consistent state for the volumerequiresthe cooperation of applications since the system cannot know when the data used by the application are in a stable state from which the application could be safely restarted TheserverversionofWindowsusesshadowcopiestoefficientlymaintain old versions of files stored on file servers This allows users to see documents astheyexistedatearlierpointsintime Ausercanthus recoverfilesthatwere accidentallydeletedorsimplylookatapreviousversionofthefile allwithout pullingoutbackup media ,,,
760,ginal form in the copy Achieving a consistent state for the volumerequiresthe cooperation of applications since the system cannot know when the data used by the application are in a stable state from which the application could be safely restarted TheserverversionofWindowsusesshadowcopiestoefficientlymaintain old versions of files stored on file servers This allows users to see documents astheyexistedatearlierpointsintime Ausercanthus recoverfilesthatwere accidentallydeletedorsimplylookatapreviousversionofthefile allwithout pullingoutbackup media ,,,
761,smissioncontrolprotocol Internetprotocol TCP IP suitethatisused on the Internet has become the de facto standard networking infrastructure Windows uses TCP IPto connect to a wide variety of operating systems and hardware platforms The Windows TCP IPpackage includes the simple network management protocol SNMP the dynamic host configuration pro tocol DHCP and the older Windows Internet name service WINS Windows Vista introduced a new implementation of TCP IPthat supports both IPv4 andIPv6in the same network stack This new implementation also supports,21.5.6 Change Journal,21.5.7 Volume Shadow Copies,21.6 Networking
762,smissioncontrolprotocol Internetprotocol TCP IP suitethatisused on the Internet has become the de facto standard networking infrastructure Windows uses TCP IPto connect to a wide variety of operating systems and hardware platforms The Windows TCP IPpackage includes the simple network management protocol SNMP the dynamic host configuration pro tocol DHCP and the older Windows Internet name service WINS Windows Vista introduced a new implementation of TCP IPthat supports both IPv4 andIPv6in the same network stack This new implementation also supports,,,
763,smissioncontrolprotocol Internetprotocol TCP IP suitethatisused on the Internet has become the de facto standard networking infrastructure Windows uses TCP IPto connect to a wide variety of operating systems and hardware platforms The Windows TCP IPpackage includes the simple network management protocol SNMP the dynamic host configuration pro tocol DHCP and the older Windows Internet name service WINS Windows Vista introduced a new implementation of TCP IPthat supports both IPv4 andIPv6in the same network stack This new implementation also supports,,,
764,ws A redirector is the client side object that forwards I Orequests to a remote system where theyaresatisfiedbyaserver Forperformanceandsecurity theredirectorsand serversruninkernelmode Inmoredetail access to a remotefileoccurs as follows 1 Theapplicationcallsthe I Omanagertorequestthatafilebeopenedwith a filename in thestandard UNCformat 2 TheI Omanager builds an I Orequest packet as described in Section 21 3 5 5 3 TheI Omanagerrecognizesthattheaccessisforaremotefileandcallsa drivercalleda Multiple UNC Provider MUP ,,,
765,ent 21 7 1 Access to Kernel Objects The Windows kernel provides many serv ices that application programs can use Application programs obtain these services by manipulating kernel objects A process gains access to a kernel object named XXXby calling the Create XXXfunction to open a handle to an instance of XXX T h i sh a n d l ei s unique to the process Depending on w hich object is being opened if the Create function fails it may return 0 or it may return a special constant named INVALID HANDLE VALUE Aprocess can close any handle by calling the,,,
766,ent 21 7 1 Access to Kernel Objects The Windows kernel provides many serv ices that application programs can use Application programs obtain these services by manipulating kernel objects A process gains access to a kernel object named XXXby calling the Create XXXfunction to open a handle to an instance of XXX T h i sh a n d l ei s unique to the process Depending on w hich object is being opened if the Create function fails it may return 0 or it may return a special constant named INVALID HANDLE VALUE Aprocess can close any handle by calling the,,,
767,ent 21 7 1 Access to Kernel Objects The Windows kernel provides many serv ices that application programs can use Application programs obtain these services by manipulating kernel objects A process gains access to a kernel object named XXXby calling the Create XXXfunction to open a handle to an instance of XXX T h i sh a n d l ei s unique to the process Depending on w hich object is being opened if the Create function fails it may return 0 or it may return a special constant named INVALID HANDLE VALUE Aprocess can close any handle by calling the,21.6.4 Domains,21.6.5 Active Directory,21.7 Programmer Interface
768,ent 21 7 1 Access to Kernel Objects The Windows kernel provides many serv ices that application programs can use Application programs obtain these services by manipulating kernel objects A process gains access to a kernel object named XXXby calling the Create XXXfunction to open a handle to an instance of XXX T h i sh a n d l ei s unique to the process Depending on w hich object is being opened if the Create function fails it may return 0 or it may return a special constant named INVALID HANDLE VALUE Aprocess can close any handle by calling the,,,
769, a m e t e r T h es e c o n dp r o c e s sg e t sah a n d l et os h a r et h eo b j e c t by calling OpenXXX orCreate XXX with the same name as shown in the exampleinFigure21 8 Thethirdwaytoshareobjectsisviathe DuplicateHandle function This method requires some other method of interprocess communication to pass the duplicated handle Given a handle to a process and the value of a handle within that process a second process can get a handle to the same object and thus shareit Anexampleofthis methodisshown in Figure21 9 ,,,
770, ACCESS send the value of the semaphore to Process B using a message or shared memory object Process B HANDLE hSemaphore value of semaphore from message use hSemaphore to access the semaphore Figure 21 9 Code for sharing an object by passing a handle ,,,
771,dsectionobjects anda synchronizationobject suchasanevent YetanotherisbyusingtheWindows messaging facility an approach that is particularly popular for Win 32 GUIapplications One thread can send a message to another thread or to a windowbycalling PostMessage PostThreadMessage SendMessage SendThreadMessage orSendMessageCallback Postingamessageand sendingamessagedifferinthisway Thepostroutinesareasynchronous they,,,
772,to its address space Memory mapping is also a convenient way for two processestosharememory bothprocessesmapthesamefileintotheirvirtual memory Memory mapping is a multistage process as you can see in the exampleinFigure21 12 Ifaprocesswantstomapsomeaddressspacejusttoshareamemoryregion with another process no file is needed The process calls CreateFileMap ping with a file handle of 0xffffffff a particular size and optionally a name Theresultingfile mappingobjectcanbesharedbyinheritance byname lookup ifitwas named or by handleduplication ,,,
773,ingenvironmentsandsymmetricmul tiprocessing including both 32 bit and 64 bit processors and NUMAcom puters The useof kernelobjects to providebasicservices along withsupportfor client server computing enables Windows to support a wide variety of applicationenvironments Windows provides virtual memory integrated caching and preemptive scheduling ,21.7.4 IPC Using Windows Messaging,21.7.5 Memory Management,21.8 Summary
774,indows support How does Win dows implement transport protocols Describe two networking pro tocols 21 10How isthe NTFSnamespaceorganized 21 11How does NTFShandle data structures How does NTFSrecover from a systemcrash What isguaranteedafterarecoverytakesplace 21 12How doesWindows allocateusermemory 21 13Describesomeofthewaysinwhichanapplicationcanusememoryvia theWin 32 API ,21.7.5 Memory Management,21.8 Summary,Practice Exercises
775,n dows Internals Part 1 SeventhEdition Microsoft Press 2017 ,21.8 Summary,Practice Exercises,Further Reading
776,n dows Internals Part 1 SeventhEdition Microsoft Press 2017 ,Practice Exercises,Further Reading,Bibliography
777,pagestoandfromdisk Wherearethepage tablepageskept on disk 21 28When a Windows system hibernates the system is powered off Sup pose you changed the CPUor the amount of RAMon a hibernating system Doyou think that would work Why orwhy not 21 29Giveanexampleshowinghowtheuseofasuspendcountishelpfulin suspendingand resumingthreadsinWindows EX 60,Further Reading,Bibliography,Chapter 21 Exercises
778,s classes of computers mainframes minicomputers microcomputers andhandhelds Tounderstandmodernoper atingsystems then youneedtorecogn izethethemeoffeaturemigrationand thelong historyof many operating systemfeatures asshown inFigureA 1 AgoodexampleoffeaturemigrationstartedwiththeMultiplexedInforma tionandComputingServices MULTICS operatingsystem MULTICS wasdevel 1,PART TEN APPENDICES,,
779,s classes of computers mainframes minicomputers microcomputers andhandhelds Tounderstandmodernoper atingsystems then youneedtorecogn izethethemeoffeaturemigrationand thelong historyof many operating systemfeatures asshown inFigureA 1 AgoodexampleoffeaturemigrationstartedwiththeMultiplexedInforma tionandComputingServices MULTICS operatingsystem MULTICS wasdevel 1,PART TEN APPENDICES,Appendix A Influential Operating Systems,
780,s classes of computers mainframes minicomputers microcomputers andhandhelds Tounderstandmodernoper atingsystems then youneedtorecogn izethethemeoffeaturemigrationand thelong historyof many operating systemfeatures asshown inFigureA 1 AgoodexampleoffeaturemigrationstartedwiththeMultiplexedInforma tionandComputingServices MULTICS operatingsystem MULTICS wasdevel 1,PART TEN APPENDICES,Appendix A Influential Operating Systems,A.1 Feature Migration
781,wever with the com putersof thetwentiethcentury Before the 1940s computing devices were designed and implemented to performspecific fixedtasks Modifyingoneofthosetasksrequiredagreatdeal ofeffortandmanuallabor Allthatchangedinthe1940swhenAlanTuringand JohnvonNeumann andcolleagues bothseparatelyandtogether workedon theideaofamoregeneral purpose stored program computer Suchamachine,Appendix A Influential Operating Systems,A.1 Feature Migration,A.2 Early Systems
782, grammer would first need to load the FORTRAN compiler into the computer The compiler was normally kept on magnetic tape so the proper tape would n e e dt ob em o u n t e do nat a p ed r i v e T h ep r o g r a mw o u l db er e a dt h r o u g ht h e card reader and written onto another tape The FORTRAN compiler produced assembly language output which the n had to be assembled This procedure requiredmounting another tape with the assembler The output of the assem blerwouldneedtobelinkedtosupporting libraryroutines Finally thebinary object form of the program would be readyto execute It could be loadedinto memoryanddebuggedfrom theconsole as before ,,,
783,t debuggingproblem Second jobswithsimilarneedswerebatchedtogetherandrunthroughthe computer as a group to reduce setup time For instance suppose the operator receivedone FORTRAN job one COBOLjob andanother FORTRAN job Ifsheran them in that order she would have to set up for FORTRAN load the compiler tapesandsoon thensetupfor COBOL a n dth ensetupfo r FORTRAN again If she ran the two FORTRAN programsas a batch however she couldsetuponly once for FORTRAN savingoperatortime ,,,
784,aincomputer FigureA 4 An obvious advantage of off line operation was that the main computer was no longer constrained by the speed of the card readers and line printers but was limited only by the speed of the much faster magnetic tape units The technique of using magnetic tape for all I Ocould be applied with any b a CPU card reader card readerline printer tape drives tape drives line printerCPUon line on line Figure A 4 Operation of I O devices a on line and b off line ,,,
785,ociative memory of 32 registers implemented the mapping froma virtualaddressto a physicaladdress If a page fault occurred a page replacement algorithm was invoked One memory frame was always kept empty so that a drum transfer could start immediately The page replacement algorithm attempted to predict future memory accessing behavior based on past behavior A reference bit for each frame was set whenever the frame was accessed The referencebits were read intomemoryevery1 024instructions andthelast32valuesofthesebitswere retained This history was used to define the time since the most recent ref ,A.2.2 Shared Computer Systems,A.2.3 Overlapped I/O,A.3 Atlas
786, blocks Each file had an index block with pointers to the actual data blocks Indexblocks werechained together TheXDS 940system also provided system calls to allow processes to cre ate start suspend and destroy subprocesses Aprogrammer could construct a system of processes Separate processes could share memory for communi cation and synchronization Process creation defined a tree structure where a process is the root and its subprocesses are nodes below it in the tree Each of thesubprocessescould inturn createmoresubprocesses ,A.2.3 Overlapped I/O,A.3 Atlas,A.4 XDS-940
787,g system could be built Thus the system structure was layered and only thelowerlevels comprisingthekernel wereprovided The kernel supported a collection of concurrent processes Around robin CPUschedulerwasused Althoughprocessescouldsharememory theprimary communicationandsynchronizationmechanismwasthe message system pro videdbythekernel Processescouldcommunicatewitheachotherbyexchang ingfixed sizedmessagesofeightwordsinlength Allmessageswerestoredin buffers from a common buffer pool When a message buffer was no longer required itwas returnedtothe commonpool ,A.3 Atlas,A.4 XDS-940,A.5 THE
788,g system could be built Thus the system structure was layered and only thelowerlevels comprisingthekernel wereprovided The kernel supported a collection of concurrent processes Around robin CPUschedulerwasused Althoughprocessescouldsharememory theprimary communicationandsynchronizationmechanismwasthe message system pro videdbythekernel Processescouldcommunicatewitheachotherbyexchang ingfixed sizedmessagesofeightwordsinlength Allmessageswerestoredin buffers from a common buffer pool When a message buffer was no longer required itwas returnedtothe commonpool ,A.4 XDS-940,A.5 THE,A.6 RC 4000
789,The time quantum for level iwas 2 itime units If a program did not finish its CPUburst in one time quantum it was moved downtothenextlevelofthequeue givingittwiceasmuchtime Theprogram at the highest level with the shortest quantum was run first The initial level ofaprogramwasdeterminedbyitssize sothatthetimequantumwasatleast as long asthe swap time CTSSwas extremely successful and was in use as late as 1972 Although it was limited it succeeded in demonstrating that time sharing was a con ,A.5 THE,A.6 RC 4000,A.7 CTSS
790,c tion and simple batch processing These systems were developed separately often at independent sites As a result IBMwas faced with many different computers withdifferentlanguages and differentsystemsoftware TheIBM 360 which first appeared in the mid 1960s was designed to alter this situation The IBM 360was designed as a family of computers span ning the complete range from small business machines to large scientific machines Onlyonesetofsoftwarewouldbeneededforthesesystems which allusedthesameoperatingsystem OS 360 Thisarrangementwasintendedto,A.6 RC 4000,A.7 CTSS,A.8 MULTICS
791,c tion and simple batch processing These systems were developed separately often at independent sites As a result IBMwas faced with many different computers withdifferentlanguages and differentsystemsoftware TheIBM 360 which first appeared in the mid 1960s was designed to alter this situation The IBM 360was designed as a family of computers span ning the complete range from small business machines to large scientific machines Onlyonesetofsoftwarewouldbeneededforthesesystems which allusedthesameoperatingsystem OS 360 Thisarrangementwasintendedto,A.7 CTSS,A.8 MULTICS,A.9 IBM OS/360
792,Gates and company write a new operating system for its 16 bit CPUof choice theIntel8086 Thisoperatingsystem MS DOS wassimilarto CP Mbuthad arichersetofbuilt incommands againmostlymodeledafter TOPS 10 MS DOS became the most popular personal computer operating system of its time startingin1981andcontinuingdevelopmentuntil2000 Itsupported640KBof memory withtheabilitytoaddress extended and expanded memorytoget somewhat beyond that limit It lacked fundamental current operating system features however especiallyprotectedmemory ,A.8 MULTICS,A.9 IBM OS/360,A.10 TOPS-20
793,Gates and company write a new operating system for its 16 bit CPUof choice theIntel8086 Thisoperatingsystem MS DOS wassimilarto CP Mbuthad arichersetofbuilt incommands againmostlymodeledafter TOPS 10 MS DOS became the most popular personal computer operating system of its time startingin1981andcontinuingdevelopmentuntil2000 Itsupported640KBof memory withtheabilitytoaddress extended and expanded memorytoget somewhat beyond that limit It lacked fundamental current operating system features however especiallyprotectedmemory ,A.9 IBM OS/360,A.10 TOPS-20,A.11 CP/M and MS/DOS
794,ion system and philosophy are derived from Accent but many other significant portions of the system for example the virtual memory system and task and threadmanagement weredevelopedfromscratch WorkonMachbeganinthemid1980 Theoperatingsystemwasdesigned withthe following threecritical goalsinmind 1 Emulate 4 3 BSD UNIX so that theexecutablefilesfrom a UNIXsystemcan run correctlyunderMach 2 Be a modern operating system that supports many memory models as wellas paralleland distributedcomputing 3 Havea kernelthat is simplerandeasiertomodifythan 4 3 BSD ,A.10 TOPS-20,A.11 CP/M and MS/DOS,A.12 Macintosh Operating System and Windows
795,ion system and philosophy are derived from Accent but many other significant portions of the system for example the virtual memory system and task and threadmanagement weredevelopedfromscratch WorkonMachbeganinthemid1980 Theoperatingsystemwasdesigned withthe following threecritical goalsinmind 1 Emulate 4 3 BSD UNIX so that theexecutablefilesfrom a UNIXsystemcan run correctlyunderMach 2 Be a modern operating system that supports many memory models as wellas paralleland distributedcomputing 3 Havea kernelthat is simplerandeasiertomodifythan 4 3 BSD ,A.11 CP/M and MS/DOS,A.12 Macintosh Operating System and Windows,A.13 Mach
796,ess by processbasis Hydraalsoprovides rights amplificatio Thisschemeallowsaprocedure to be certified as trustworthy to act on a formal parameter of a specified type onbehalfofanyprocessthatholdsarighttoexecutetheprocedure Therights held by a trustworthy procedure are independent of and may exceed the rights held by the calling process However such a procedure must not be regarded as universally trustworthy the procedure is not allowed to act on othertypes forinstance andthetrustworthinessmustnotbeextendedtoany other proceduresorprogramsegmentsthat mightbe executedby a process ,A.12 Macintosh Operating System and Windows,A.13 Mach,A.14 Capability-based Systems‚ÄîHydra and CAP
797,ess by processbasis Hydraalsoprovides rights amplificatio Thisschemeallowsaprocedure to be certified as trustworthy to act on a formal parameter of a specified type onbehalfofanyprocessthatholdsarighttoexecutetheprocedure Therights held by a trustworthy procedure are independent of and may exceed the rights held by the calling process However such a procedure must not be regarded as universally trustworthy the procedure is not allowed to act on othertypes forinstance andthetrustworthinessmustnotbeextendedtoany other proceduresorprogramsegmentsthat mightbe executedby a process ,,,
798,nt to make use of thisfacilitycannotsimplystudyareferencemanual asisthecasewithHydra Instead they must learn the principles and techniques of protection since the systemprovidesthem withno libraryof procedures A 15 Other Systems Thereare of course other operatingsystems andmost of themhaveinterest ing properties The MCPoperating system for the Burroughs computer family was the first to be written in a system programming language It supported segmentation and multiple CPUs TheSCOPEoperating system for the CDC 6600 was also a multi CPUsystem The coordination and synchronization of themultipleprocessesweresurprisinglywelldesigned ,,,
799,nt to make use of thisfacilitycannotsimplystudyareferencemanual asisthecasewithHydra Instead they must learn the principles and techniques of protection since the systemprovidesthem withno libraryof procedures A 15 Other Systems Thereare of course other operatingsystems andmost of themhaveinterest ing properties The MCPoperating system for the Burroughs computer family was the first to be written in a system programming language It supported segmentation and multiple CPUs TheSCOPEoperating system for the CDC 6600 was also a multi CPUsystem The coordination and synchronization of themultipleprocessesweresurprisinglywelldesigned ,A.14.1 Hydra,A.14.2 Cambridge CAP System,A.15 Other Systems
800,ed by Tevanian et al 1987b A good resource describing the Mach project can be found at http www cs cmu edu afs cs project mach public www mach html McKeag and Wilson 1976 discuss the MCPoperating system for the Burroughscomputerfamilyaswellasthe SCOPEoperatingsystemforthe CDC 6600 The Hydra system was described by Wulf et al 1981 The CAPsystem was described by Needham and Walker 1977 Organick 1972 discussed theMULTICS ring protectionsystem ,A.14.2 Cambridge CAP System,A.15 Other Systems,Further Reading
801, Payne and F H Sumner The Manchester University Atlas Operating System Part II User s Description Computer Journal Volume4 Number3 1961 pages 226 229 Kenah et al 1988 L J Kenah R E Goldenberg and S F Bate V AX VMS Internals and Data Structures Digital Press 1988 Kilburn et al 1961 T Kilburn D J Howarth R B Payne andF H Sumner TheManchesterUniversityAtlasOperatingSystem PartI InternalOrganiza tion Computer Journal Volume4 Number3 1961 pages222 225 ,A.15 Other Systems,Further Reading,Bibliography
802,perating system which was written in assembly language for single processor Intel 80286 systems In 1988 Microsoft decided to end the joint effort with IBM and develop its own new technology orNT portable operating system to supportboththe OS 2andPOSIXapplication programminginterfaces APIs In 1,Bibliography,Appendix B Windows,
803,perating system which was written in assembly language for single processor Intel 80286 systems In 1988 Microsoft decided to end the joint effort with IBM and develop its own new technology orNT portable operating system to supportboththe OS 2andPOSIXapplication programminginterfaces APIs In 1,Bibliography,Appendix B Windows,B.1 History
804,ions are reflected in the core of the system In thischapter we focus primarilyon thecore components of Windows 7 B 2 Design Principles Microsoft s design goals for Windows included security reliability Windows andPOSIXapplication compatibility high performance extensibility portabil ity and international support Some additional goals energy efficiency and dynamicdevicesupport haverecentlybeenaddedtothislist Next wediscuss eachof thesegoals and howit isachievedinWindows 7 B 2 1 Security Windows7securitygoalsrequiredmorethanjustadherencetothedesignstan dards that had enabled Windows NT4 0 to receive a C2 security classification,Appendix B Windows,B.1 History,B.2 Design Principles
805,ions are reflected in the core of the system In thischapter we focus primarilyon thecore components of Windows 7 B 2 Design Principles Microsoft s design goals for Windows included security reliability Windows andPOSIXapplication compatibility high performance extensibility portabil ity and international support Some additional goals energy efficiency and dynamicdevicesupport haverecentlybeenaddedtothislist Next wediscuss eachof thesegoals and howit isachievedinWindows 7 B 2 1 Security Windows7securitygoalsrequiredmorethanjustadherencetothedesignstan dards that had enabled Windows NT4 0 to receive a C2 security classification,,,
806,gnaturesto signoperatingsystembinariessoitcanverifythatthe fileswereproducedbyMicrosoftoranotherknowncompany Insomeeditions ofWindows a code integrity moduleisactivatedatboottoensurethatallthe loaded modules in the kernel have valid signatures assuring that they have not beentamperedwithby anoff line attack B 2 2 Reliability Windowsmaturedgreatlyasanoperatingsysteminitsfirsttenyears leading toWindows2000 Atthesametime itsreliabilityincreasedduetosuchfactors asmaturityinthesourcecode extensivestresstestingofthesystem improved CPUarchitectures and automatic detection of many serious errors in drivers from both Microsoft and third parties Windows has subsequently extended,,,
807,aswellas providingdatato guidefuturereleasesof Windows B 2 3 Windows and POSIX Application Compatibility As mentioned Windows XPwas both an update of Windows 2000 and a replacementforWindows95 98 Windows2000focusedprimarilyoncompat ibilityforbusinessapplications TherequirementsforWindows XPincludeda much greater compatibility with the consumer applications that ran on Win dows 95 98 Application compatibility is difficult to achieve because many applications check for a particular version of Windows may depend to some extentonthequirksoftheimplementationof APIs mayhavelatentapplication bugsthatweremaskedintheprevioussystem andsoforth Applicationsmay,,,
808,ready and its priority is temporarily boosted to avoid the scheduling delays that would occur if ithadto wait forthreadsalreadyinthe queue Windows XPfurther improved performance by reducing the code path length in critical functions using better algorithms and per processor data structures using memory coloring for non uniform memory access NUMA machines andimplementingmorescalab lelocking protocols suchasqueued spinlocks The new locking protoco ls helped reduce system bus cycles and included lock free lists and queues atomic read modify write operations likeinterlockedincrement and otheradvancedsynchronization techniques ,,,
809,ependentcodein adynamiclinklibrary DLL calledthe hardware abstraction layer HAL that isloadedwiththekernel TheWindows kerneldependsonthe HALinterfaces rather than on the underlying chipset details This allows the single set of kernelanddriverbinariesforaparticular CPUtobeusedwithdifferentchipsets simplyby loadinga differentversionof the HAL Over the years Windows has been ported to a number of different CPU architectures Intel IA 32 compatible 32 bit CPUs AMD64 compatible and IA64 64 bitCPUs theDECAlpha and the MIPSand Power PC CPUs Most of these CPUarchitecturesfailedinthemarket WhenWindows7shipped onlythe IA ,,,
810,ependentcodein adynamiclinklibrary DLL calledthe hardware abstraction layer HAL that isloadedwiththekernel TheWindows kerneldependsonthe HALinterfaces rather than on the underlying chipset details This allows the single set of kernelanddriverbinariesforaparticular CPUtobeusedwithdifferentchipsets simplyby loadinga differentversionof the HAL Over the years Windows has been ported to a number of different CPU architectures Intel IA 32 compatible 32 bit CPUs AMD64 compatible and IA64 64 bitCPUs theDECAlpha and the MIPSand Power PC CPUs Most of these CPUarchitecturesfailedinthemarket WhenWindows7shipped onlythe IA ,,,
811, the serial printer or game ports on the back of a computer but that was it The next steps toward dynamicconfiguration of PCswerelaptopdocksand PCMIAcards A PCcould suddenly be connected to or disconnected from a whole set of peripherals In acontemporary PC thesituationhascompletelychanged PCsaredesignedto let users to plug and unplug a huge host of peripherals all the time external disks thumb drives cameras andthe likeareconstantly coming and going Support for dynamic configuration of devices is continually evolving in Windows The system can automatically recognize devices when they are,,,
812, the serial printer or game ports on the back of a computer but that was it The next steps toward dynamicconfiguration of PCswerelaptopdocksand PCMIAcards A PCcould suddenly be connected to or disconnected from a whole set of peripherals In acontemporary PC thesituationhascompletelychanged PCsaredesignedto let users to plug and unplug a huge host of peripherals all the time external disks thumb drives cameras andthe likeareconstantly coming and going Support for dynamic configuration of devices is continually evolving in Windows The system can automatically recognize devices when they are,,,
813, the serial printer or game ports on the back of a computer but that was it The next steps toward dynamicconfiguration of PCswerelaptopdocksand PCMIAcards A PCcould suddenly be connected to or disconnected from a whole set of peripherals In acontemporary PC thesituationhascompletelychanged PCsaredesignedto let users to plug and unplug a huge host of peripherals all the time external disks thumb drives cameras andthe likeareconstantly coming and going Support for dynamic configuration of devices is continually evolving in Windows The system can automatically recognize devices when they are,,,
814,andsubsystems B 3 1 Hardware Abstraction Layer TheHALis the layer of software that hides hardware chipset differences from upper levels of the operating system The HALexports a virtual hard ware interface that is used by the kernel dispatcher the executive and the device drivers Only a single version of each device driver is required for,B.2.8 Energy Efficiency,B.2.9 Dynamic Device Support,B.3 System Components
815,andsubsystems B 3 1 Hardware Abstraction Layer TheHALis the layer of software that hides hardware chipset differences from upper levels of the operating system The HALexports a virtual hard ware interface that is used by the kernel dispatcher the executive and the device drivers Only a single version of each device driver is required for,,,
816,e waiting state when it is waiting for a dispatcher object to be signaled Athread is in the transition state while it waits for resources necessary for execution forexample itmaybewaitingforitskernelstacktobeswappedin fromdisk Athread entersthe terminated state when itfinishes execution The dispatcher uses a 32 level priority scheme to determine the order of threadexecution Prioritiesaredivided intotwoclasses variableclassandreal time class The variable class contains threads having priorities from 1 to 15 and the real time class contains threads with priorities ranging from 16 to 31 ,,,
817,ections are used to map files Local communication endpointsareimplementedasportobjects User mode code accesses these obje cts using an opaque value called a handle which is returned by many APIs Each process has a handle table containing entries that track the objects used by the process The system pro cess which contains the kernel has its own handle table which is protected fromusercode ThehandletablesinWindowsarerepresentedbyatreestruc ture whichcanexpandfromholding1 024handlestoholdingover16million Kernel modecodecanaccessanob jectbyusingeitherahandleora referenced pointer ,,,
818, PCwithouthavingtologoffandonbetweenusers Microsoft calls thisuseof sessions fastuserswitching Users can also create new sessions or connect to existing sessions on one PCfrom a session running on another Windows PC The terminal server TS connectsoneofthe GUIwindowsinauser slocalsessiontotheneworexisting session called a remote desktop on the remote computer The most common use of remote desktops is for users to connect to a session on their work PC from theirhome PC Many corporations use corporate terminal server systems maintained in datacenterstorunallusersessionsthataccesscorporateresources ratherthan,B.3.2 Kernel,B.3.3 Executive,B.4 Terminal Services and Fast User Switching
819,rs LCNs asdiskaddresses Itassignsthem by numbering clusters from the beginning of the disk to the end Using this scheme thesystemcancalculateaphysicaldiskoffset inbytes bymultiplying theLCNby theclustersize A file in NTFSis not a simple byte stream as it is in UNIX rather it is a structured object consisting of typed attributes E a c ha t t r i b u t eo fafi l ei sa n independentbytestreamthatcanbecreated deleted read andwritten Some attribute types are standard for all files including the file name or names if the file has aliases such as an MS DOSshort name the creation time and the,B.3.3 Executive,B.4 Terminal Services and Fast User Switching,B.5 File System
820,rs LCNs asdiskaddresses Itassignsthem by numbering clusters from the beginning of the disk to the end Using this scheme thesystemcancalculateaphysicaldiskoffset inbytes bymultiplying theLCNby theclustersize A file in NTFSis not a simple byte stream as it is in UNIX rather it is a structured object consisting of typed attributes E a c ha t t r i b u t eo fafi l ei sa n independentbytestreamthatcanbecreated deleted read andwritten Some attribute types are standard for all files including the file name or names if the file has aliases such as an MS DOSshort name the creation time and the,,,
821,he transaction writesa commit recordtothe logto signifythat thetransaction succeeded After a crash the system can restore the file system data structures to a consistent state by processing the log records first redoing the operations for committed transactions and then undoing the operations for transactions that did not commit successfully before the crash Periodically usually every 5 seconds a checkpoint record is written to the log The system does not need log records prior to the checkpoint to recover from a crash They can be,,,
822,anentryfor foo bar dirwouldbeamatchfor foo bar dir2 dir3 myfile The prefix matching cache allows path name traversal to begin much deeper inthetree savingmanysteps Enforcingtraversalchecksmeansthattheuser s access must be checked at eachdirectorylevel For instance a usermight lack permission to traverse foo bar so starting at the access for foo bar dir would bean error B 5 4 Volume Management and Fault Tolerance FtDiskis the fault tolerant disk driver for Windows When installed it pro videsseveralwaystocombinemultiplediskdrivesintoonelogicalvolumeso as toimproveperformance capacity orreliability ,,,
823,anentryfor foo bar dirwouldbeamatchfor foo bar dir2 dir3 myfile The prefix matching cache allows path name traversal to begin much deeper inthetree savingmanysteps Enforcingtraversalchecksmeansthattheuser s access must be checked at eachdirectorylevel For instance a usermight lack permission to traverse foo bar so starting at the access for foo bar dir would bean error B 5 4 Volume Management and Fault Tolerance FtDiskis the fault tolerant disk driver for Windows When installed it pro videsseveralwaystocombinemultiplediskdrivesintoonelogicalvolumeso as toimproveperformance capacity orreliability ,,,
824,rm of symbolic links similartothosefoundin UNIX Thelinkscanbeabsoluteorrelative can point to objects that do not exist and can point to both files and directories evenacrossvolumes NTFSalsosupports hard links whereasinglefilehasan entryin more than one directoryofthe same volume B 5 7 Change Journal NTFSkeeps a journal describing all changes that have been made to the file system User modeservicescan receivenotifications of changes to the journal and then identify what files have changed by reading from the journal The search indexer service uses the change journal to identify files that need to be,,,
825,rm of symbolic links similartothosefoundin UNIX Thelinkscanbeabsoluteorrelative can point to objects that do not exist and can point to both files and directories evenacrossvolumes NTFSalsosupports hard links whereasinglefilehasan entryin more than one directoryofthe same volume B 5 7 Change Journal NTFSkeeps a journal describing all changes that have been made to the file system User modeservicescan receivenotifications of changes to the journal and then identify what files have changed by reading from the journal The search indexer service uses the change journal to identify files that need to be,,,
826,rm of symbolic links similartothosefoundin UNIX Thelinkscanbeabsoluteorrelative can point to objects that do not exist and can point to both files and directories evenacrossvolumes NTFSalsosupports hard links whereasinglefilehasan entryin more than one directoryofthe same volume B 5 7 Change Journal NTFSkeeps a journal describing all changes that have been made to the file system User modeservicescan receivenotifications of changes to the journal and then identify what files have changed by reading from the journal The search indexer service uses the change journal to identify files that need to be,,,
827, component to use any available transpo rt mechanism Similar reasoning led to the streams mechanism in UNIX TheTDIsupports both connection based and connectionless transportand has functions to send any typeof data B 6 2 Protocols Windows implements transport protocols as drivers These drivers can be loaded and unloaded from the system dynamically although in practice the system typically has to be rebooted after a change Windows comes with severalnetworking protocols Next wediscuss anumber of theseprotocols ,,,
828, component to use any available transpo rt mechanism Similar reasoning led to the streams mechanism in UNIX TheTDIsupports both connection based and connectionless transportand has functions to send any typeof data B 6 2 Protocols Windows implements transport protocols as drivers These drivers can be loaded and unloaded from the system dynamically although in practice the system typically has to be rebooted after a change Windows comes with severalnetworking protocols Next wediscuss anumber of theseprotocols ,B.5.7 Change Journal,B.5.8 Volume Shadow Copies,B.6 Networking
829, component to use any available transpo rt mechanism Similar reasoning led to the streams mechanism in UNIX TheTDIsupports both connection based and connectionless transportand has functions to send any typeof data B 6 2 Protocols Windows implements transport protocols as drivers These drivers can be loaded and unloaded from the system dynamically although in practice the system typically has to be rebooted after a change Windows comes with severalnetworking protocols Next wediscuss anumber of theseprotocols ,,,
830, component to use any available transpo rt mechanism Similar reasoning led to the streams mechanism in UNIX TheTDIsupports both connection based and connectionless transportand has functions to send any typeof data B 6 2 Protocols Windows implements transport protocols as drivers These drivers can be loaded and unloaded from the system dynamically although in practice the system typically has to be rebooted after a change Windows comes with severalnetworking protocols Next wediscuss anumber of theseprotocols ,,,
831,teadofa MUP For portability redirectors and servers use the TDI APIfor network trans port The requests themselves are expressed in a higher level protocol which bydefaultisthe SMBprotocoldescribedinSectionB 6 2 Thelistofredirectors ismaintainedinthe systemhiveof theregistry B 6 3 1 Distributed File System UNCnames are not always convenient because multiple file servers may be availabletoservethesamecontentand UNCnamesexplicitlyincludethename,,,
832,ASS Allusersretaintheabilityto restrictaccesstotheirownworkstations however nomatterwhatanydomain controllermaysay B 6 5 Active Directory Active Directory is the Windows implementation of lightweight directory access protocol LDAP services Active Directory stores the topology infor mation about the domain keeps the domain based user and group accounts andpasswords andprovidesadomain basedstoreforWindowsfeaturesthat need it such as Windows group policy Administrators use group policies to establish uniform standards for desktop preferences and software For many,,,
833,ASS Allusersretaintheabilityto restrictaccesstotheirownworkstations however nomatterwhatanydomain controllermaysay B 6 5 Active Directory Active Directory is the Windows implementation of lightweight directory access protocol LDAP services Active Directory stores the topology infor mation about the domain keeps the domain based user and group accounts andpasswords andprovidesadomain basedstoreforWindowsfeaturesthat need it such as Windows group policy Administrators use group policies to establish uniform standards for desktop preferences and software For many,,,
834,RIBUTES sa sa nlength sizeof sa sa lpSecurityDescriptor NULL sa bInheritHandle TRUE Handle a semaphore CreateSemaphore sa 1 1 NULL char comand line 132 ostrstream ostring command line sizeof command line ostring a semaphore ends CreateProcess another process exe command line NULL NULL TRUE Figure B 8 Code enabling a child to share an object by inheriting a handle ,B.6.4 Domains,B.6.5 Active Directory,B.7 Programmer Interface
835,RIBUTES sa sa nlength sizeof sa sa lpSecurityDescriptor NULL sa bInheritHandle TRUE Handle a semaphore CreateSemaphore sa 1 1 NULL char comand line 132 ostrstream ostring command line sizeof command line ostring a semaphore ends CreateProcess another process exe command line NULL NULL TRUE Figure B 8 Code enabling a child to share an object by inheriting a handle ,,,
836,RIBUTES sa sa nlength sizeof sa sa lpSecurityDescriptor NULL sa bInheritHandle TRUE Handle a semaphore CreateSemaphore sa 1 1 NULL char comand line 132 ostrstream ostring command line sizeof command line ostring a semaphore ends CreateProcess another process exe command line NULL NULL TRUE Figure B 8 Code enabling a child to share an object by inheriting a handle ,,,
837,eduled by the kernel dispatcher Thus a process contains one or more threads A process is created when a thread in some other process calls the CreateProcess API This routine loads any dynamic link libraries used by the process and creates an initial thread in the process Additional threads can be created by the CreateThread function Each thread is created with its own stack which defaults to 1 MBunless otherwise specifiedin an argumentto CreateThread ,,,
838,er is by using the Windows messaging facility an approach that is particularly popular for Win 32 GUIapplications One thread can send a message to another thread or to a windowbycalling PostMessage PostThreadMessage SendMessage SendThreadMessage orSendMessageCallback Postingamessageand sendingamessagedifferinthisway thepostroutinesareasynchronous they return immediately and the calling thread does not know when the message,,,
839, page size Examples of thesefunctions appearinFigureB 12 Aprocessmaylocksomeofitscommittedpagesintophysicalmemoryby calling VirtualLock The maximum number of pages a process can lock is 30 unlesstheprocessfirstcalls SetProcessWorkingSetSize toincreasethe maximumworking setsize B 7 5 2 Memory Mapping Files Another way for an application to use memory is by memory mapping a file into its address space Memory mapping is also a convenient way for two,,,
840,ic services along with support for client server computing enablesWindowstosupportaw idevarietyofapplicationenviron ments Windowsprovidesvirtualmemory integratedcaching andpreemptive scheduling It supports elaborate securi ty mechanisms and includes interna tionalizationfeatures Windowsrunsonawidevarietyofcomputers sousers can choose and upgrade hardware to match their budgets and performance requirementswithout needingtoa lterthe applicationstheyrun ,B.7.4 IPC Using Windows Messaging,B.7.5 Memory Management,B.8 Summary
841,ndows kernel together withacollectionofslidesandother CRKcurriculummaterials isavailablefrom www microsoft com WindowsAcademic foruseby universities Bibliography Brown 2000 K Brown Programming Windows Security Addison Wesley 2000 Iseminger 2000 D Iseminger Active Directory Services for Microsoft Windows 2000 Technical Reference MicrosoftPress 2000 ,B.7.5 Memory Management,B.8 Summary,Practice Exercises
842,ndows kernel together withacollectionofslidesandother CRKcurriculummaterials isavailablefrom www microsoft com WindowsAcademic foruseby universities Bibliography Brown 2000 K Brown Programming Windows Security Addison Wesley 2000 Iseminger 2000 D Iseminger Active Directory Services for Microsoft Windows 2000 Technical Reference MicrosoftPress 2000 ,B.8 Summary,Practice Exercises,Further Reading
843,ndows kernel together withacollectionofslidesandother CRKcurriculummaterials isavailablefrom www microsoft com WindowsAcademic foruseby universities Bibliography Brown 2000 K Brown Programming Windows Security Addison Wesley 2000 Iseminger 2000 D Iseminger Active Directory Services for Microsoft Windows 2000 Technical Reference MicrosoftPress 2000 ,Practice Exercises,Further Reading,Bibliography
844,aborato ries to support UNIX UNIXwas also moved to larger PDP 11models such as the11 45and11 70 Multiprogrammingandotherenhancementswereadded whenitwasrewritteninCandmovedtosystems suchasthe11 45 thathad hardwaresupportfor multiprogramming AsUNIXdeveloped it became widely used within Bell Laboratories and gradually spread to a few universities The first version widely available out 1,Bibliography,Appendix C BSD UNIX,
845,aborato ries to support UNIX UNIXwas also moved to larger PDP 11models such as the11 45and11 70 Multiprogrammingandotherenhancementswereadded whenitwasrewritteninCandmovedtosystems suchasthe11 45 thathad hardwaresupportfor multiprogramming AsUNIXdeveloped it became widely used within Bell Laboratories and gradually spread to a few universities The first version widely available out 1,Bibliography,Appendix C BSD UNIX,C.1 UNIX History
846,eorganizations suchas RAND BBN theUniversityofIllinois Harvard Purdue and DEC Themostinfluential UNIXdevelopmentgroupoutsideofBellLaboratoriesand AT T however has beentheUniversityof CaliforniaatBerkeley BillJoyandOzalpBabaogludidthefirstBerkeley VAX UNIX workin1978 They added virtual memory demand paging and page replacement to 32V to produce 3BSD UNIX This version was the first to implement any of these facilities on a UNIXsystem The large virtual memory space of 3BSDallowed the development of very large programs such as Berkeley s own Franz LISP The memory management work convinced the Defense Advanced Research,,,
847,eorganizations suchas RAND BBN theUniversityofIllinois Harvard Purdue and DEC Themostinfluential UNIXdevelopmentgroupoutsideofBellLaboratoriesand AT T however has beentheUniversityof CaliforniaatBerkeley BillJoyandOzalpBabaogludidthefirstBerkeley VAX UNIX workin1978 They added virtual memory demand paging and page replacement to 32V to produce 3BSD UNIX This version was the first to implement any of these facilities on a UNIXsystem The large virtual memory space of 3BSDallowed the development of very large programs such as Berkeley s own Franz LISP The memory management work convinced the Defense Advanced Research,,,
848,ion andthereforeneededtobe redoneas XPG4 In1989 the ANSIstandardsbodystandardizedtheCprogram ming language producing an ANSIC specification that vendorswerequick to adopt As such projects continue the flavors of UNIXwill converge and lead to one programming interface to UNIX allowing UNIXto become even more popular In fact two separate sets of powerful UNIXvendors are working on thisproblem The AT T guided UNIXInternational UI andtheOpenSoftware Foundation OSF have both agreed to follow the POSIXstandard Recently many of the vendors involved in those two groups have agreed on further standardization the COSEagreement ,,,
849,a time sharing system The standard user interface theshell issimpleand canbereplacedbyanother ifdesired Thefilesystem isamultileveltree whichallowsuserstocreatetheirownsubdirectories Each userdatafile issimplyasequenceof bytes Diskfilesand I Odevicesaretreatedassimilarlyaspossible Thus device dependenciesandpeculiaritiesarekeptinthekernelasmuchaspossible Even in the kernel most of themare confined tothe devicedrivers UNIXsupports multiple processes A process can easily create new pro cesses CPUscheduling is a simple priority algorithm FreeBSDuses demand,,,
850,a time sharing system The standard user interface theshell issimpleand canbereplacedbyanother ifdesired Thefilesystem isamultileveltree whichallowsuserstocreatetheirownsubdirectories Each userdatafile issimplyasequenceof bytes Diskfilesand I Odevicesaretreatedassimilarlyaspossible Thus device dependenciesandpeculiaritiesarekeptinthekernelasmuchaspossible Even in the kernel most of themare confined tothe devicedrivers UNIXsupports multiple processes A process can easily create new pro cesses CPUscheduling is a simple priority algorithm FreeBSDuses demand,C.1.3 The Spread of UNIX,C.1.4 History of FreeBSD,C.2 Design Principles
851, shells and commands compilers and interpreters system libraries system call interface to the kernel kernel interface to the hardwarefile system swapping block I O system disk and tape driversCPU scheduling page replacement demand paging virtual memorysignals terminal handling character I O system terminal drivers device controllers disks and tapesmemory controllers physical memoryterminal controllers terminals Figure C 2 4 4BSD layer structure ,C.1.4 History of FreeBSD,C.2 Design Principles,C.3 Programmer Interface
852, for applications systems programs such as text formatters usr compat for programs from otheroperatingsystems suchasLinux or usr local bin forsystemsprograms written at the local site Library files such as the C Pascal and FORTRAN subroutinelibraries arekeptin lib or usr libor usr local lib The files of users themselves are stored in a separate directory for each user typically in usr Thus the user directory for carolwould normally be in usr carol For a large system these directoriesmay be further grouped to ease administration creating a file structure with usr prof avi and usr staff carol Administrative files and programs such as the password file are kept in etc ,,,
853,all and are deleted by rmdir Thecurrent directoryis changed by cd Althoughthestandardfilecalls open andothers canbeusedondirecto ries it is inadvisable to do so since directories have an internal structure that must be preserved Instead another set of system calls is provided to open a directory to step through each file entry within the directory to close the directory and to perform other functions these are opendir readdir closedir and others C 3 2 Process Control Aprocessis a program in execution Processes are identified by their process identifier which is an integer Anew process is created by the fork system,,,
854,inedeasily The quitsignal SIGQUIT isusuallyproduced bytheÀÜbscharacter ASCII28 The quitsignalbothstopsthecurrentlyexecut ing program and dumps its current memory image to a file named corein the currentdirectory Thecorefilecanbeusedbydebuggers SIGILLisproducedby anillegalinstructionand SIGSEGV byanattempttoaddressmemoryoutsideof thelegalvirtualmemoryspace ofa process Arrangements can be made either for most signals to be ignored to have no effect or for a routine in the user process a signal handler to be called A signalhandlermaysafelydooneoftwoth ingsbeforereturningfromcatching a signal call the exit system call or modify a global variable One signal,,,
855,of a process that p r o c e s si si nt h ef o r e g r o u n da n di sa l l o w e dt op e r f o r m I O If a nonmatching background processattemptsthesame a SIGTTINorSIGTTOU signalissentto its process group This signal usually causes the process group to freeze until it is foregrounded by the user at which point it receives a SIGCONT signal indicating that the process can perform the I O Similarly a SIGSTOP may be sentto theforegroundprocess groupto freezeit C 3 5 Information Manipulation System calls exist to set and return both an interval timer getitimer setitimer and the current time gettimeofday settimeofday i n,,,
856,of a process that p r o c e s si si nt h ef o r e g r o u n da n di sa l l o w e dt op e r f o r m I O If a nonmatching background processattemptsthesame a SIGTTINorSIGTTOU signalissentto its process group This signal usually causes the process group to freeze until it is foregrounded by the user at which point it receives a SIGCONT signal indicating that the process can perform the I O Similarly a SIGSTOP may be sentto theforegroundprocess groupto freezeit C 3 5 Information Manipulation System calls exist to set and return both an interval timer getitimer setitimer and the current time gettimeofday settimeofday i n,,,
857,programliststhenamesofthefilesinthecurrentdirectory Anyof 28 options can ask that properties of the files be displayed also For example the loption asks for a long listing showing the file name owner protection dateand timeof creation and size The cpprogram createsa newfile that isa copyofanexistingfile The mvprogrammovesafilefromoneplacetoanother in the directory tree In most cases th is move simply requires a renaming of thefile Ifnecessary however thefileiscopiedtothenewlocation andtheold copyisdeleted Afileisdeletedbythe rmprogram whichmakesan unlink systemcall ,,,
858,programliststhenamesofthefilesinthecurrentdirectory Anyof 28 options can ask that properties of the files be displayed also For example the loption asks for a long listing showing the file name owner protection dateand timeof creation and size The cpprogram createsa newfile that isa copyofanexistingfile The mvprogrammovesafilefromoneplacetoanother in the directory tree In most cases th is move simply requires a renaming of thefile Ifnecessary however thefileiscopiedtothenewlocation andtheold copyisdeleted Afileisdeletedbythe rmprogram whichmakesan unlink systemcall ,C.3.5 Information Manipulation,C.3.6 Library Routines,C.4 User Interface
859, in the search path is searched in order for a file of the same name If a file is found it is loaded and executed The search path can be set by the user The directories binand usr binarealmostalwaysinthesearchpath and atypical search path on a FreeBSDsystemmight be usr avi bin usr local bin bin usr bin Thelscommand sobjectfileis bin ls andtheshellitselfis bin sh theBourne shell or bin csh the Cshell Execution of a command is done by a fork system call followed by an execve of the object file The shell usually then does a wait to suspend,,,
860,e of theelegantdesignfeaturesof UNIX The common shells have a simple syntax for changing what files are open for the standard I Ostreams of a process Changing a standard file is called I Oredirection The syntax for I Oredirection is shown in Figure C 5 In this command meaning of command ls filea direct output of ls to file filea pr filea fileb lpr fileb make program errsinput from filea and output to fileb input from fileb save both standard output and standard error in a file Figure C 5 Standard io redirection ,,,
861,ly becomingastandard Theheartof UNIXis ofcourse thekernel Thiskernelis much more difficult to change than is the user interface because all programs depend on the system calls that it provides to remain consistent Of course new system calls can be added to increase functionality but programs must thenbemodifiedto usethenewcalls C 5 Process Management A major design problem for operating systems is the representation of pro cesses One substantial difference between UNIXand many other systems is theeasewithwhichmultipleprocessescanbecreatedandmanipulated These,,,
862,ly becomingastandard Theheartof UNIXis ofcourse thekernel Thiskernelis much more difficult to change than is the user interface because all programs depend on the system calls that it provides to remain consistent Of course new system calls can be added to increase functionality but programs must thenbemodifiedto usethenewcalls C 5 Process Management A major design problem for operating systems is the representation of pro cesses One substantial difference between UNIXand many other systems is theeasewithwhichmultipleprocessescanbecreatedandmanipulated These,C.4.2 Standard I/O,"C.4.3 Pipelines, Filters, and Shell Scripts",C.5 Process Management
863,ther than in the process structure This structure is mapped read only into user virtual address space so user processes can read its contents It is writable by the kernel The user structure contains a copy of the process control block orPCB which is kept here for saving the process s general registers stack pointer program counter and page table base registers when the process is not running Thereis space to keepsystem call parameters and return values Alluserandgroupidentifiersassociatedwiththeprocess notjusttheeffective useridentifierkeptintheprocessstructure arekepthere Signals timers and quotas have data structures here Of more obvious relevance to the ordinary,,,
864,e after a specified interval The subrou tine to be called in this case causes the rescheduling and then resubmits a timeout to call itself again The priority recomputationisalsotimedbyasubroutinethatresubmitsatimeoutforitself There is no preemptionof one process by another in the kernel Aprocess may relinquish the CPUbecause it is waiting for I Oor because its time slice has expired When a process chooses to relinquish the CPU i tg o e st o sleep on anevent The kernel primitive used for this purpose is called sleep not to be confused with the user level library routine of the same name Sleep takesanargumentthatis byconvention theaddressofakerneldata,,,
865,cheduling ofChapter3 However thenegative feedbackproperty of the priority scheme provides some long term scheduling in that it largely determines the long term job mix Medium term scheduling is done by the swapping mechanism describedinSectionC 6 C 6 Memory Management Much of UNIX s earlydevelopmentwas doneona PDP 11 ThePDP 11has only eightsegmentsinitsvirtualaddressspace andthesizeofeachisatmost8 192 bytes The larger machines such as the PDP 11 70 allow separate instruction and address spaces effectively doubling the address space and number of segments butthisaddressspaceisstill relativelysmall Inaddition thekernel,C.5.1 Process Control Blocks,C.5.2 CPU Scheduling,C.6 Memory Management
866,o so up to seven copies may be required before the fragment becomes a block Provisions have been made for programs to discover the block size for a file so that transfers of that size can be made to avoidfragment recopying C 7 2 Inodes Afileisrepresentedbyan inode whichisarecordthatstoresmostoftheinfor mation about a specific file on the disk See Figure C 7 The name inode pro nounced EYE node is derived from index node and was originally spelled i node the hyphen fell out of use over the years The term is sometimes spelled In o d e ,C.5.2 CPU Scheduling,C.6 Memory Management,C.7 File System
867,o so up to seven copies may be required before the fragment becomes a block Provisions have been made for programs to discover the block size for a file so that transfers of that size can be made to avoidfragment recopying C 7 2 Inodes Afileisrepresentedbyan inode whichisarecordthatstoresmostoftheinfor mation about a specific file on the disk See Figure C 7 The name inode pro nounced EYE node is derived from index node and was originally spelled i node the hyphen fell out of use over the years The term is sometimes spelled In o d e ,,,
868,o so up to seven copies may be required before the fragment becomes a block Provisions have been made for programs to discover the block size for a file so that transfers of that size can be made to avoidfragment recopying C 7 2 Inodes Afileisrepresentedbyan inode whichisarecordthatstoresmostoftheinfor mation about a specific file on the disk See Figure C 7 The name inode pro nounced EYE node is derived from index node and was originally spelled i node the hyphen fell out of use over the years The term is sometimes spelled In o d e ,,,
869, starting the search over with the path name taken from the contents of the symbolic link We prevent infinite loops by counting the number of symbolic links encountered during a path name search and returninganerrorwhena limit eight isexceeded Nondisk files such as devices do not have data blocks allocated on the disk The kernel notices these file type s as indicated in the inode and calls appropriatedriversto handle I Ofor them Once the inode is found by for instance the open system call a file structure is allocated to point to the inode The file descriptor given to the user refers to this file structure FreeBSDhas adirectory name cache to hold,,,
870,eferencecountforhowmanyfiledescriptorsrefertoit Whenacount becomeszero theentryisnolongerneededandmaybereclaimedandreused C 7 5 Disk Structures Thefilesystemthattheuserseesissupportedbydataonamassstoragedevice usually a disk The user ordinarily knows of only one file system but this one logical file system may actually consist of several physicalfile systems each on a different device Because device characteristics differ each separate,,,
871,eferencecountforhowmanyfiledescriptorsrefertoit Whenacount becomeszero theentryisnolongerneededandmaybereclaimedandreused C 7 5 Disk Structures Thefilesystemthattheuserseesissupportedbydataonamassstoragedevice usually a disk The user ordinarily knows of only one file system but this one logical file system may actually consist of several physicalfile systems each on a different device Because device characteristics differ each separate,,,
872,rnal directory structure Finally truncate calls were added TheFastFileSystemwasasuccessandisnowfoundinmostimplementations ofUNIX Itsperformanceismadepossiblebyitslayoutandallocationpolicies whichwediscussnext InSection14 4 4 wediscussedchangesmadeinSun OS to increasediskthroughput further C 7 7 Layout and Allocation Policies Thekernelusesa logicaldevicenumber inodenumber pairtoidentifyafile The logical device number defines the file system involved The inodes in the file system are numbered in sequence In the Version 7 file system all inodes are in an array immediately following a single superblock at the beginning of,,,
873,rnal directory structure Finally truncate calls were added TheFastFileSystemwasasuccessandisnowfoundinmostimplementations ofUNIX Itsperformanceismadepossiblebyitslayoutandallocationpolicies whichwediscussnext InSection14 4 4 wediscussedchangesmadeinSun OS to increasediskthroughput further C 7 7 Layout and Allocation Policies Thekernelusesa logicaldevicenumber inodenumber pairtoidentifyafile The logical device number defines the file system involved The inodes in the file system are numbered in sequence In the Version 7 file system all inodes are in an array immediately following a single superblock at the beginning of,,,
874,ces Adevice is distinguished by a class block or character and a device number The device number consists oftwo parts The majordevicenumber isusedtoindexthearray forcharacter or block devices to find entries into the appropriate device driver The minor the hardwaresystem call interface to the kernel socket protocols network interfaceplain file file system block device drivercooked block interfaceraw tty interfacecooked TTY line discipline character device driverraw block interface Figure C 11 4 3 BSD kernel I O structure ,C.7.6 Implementations,C.7.7 Layout and Allocation Policies,C.8 I/O System
875,time justasanydiskblockmaybemapped into only one buffer at a time The EMPTYlist holds buffer headers which are usedifaphysicalmemoryblockof8 KBissplittoholdmultiple smallerblocks Headersareneededfor theseblocks andareretrievedfrom EMPTY The number of data in a buffer may grow as a user process writes more data following those already in the buf fer When this increase occurs a new buffer large enough to hold all the data is allocated and the original data are copied into it followed by the new data If a buffer shrinks a buffer is taken,,,
876,ance does Unbuffered transfers directly to or from a user s virtualaddressspacearethusallowed Thesizeofthetransferislimitedbythe physicaldevices someof which requirean evennumber of bytes The kernel accomplishes transfers for swapping and paging simply by putting the appropriate request on the queue for the appropriate device No specialswapping or paging devicedriverisneeded The4 2BSDfile system implementation was actually written and largely tested as a user process that used a raw disk interface before the code was movedintothekernel Inaninterestingabout face theMachoperatingsystem,,,
877, full pipe the process is suspended Once all data previously written into the pipe havebeenreadout writingcontinuesatthebeginningofthefile pipesarenot truecircularbuffers Onebenefitofth esmallsizeofpipes usually4 096bytes is that pipe data are seldom actually written to disk they usually are kept in memoryby thenormal block buffercache InFreeBSDpipes are implemented as a special case of the socketmecha nism The socket mechanism provides a ge neral interface not only to facilities suchaspipes whicharelocaltoonemachine butalsotonetworkingfacilities ,,,
878, full pipe the process is suspended Once all data previously written into the pipe havebeenreadout writingcontinuesatthebeginningofthefile pipesarenot truecircularbuffers Onebenefitofth esmallsizeofpipes usually4 096bytes is that pipe data are seldom actually written to disk they usually are kept in memoryby thenormal block buffercache InFreeBSDpipes are implemented as a special case of the socketmecha nism The socket mechanism provides a ge neral interface not only to facilities suchaspipes whicharelocaltoonemachine butalsotonetworkingfacilities ,C.8.2 Raw Device Interfaces,C.8.3 C-Lists,C.9 Interprocess Communication
879, full pipe the process is suspended Once all data previously written into the pipe havebeenreadout writingcontinuesatthebeginningofthefile pipesarenot truecircularbuffers Onebenefitofth esmallsizeofpipes usually4 096bytes is that pipe data are seldom actually written to disk they usually are kept in memoryby thenormal block buffercache InFreeBSDpipes are implemented as a special case of the socketmecha nism The socket mechanism provides a ge neral interface not only to facilities suchaspipes whicharelocaltoonemachine butalsotonetworkingfacilities ,,,
880,bsumes the application presentation and session layers of the ISOmodel Such user level programs as the file transfer protocol FTP and Telnet remotelogin existat thislevel Host host This layer corresponds to ISO s transport and the top part of its network layers Both the Transmission Control Protocol TCP a n d the Internet Protocol IP are in this layer with TCPon top of IP TCP corresponds to an ISOtransport protocol and IPperforms the addressing functions of the ISOnetwork layer Network interface Thislayerspansthelowerpartofthe ISOnetworklayer and the entire data link layer The protocols involved here depend on the,,,
881,eduling in the extreme case FreeBSDmemory management uses swapping supported by paging A pagedaemon process uses a modified second chance page replacement algo rithmto keepenoughfreeframestosupportthe executingprocesses Pageandfile I Ousesablockbuffercachetominimizetheamountofactual I O Terminaldevicesusea separatecharacter buffering system Networking support is one of the most important features in FreeBSD The socket concept provides the pro gramming mechanism to access other processes even across a network Sockets provide an interface to several sets ofprotocols ,C.9.1 Sockets,C.9.2 Network Support,C.10 Summary
882,n Pearson 2015 Roberson 2003 J Roberson ULE A Modern Scheduler For FreeBSD Pro ceedings of the USENIX BSDCon Conference 2003 pages 17 28 ,C.9.2 Network Support,C.10 Summary,Further Reading
883,n Pearson 2015 Roberson 2003 J Roberson ULE A Modern Scheduler For FreeBSD Pro ceedings of the USENIX BSDCon Conference 2003 pages 17 28 ,C.10 Summary,Further Reading,Bibliography
884, by its inability to execute UNIXapplications and its strong ties to a single hardware architecture which made it difficult to port Mach s communication system and philosophy are derived from Accent but many other significant portions of the system for example the virtual memory system and the management of tasks and threads were developed from scratch An important goal of the Mach effort was supportformultiprocessors 1,Bibliography,Appendix D The Mach System,
885, by its inability to execute UNIXapplications and its strong ties to a single hardware architecture which made it difficult to port Mach s communication system and philosophy are derived from Accent but many other significant portions of the system for example the virtual memory system and the management of tasks and threads were developed from scratch An important goal of the Mach effort was supportformultiprocessors 1,Bibliography,Appendix D The Mach System,D.1 History of the Mach System
886,aw as the drawbacks of BSD Akernelthathasbecometherepositoryofmanyredundantfeatures and that consequently isdifficultto manage andmodify Original design goals that made it difficult to provide support for multiprocessors distributed systems and shared program libraries for instance because the kernel was desi gned for single processors it has no provisionsfor locking codeor datathat otherprocessorsmight beusing ,Appendix D The Mach System,D.1 History of the Mach System,D.2 Design Principles
887,object oriented approach supported by Mach allows objects to reside anywhere in a network of Mach systems transparent to the user The portmechanism discussed later in this section makesall ofthis possible Mach sprimitiveabstractionsaretheheartofthesystemandareasfollows Ataskisanexecutionenvironmentthatprovidesthebasicunitofresource allocation It consists of a virtual address space and protected access to systemresourcesviaports and itmaycontain one or morethreads Athreadisthebasicunitofexecutionandmustruninthecontextofatask which provides the address space All threads within a task share the,D.1 History of the Mach System,D.2 Design Principles,D.3 System Components
888,or waiting to be allocated a processor Athread can resume its execution only if it is returnedtothe running state These two states are also associated with a task An operation on a task affects all threads in a task so suspending a task involves suspending all the threads in it Task and thread suspensions are separate independent mecha nisms however so resuming a thread in a suspended task does not resume thetask Machprovidesprimitivesfromwhichthread synchronizationtoolscanbe built This practice is consistent with Mach s philosophy of providing mini ,D.2 Design Principles,D.3 System Components,D.4 Process Management
889,or waiting to be allocated a processor Athread can resume its execution only if it is returnedtothe running state These two states are also associated with a task An operation on a task affects all threads in a task so suspending a task involves suspending all the threads in it Task and thread suspensions are separate independent mecha nisms however so resuming a thread in a suspended task does not resume thetask Machprovidesprimitivesfromwhichthread synchronizationtoolscanbe built This practice is consistent with Mach s philosophy of providing mini ,,,
890, time quantum or scheduling interval expires if a thread has no use for theCPU Mutualexclusionisachievedthroughtheuseofspinlocks asdiscussedin Chapter6 The routinesassociatedwithmutualexclusionarethese The routine mutex alloc dynamicallycreatesa mutexvariable The routine mutex free deallocates a dynamically created mutex vari able The routine mutex lock locks a mutex variable The executing thread loopsinaspinlockuntilthelockisattained Adeadlockresultsifathread with a lock tries to lock the same mutex variable Bounded waiting is,,,
891,mutex while empty condition wait nonempty mutex remove an item from the buffe to nextc condition signal nonfull mutex unlock mutex consume the item in nextc until FALSE Figure D 4 The structure of the consumer process ,,,
892,Remote procedure call RPC messages are used to synchro nize the execution of the thread causing the exception the victim a n dt h a to f thehandlerandtocommunicateinform ationabouttheexceptionbetweenthe victimand handler Mach exceptionsare also usedto emulatethe BSDsignal package Disruptionstonormalprogramexecutioncomeintwovarieties internally generated exceptions and external inte rrupts Interrupts are asynchronously generateddisruptionsofathreadortask whereasexceptionsarecausedbythe occurrenceofunusualconditionsduringathread sexecution Mach sgeneral purpose exception facility is used for error detection and debugger support ,,,
893,givenoutby the creator of the object including the kernel and are passed in messages If the holder of a receive right sends that right in a message the receiver of the message gains the right and the sender loses it A task may allocate ports to allow access to any objects it owns or for communication The destruction of eitheraportortheholderofthereceiverightcausestherevocationofallrights tothat port and thetasksholding sendrights can be notifiedifdesired D 5 1 Ports Aportisimplementedasaprotected boundedqueuewithinthekernelofthe system on which the object resides If a queue is full a sender may abort the,D.4.3 The CPU Scheduler,D.4.4 Exception Handling,D.5 Interprocess Communication
894,givenoutby the creator of the object including the kernel and are passed in messages If the holder of a receive right sends that right in a message the receiver of the message gains the right and the sender loses it A task may allocate ports to allow access to any objects it owns or for communication The destruction of eitheraportortheholderofthereceiverightcausestherevocationofallrights tothat port and thetasksholding sendrights can be notifiedifdesired D 5 1 Ports Aportisimplementedasaprotected boundedqueuewithinthekernelofthe system on which the object resides If a queue is full a sender may abort the,,,
895,aninternalportdatastructureaddress or by forwardingitfor processingto theNetMsgServer SectionD 5 3 The use of pointers in a message provid esthe means to transfer the entire address space of a task in one single message The kernel also must process pointers to out of line data since a pointer to data in the sender s address spacewouldbeinvalidinthereceiver s especiallyifthesenderandreceiver reside on differentsystems Generally systems send messages by copying the data from the sender to the receiver Because this technique can be inefficient especiallyforlargemessages Machtakesadifferentapproach Thedatarefer ,,,
896,addresses Afullmessagetransfer isshown inFigureD 6 D 5 3 The NetMsgServer For a message to be sent between computers the message s destination must be located and the message must be transmitted to the destination UNIXtra ditionallyleaves these mechanisms to the low levelnetwork protocols which require the use of statically assigned communication endpoints for example ,,,
897,ssociated with it and may be manipulated by messages sent to its port Memory objects unlike the memory managementroutinesinmonolithic traditionalkernels allow easyexperimentationwithnewmemory manipulationalgorithms D 6 1 Basic Structure Thevirtualaddressspaceofataskisgenerallysparse consistingofmanyholes ofunallocatedspace Forinstance ame mory mappedfileisplacedinsomeset ofaddresses Largemessagesarealsotransferredassharedmemorysegments For each of these segments a section of virtual memory address is used to provide the threads with access to the message As new items are mapped or,,,
898,ssociated with it and may be manipulated by messages sent to its port Memory objects unlike the memory managementroutinesinmonolithic traditionalkernels allow easyexperimentationwithnewmemory manipulationalgorithms D 6 1 Basic Structure Thevirtualaddressspaceofataskisgenerallysparse consistingofmanyholes ofunallocatedspace Forinstance ame mory mappedfileisplacedinsomeset ofaddresses Largemessagesarealsotransferredassharedmemorysegments For each of these segments a section of virtual memory address is used to provide the threads with access to the message As new items are mapped or,D.5.3 The NetMsgServer,D.5.4 Synchronization Through IPC,D.6 Memory Management
899,ssociated with it and may be manipulated by messages sent to its port Memory objects unlike the memory managementroutinesinmonolithic traditionalkernels allow easyexperimentationwithnewmemory manipulationalgorithms D 6 1 Basic Structure Thevirtualaddressspaceofataskisgenerallysparse consistingofmanyholes ofunallocatedspace Forinstance ame mory mappedfileisplacedinsomeset ofaddresses Largemessagesarealsotransferredassharedmemorysegments For each of these segments a section of virtual memory address is used to provide the threads with access to the message As new items are mapped or,,,
900,ly paging it out If a user level manager fails to reduce the resident set of pages when asked to do so by the kernel thedefaultmemorymanagerisinvoked anditpagesouttheuser level managertoreducetheuser levelmanager sresidentsetsize Shouldtheuser levelmanagerrecoverfromtheproblemthatpreventeditfromperformingits own pageouts it will touch these page s causing the kernel to page them in again and can thenpagethem out asitseesfit If a thread needs access to data in a memory object for instance a file it invokes the vm map system call Included in this system call is a port that identifies the object and the memory manager that is responsible for the,,,
901,em to be solved Mach supports consistent shared memory only when the memory is shared by tasks running onprocessorsthatsharememory Aparenttaskisabletodeclarewhichregions of memory are to be inherited by its children and which are to be readable writable This scheme is different fro m copy on write inheritance in which each task maintains its own copy of any changed pages A writable object is addressedfromeachtask saddressmap andallchangesaremadetothesame copy The threads within the tasks are responsible for coordinating changes to memory so that they do not interfere with one another by writing to the,,,
902,hat lives in a read only part of a program s address space Any operating system calls the program makes are translated into subroutine calls to the library Single user operating systems such as MS DOSand the Macintosh operatingsystem have beenimplemented solelyasemulationlibraries Forefficie ncyreasons theemulationlibrarylives in the address space of the program needin g its functionality in theory how ever itcould be aseparatetask Morecomplexoperatingsystemsareemulatedthroughtheuseoflibraries andoneormoreservers Systemcallsthatcannotbeimplementedinthelibrary are redirected to the appropriate server Servers can be multithreaded for,D.6.2 User-Level Memory Managers,D.6.3 Shared Memory,D.7 Programmer Interface
903,rom a UNIXsystem can run correctlyunderMach Haveamodernoperatingsystemthatsupportsmanymemorymodelsand paralleland distributedcomputing Designa kernelthat issimplerandeasiertomodifythan is 4 3 BSD Aswe have shown Mach iswellon itsway toachieving these goals Mach 2 5 includes 4 3 BSDin its kernel which provides the emulation neededbutenlargesthekernel This 4 3 BSDcodehasbeenrewrittentoprovide the same 4 3functionality but to use the Mach primitives This change allows the4 3 BSDsupportcodeto runinuserspaceon aMach 3 0 system ,D.6.3 Shared Memory,D.7 Programmer Interface,D.8 Summary
904,rtson Accent A Com munication Oriented Network Operating System Kernel Proceedings of the ACM Symposium on Operating System Principles 1981 pages 64 75 Tevanian et al 1987a A Tevanian Jr R F Rashid D B Golub D L Black E Cooper andM W Young MachThreadsandtheUnixKernel TheBattlefor Control Proceedings of the Summer USENIX Conference 1987 Tevanian et al 1987b A T evanian Jr R F Rashid M W Y oung D B Golub M R Thompson W Bolosky and R Sanzi A UNIX Interface for Shared,D.7 Programmer Interface,D.8 Summary,Further Reading
905,rtson Accent A Com munication Oriented Network Operating System Kernel Proceedings of the ACM Symposium on Operating System Principles 1981 pages 64 75 Tevanian et al 1987a A Tevanian Jr R F Rashid D B Golub D L Black E Cooper andM W Young MachThreadsandtheUnixKernel TheBattlefor Control Proceedings of the Summer USENIX Conference 1987 Tevanian et al 1987b A T evanian Jr R F Rashid M W Y oung D B Golub M R Thompson W Bolosky and R Sanzi A UNIX Interface for Shared,D.8 Summary,Further Reading,Bibliography
906, Halsall Data Communications Computer Networks and Open Systems Third Edition c circlecopyrt1992 Addison Wesley Pub lishing Co Inc Reading Massachusetts Figure 1 9 p 14 Figure 1 10 p 15 and Figure1 11 p 18 Reprintedwithpermissionof the publisher 963,Credits,,
907,aph directories 547 549 additional reference bits algorithm 409 410 additional sense code 512 additional sense code qualifie 512 address es defined 496 linear 380 382 logical 353 379 MAC 745 physical 354 379 trusted 638 virtual 354 address binding 352 353 address mapping 456 457 address resolution protocol ARP 745 965,Index,,
908,on I O bus advisory fi le lock mechanism A fi le locking system in which the operating system does not enforce locking and fi le access leaving it to pro cesses to implement the details AFS OpenAFS A network fi le system designed at Carnegie Mellon University with the goal of enabling servers to support as many clients as possible aging A solution to scheduling starvation that involves gradually increasing the priority of threads as they wait for CPU time ahead of time AOT compilation A feature of the Android RunTime ART virtual machine envi ronment in which Java applications are compiled to native machine code when they are installed on a system rather than just in time when they are executed ,Glossary,,
909,iley s ebook EULA ,EULA,,
